<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sixin的小站</title>
  <icon>https://www.gravatar.com/avatar/6638526fe37f07fe3c3ebdae901d3a2b</icon>
  <subtitle>刘思鑫的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coder.liusixin.cn/"/>
  <updated>2018-07-01T07:13:00.000Z</updated>
  <id>http://coder.liusixin.cn/</id>
  
  <author>
    <name>刘思鑫</name>
    <email>fordreamxkhl@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP2 的深入探究</title>
    <link href="http://coder.liusixin.cn/posts/4a24537/"/>
    <id>http://coder.liusixin.cn/posts/4a24537/</id>
    <published>2018-07-01T03:24:00.000Z</published>
    <updated>2018-07-01T07:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>内容参考自《HTTP2 基础教程》整理</p></blockquote><h1 id="web-优化"><a href="#web-优化" class="headerlink" title="web 优化"></a>web 优化</h1><h2 id="当前性能挑战"><a href="#当前性能挑战" class="headerlink" title="当前性能挑战"></a>当前性能挑战</h2><blockquote><p>发布现代 Web 页面或 Web 应用绝不是一件小事。每个页面会引用数百个对象， 关联十多个域名，网络环境相差迥异，设备的处理能力也参差不齐。在这样的前提下，提供表现一致且响应迅速的 Web 体验并不简单。如果要保证用户在网站上的交互流畅，就必须重视理解客户端获取 Web 页面和渲染的步骤，以及各个步骤要面临的挑战。理解了它们，就能理解椎动 HTTP/2 的力量，也能理解其新特性相对 HTTP/1 都带来哪些益处。</p></blockquote><h3 id="剖析-Web-页面请求"><a href="#剖析-Web-页面请求" class="headerlink" title="剖析 Web 页面请求"></a>剖析 Web 页面请求</h3><p>用户在浏览器中点击链接到页面呈现在屏幕上，在此期间到底发生了什么?</p><p>我们把这一过程分成两部分:</p><ul><li>资源获取</li><li>页面解析/渲染</li></ul><p><strong>资源获取</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180725-003005@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ol><li>把待请求 URL 放入队列</li><li>解析 URL 中域名的 IP 地址(A)</li><li>建立与目标主机的 TCP 连接(B)</li><li>如果是 HTTPS 请求，初始化并完成 TLS 握手(C)</li><li>向页面对应的 URL 发送请求。</li></ol><p><strong>页面解析/渲染</strong><br><a href="http://cdn-blog.liusixin.cn/WX20180725-003519@2x.png" rel="external nofollow noopener noreferrer" target="_blank"></a></p><ol><li>接收响应:</li><li>如果(接收的)是主体 HTML，那么解析它，并针对页面中的资源触发优先获取机制(A)</li><li>如果页面上的关键资源已经接收到，就开始渲染页面(B)</li><li>接收其他资橱，继续解析渲染，直到结束(C)。</li></ol><blockquote><p>页面上的每 一 次点击，都需要重复执行前面那些流程，给网络带宽和设备资源带来压力。 Web 性能优化的的核心，就是加快甚至干脆去掉其中的某些步骤。</p></blockquote><h3 id="关键性能指标"><a href="#关键性能指标" class="headerlink" title="关键性能指标"></a>关键性能指标</h3><p>从上面的图中，我们能找到影响 Web 性能的端点，以及能动手改进的地方。</p><ul><li>延迟：IP 数据包从一个网络端点到另一个网络端点所花费的时间</li><li>带宽：只要带宽没有饱和，两个网络端点之间的连接会一次处理尽可能多的数据量。</li><li>DNS 查询：通过域名系统(DNS)把主机名称转换成 IP 地址</li><li>建立连接时间：客户端和服务器之间建立连接需要往返数据应答，称为“三次握手”。</li><li>TLS 协商时间：如果客户端发起 HTTPS 连接，它还需要进行传输层安全协议(TLS)协商;</li></ul><p>目前为止，客户端还没有真正发起 HTTP 请求，却已经用掉了 DNS 查询的往返时间，以及 TCP 和 TLS 的耗时。下面的指标严重依赖于页面内容本身或服务器性能，而不是网络。</p><ul><li>首字节时间 (TTFB)：TTFB 是指客户端从开始定位到 Web 页面，至接收到主体页面响应的第一字节所耗费的时间。</li><li>内容下载时间：等同于被请求资糠的最后字节到达时间( TTLB )。</li><li>开始渲染时间：客户端的屏幕上什么时候开始显示内容?这个指标测量的是白屏时间。</li><li>文档加载完成时间(又叫页面加载时间)：客户端浏览器认为页面加载完毕的时间。</li></ul><h3 id="Web-性能的最佳实践"><a href="#Web-性能的最佳实践" class="headerlink" title="Web 性能的最佳实践"></a>Web 性能的最佳实践</h3><ul><li>DNS 查询优化<ul><li>限制不同域名的数量：当然，这通常不是你能控制的;但是如果准备迁移到 HTTP/2,域名数量对性能的相对影响会只增不减。</li><li>保证低限度的解析延迟</li><li>在主体页面 HTML 或响应中利用 DNS 预取指令</li></ul></li></ul><pre class=" language-html"><code class="language-html">&lt;link rel=”dns-prefetch” href=”//ajax.googleapls .com〉</code></pre><ul><li>优化 TCP 连接<ul><li>利用 preconnect 指令</li></ul></li></ul><pre class=" language-html"><code class="language-html">&lt;link rel=”preconnect” href=”//fonts.example.com" crossorigin></code></pre><ul><li>尽早终止井响应。</li><li>实施最新的 TLS 最佳实践来优化 HTTPS。</li><li>避免重定向<ul><li>如果它们不能被直接消灭，你还有两个选择:</li><li>利用 CDN 代替客户端在云端实现重定向</li><li>如果是同一域名的重定向，使用 Web 服务器上的 rewrite 规则，避免重定向。</li></ul></li><li>客户端缓存<ul><li>所谓的纯静态内容，例如图片或带版本的数据，可以在客户端永久缓存。</li><li>CSS/JS 和个性化资源，缓存时间大约是会话(交互)平均时间的两倍。</li></ul></li><li>网络边缘的缓存</li><li>条件缓存：当资服不经常变化时，使用条件请求可以显著节省带宽和性能。但是，保证资源的最新版迅速可用也是非常重要的。使用条件缓存可以通过以下方法。<ul><li>在请求中包含 HTTP 首部 <strong>Last-Modified-Since</strong>，仅当内容在指定时间之后被更新过，服务器才返回完整内容;否则只返回 304 响应码，并在响应首部中附带上新 的时间戳 Date 字段。</li><li>在请求体中包含实体校验码，或者叫 <strong>ETag</strong>：ETag 由服务器提供，内嵌于资源的响应首部中。服务器会比较当前 ETag 与请求首部中收到的 ETag, 如果一致，就只返回 304 晌应码:否则返回完整内容。</li></ul></li><li>压缩和代码极简化：常规的压缩算法包括 gzip 和 deflate;相对晚些面世的 Brotli 算曲也开始崭露头角了。</li><li>避免阻塞 CSS/JS<ul><li>如果 JS 执行顺序无关紧要，并且必须在 onload 事件触发之前运行，那么可以设置 async 属性。<pre class=" language-html"><code class="language-html">&lt;script async src=”/js/MyfHe.js"></code></pre></li><li>如果 JS 执行顺序很重要，并且你也能承受脚本在 DOM 加载完之后运行，那么请使用 defer 属性。<pre class=" language-html"><code class="language-html">&lt;script defer src=”/js/MyfHe.js"></code></pre></li><li>如果你不想延迟主页面的 onload 事件，可以考虑通过 iframe 获取 JS，因为它的处理独立于主页面。 但是，通过 iframe 下载的 JS 访问不了主页面上的元素。</li></ul></li><li>图片优化<ul><li>图片元信息</li><li>图片过载：图片最终被浏览器自动缩小，要么因为原始尺寸超过了浏览器可视区中的占位大小，要么因为像素超过设备的显示能力。这不仅浪费带宽，消耗的 CPU 资源也很可观</li></ul></li></ul><h3 id="反模式"><a href="#反模式" class="headerlink" title="反模式"></a>反模式</h3><blockquote><p>HTTP/2 对每个域名只会开启一个连接，所以 HTTP/1.1 下的一些诀窍对它来说只会适得其反。接下来讨论几个如今流行却不再适用于 HTTP/2 站点的做法。</p></blockquote><ul><li><p><strong>生成精灵图和资源合并/内联</strong>：HTTP/2 中，针对特定资原的请求不再是阻塞式的，很多请求可以井行处理; 于是就性能而言，生成精灵图就失去意义了。</p></li><li><p><strong>域名拆分</strong>：利用浏览器针对每个域名开启多个连接的能力来井行下载资源。</p></li><li><p><strong>禁用 cookie 的域名</strong>：在 HTTP/1 下，请求和响应首部从不会被压缩。因此，对图片之类不依赖于 cookie 的资源，设置禁用 cookie 的域名是个合理的建议。但是 HTTP/2 中，首都是被压缩的，并且客户端和服务器都会保留“首部历史”，避免重复传输巳知信息。所以，如果你要重构站点，大可不必考虑禁用 cookie 的域 名 ，这样能减少很多包袱。</p></li></ul><p>静态资源也应该从同一域名提供;使用与主页面 HTTP 相同的域名， 消除了额外的 DNS 查询以及(潜在的) socket 连接，它们都会减慢静态资源的获取。把阻塞渲染的资源放在同样的域名下，也可以提升性能。</p><h1 id="HTTP-2-迁移"><a href="#HTTP-2-迁移" class="headerlink" title="HTTP/2 迁移"></a>HTTP/2 迁移</h1><p>升级到 HTIP/2 之前，你应该考虑如下方面:</p><ul><li>浏览器对旧的支持情况</li><li>迁移到 TLS (HTTPS)的可能性</li><li>对你的网站做基于 h2 的优化(可能对 HTTP/1 有反作用)</li><li>网站上的第三方资源</li><li>保持对低版本客户端的兼容</li></ul><h2 id="撤销针对-HTTP-1-1-的“优化”"><a href="#撤销针对-HTTP-1-1-的“优化”" class="headerlink" title="撤销针对 HTTP/1.1 的“优化”"></a>撤销针对 HTTP/1.1 的“优化”</h2><p>Web 开发者之前花费了大量心血来充分使用 hl，并且已经总结了一些诀窍，例如资源合井、域名拆分、极简化、 禁用 cookie 的域名、生成精灵图，等等。所以，当得知这些实践中有些在 h2 下变成反模式时，你可能会感到吃惊。例如，资掘合并(把很多 css 或 JavaScript 文件拼 合成一个)能避免浏览器发出多个请求。对 hl 而言这很重要，因为发起请求的代价很高 ;但是在 h2 的世界里 ，这部分已经做了深度优化。放弃资源合并的结果可能是，针对单个资源发起请求的代价很低 ，但浏览器端可以进行更细粒度的缓存。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180725-134210@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>要不要进行域名拆分</strong></p><blockquote><p>HTIP/2 的设计思路是尽量在单个 TCP/IP socket 上通信 。 它的做法是，开启一个 socket，并以最理想的拥塞速率运行，这样比起协调多个 socket 更可靠也更高效。尽管如此， Akamai 的 Foundry 团队的研究表明，这种策略并不总是有效。取决于网站的具体情况，多个 socket 可能优于单个 socket。 它直接依赖于 TCP 拥塞控制的运作方式，以及达到最优设置所需的时间。设直较大的初始拥塞窗口值可以缓解此问题;但是如采这些较大的位无法由通信链路支持，那么也会产生问题。</p></blockquote><h2 id="第三方资源"><a href="#第三方资源" class="headerlink" title="第三方资源"></a>第三方资源</h2><p>由于有第三方资源的存在，而且会拖累 HTTP/2 带来的任何可能的 性能优化。如果你使用的第三方资源不支持 HTTPS，那就更麻烦了，解决这类问题可以从下列问题开始。</p><ul><li>用到的第三方资源支持 HTTPS 吗?</li><li>它们是否计划支持 HTTP/2 ?</li><li>它们是否意识到，自己应当尽可能降低所提供的资源对页面性能的影响，并将其视为关键任务?</li></ul><h1 id="HTTP-2-协议"><a href="#HTTP-2-协议" class="headerlink" title="HTTP/2 协议"></a>HTTP/2 协议</h1><h2 id="HTTP-2-分层"><a href="#HTTP-2-分层" class="headerlink" title="HTTP/2 分层"></a>HTTP/2 分层</h2><p>HTTP/2 大致可以分为两部分:</p><ul><li><p><strong>分帧层</strong>：即 h2 多路复用能力的核心部分;</p><ul><li>它的目的是传输 HTTP，而不是其他。</li><li>基于帧的二进制协议。这方便了机器解析。</li><li><strong>首部压缩</strong>：仅仅使用二进制协议似乎还不够， h2 的首部还会被深度压缩。这将显著减少传输中的冗余字节。</li><li><strong>多路复用</strong></li><li><strong>加密传输</strong></li></ul></li><li><p><strong>数据或 http 层</strong>：其中包含传统上被认为是 HTTP 及其关联数据的部分。</p><ul><li>可以向后兼容 HTTP/1.1，对于熟悉 h1 并习惯于阅读线上协议的开发者来说，还有些地方需要重新确认。</li></ul></li></ul><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><blockquote><p>连接是所有 HTTP/2 会话的基础元素，其定义是客户端初始化的一个 TCP/IP socket，客户端是指发送 HTTP 请求的实体。</p></blockquote><p>这和 h1 是一样的，不过与完全无状态的 h1 不同的是，h2 把 它所承载的帧和流共同依赖的连接层元素捆绑在一起，其中既包含连 接层设置也包含首部表。也就是说，与之前的 HTTP 版本不同，每个 h2 连接都有一定的开销。之所以这么设计，是考虑到收益远远超过其开销。</p><h3 id="是否支持-h2"><a href="#是否支持-h2" class="headerlink" title="是否支持 h2"></a>是否支持 h2</h3><p>HTTP/2 提供两种协议发现的机制。</p><ol><li><p><strong>在连接不加密</strong>的情况下 ，客户端会利用 Upgrade 首部来表明期望使用 h2。 如果服务器也可以支持 h2，它会返回一个<code>“ 101 Switching Protocols&quot;</code> (协议转换)响应。这增加了一轮完整的请求-响应通信。<strong>如果连接基于 TLS</strong>，客户端在 ClientHello 消息中设直 ALPN (Application-Layer Protocol Negotiation，应用层协议协商)扩展来表明期望使用 h2 协议，服务器用同样的方式回复。如果使用这种方式，那么 h2 在创建 TLS 握手的过程中完成协商，不需要多余的网络通信。</p></li><li><p>使用 HTTP Alternative Services (HTTP 替代服务)或 Alt-Svc。</p></li></ol><h2 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h2><blockquote><p>HTTP/2 是基于帧(frame)的协议。采用分帧是为了将重要信息都封装起来，让协议的解析方可以轻松阅读、解析井还原信息。相比之下，h1 不是基于帧的，而是以文本分隔。</p></blockquote><p>解析 h1 的请求或响应可能出现下列问题。</p><ul><li>一次只能处理一个请求或响应，完成之前不能停止解析。</li><li>无陆预判解析需要多少内存。这会带来一系列问题: 你要把一行读到多大的缓冲区里;如果行太长会发生什么;应该增加并重新分配内存，还是返回 400 错误。为了解决这些 问题，保持内存处理的效率和速度可不简单。</li></ul><p>有了帧，处理协议的程序就能预先知道会收到什么。基于帧的协议，特别是 h2，开始有固定长度的字节，其中包含表示整帧长度的字段。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180725-142012@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由于 h2 是分帧的，请求和响应可以交错甚至多路复用。多路复用有助于解决类似队头阻塞的问题。</p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>HTTP/2 规范对流(stream)的定义是: “HTTP/2 连接上独立的、双向的帧序列交换。” 你可以将流看作在连接上的一系列帧，它们构成了单独的 HTTP 请求和响应。如果客户端想要发出请求，它会开启一个新的流。然后，服务器将在这个流上回复。这与 h1 的 请求/响应 流程类似，重要的区别在于，因为有分帧，所以多个请求和响应可以交错，而不会互相阻塞。流 ID (帧首部的第 6~9 字节)用来标识帧所属的流。</p><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><blockquote><p>HTTP 消息泛指 HTTP 请求或响应。</p></blockquote><p>一个悄息至少由 HEADERS 帧(它初始化流)组成，井且可以另外包含 CONTINUATION 和 DATA 帧，以及其他的 HEADERS 帧。</p><p>h1 的请求和响应都分成消息首部和消息体两部分;与之类似，<br>h2 的请求和响应分成 HEADERS 帧和 DATA 帧。</p><p><strong>一切都是 header</strong></p><p>hl 把消息分成两部分: 请求 /状态行， 首部。h2 取消了这种区分，井把这些行变成了魔法伪首部。看下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180725-142810@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>请注意，请求和状态行在这里拆分成了多个首部，即:scheme、:method、:path 和:status。</p><p><strong>没有分块编码( chunked encoding)</strong></p><p><strong>不再有 101 的晌应</strong></p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><blockquote><p>h2 的新特性之一是基于流的流量控制。不同于 h1 的世界，只要客户端可以处理，服务端就会尽可能快地发送数据， h2 提供了客户端调整传输速度的能力。</p></blockquote><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>流的最后一个重要特性是依赖关系。通过 HEADERS 帧和 PRIORITY 帧，客户端可以明确地和服务端沟通它需要什么，以及它需要这些资源的顺序。这是通过声明<strong>侬赖关系树</strong>和树里的<strong>相对权重</strong>实现的。</p><ul><li>侬赖关系为客户端提供了一种能力，通过指明某些对象对另一些对象有依赖，告知服务器这些对象应该优先传输。</li><li>权重让客户端告诉服务器如何确定具有共同依赖关系的对象的优先级。</li></ul><p>举个例子：</p><pre class=" language-shell"><code class="language-shell">index. html- header.jpg- critical.js- less_critical.js- style.css- ad.js- photo.jpg</code></pre><p>在收到主体 HTML 文件之后，客户端会解析它，并生成依赖树，然后给树里的元素分配权重。这时这棵树可能是这样的:</p><pre class=" language-shell"><code class="language-shell">index. html- style.css  - critical.js    - less_critical.js(weight 20)    - photo.jpg(weight 8)    - header.jpg(weight 8)    - ad.js(weight 4)</code></pre><h2 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h2><blockquote><p>提升单个对象性能的最佳方式，就是在它被用到之前就放到浏览器的缓存里面。这正是 HTTP/2 的服务端推送的目的。</p></blockquote><h2 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h2><blockquote><p>首部压缩 (HPACK)是 HTTP/2 的关键元素之一。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180725-150750@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，后者的很多数据与前者重复了。第一个请求约有 220 字节，第二个约有 230 字节，但二者只有 36 字节是不同的。如果仅仅发送这 36 字节，就可以节省约 85% 的字节数。简而言之， HPACK 的原理就是这样。</p><h1 id="HTTP2-的性能"><a href="#HTTP2-的性能" class="headerlink" title="HTTP2 的性能"></a>HTTP2 的性能</h1><p>HTTP/2 比 h1 确实做了更多的工作，其目的就是为了从总体上提升性能 。下面是一些 h1 没有，但 h2 实现了的事情 :</p><ul><li>窗口大小调节</li><li>依赖树构建</li><li>维持首部信息的静态/动态表</li><li>压缩 /解压缩首部</li><li>优先级调整( h2 允许客户端多次调整单一请求的优先级)</li><li>预先推送客户端尚未请求的数据流</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180725-153135@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="第三方资源-1"><a href="#第三方资源-1" class="headerlink" title="第三方资源"></a>第三方资源</h2><ul><li>第三方请求往往通过不同域名发送;由于浏览器需要解析 DNS、建立 TCP 连接、协商 TLS ， 这将严重影响性能。</li><li>因为第三方资源在不同域名下，所以请求不能从服务端推送、资源依赖、请求优先级等 h2 特性中 受益。这些特性仅是为请求相同域名下的资源设计的。</li><li>你无法控制第三方资源的性能，也无法决定它们是否会通过 h2 传输。</li></ul><p>换个角度来看，如果第三方内容占了页面加载时间的一半，那么 h2 只能解决一半的性能问题。</p><blockquote><p>单点故障(SPOF)是指 Web 页面上引用的某个资源，如果它出问题，将延迟整个页面的加载(甚至导致页面出错)。Chrome 浏览器插件 SPOF-O-MATIC 很容易就能检测出 SPOF 问题，并且通过使用 WebPagetest 来图形化展示那些问题的影响。</p></blockquote><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;内容参考自《HTTP2 基础教程》整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;web-优化&quot;&gt;&lt;a href=&quot;#web-优化&quot; class=&quot;headerlink&quot; title=&quot;web 优化&quot;&gt;&lt;/a&gt;web 优化&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="HTTP" scheme="http://coder.liusixin.cn/tags/HTTP/"/>
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>纯前端实现裁剪压缩图片</title>
    <link href="http://coder.liusixin.cn/posts/b43df12e/"/>
    <id>http://coder.liusixin.cn/posts/b43df12e/</id>
    <published>2018-06-13T14:21:46.000Z</published>
    <updated>2018-06-13T16:11:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于前端是不能直接操作本地文件的， 要么通过 <code>&lt;input type= &quot;file&quot;&gt;</code> 用户单击选择文件或者拖拽的方式，要么使用 Flash 等三方的控件。同时 HTMLS 崛起，可以在前端使用原生的 API 实现图片的处理，这样可以减少后端服务器的压力，同时对用户也是友好的。</p><p>这里面有几个核心的功能：</p><ol><li>支持拖拽</li><li>压缩</li><li>裁剪编辑</li><li>上传和上传进度显示</li></ol><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p><strong>接下来会依次介绍每个功能的实现！</strong></p><h2 id="1-拖拽显示图片"><a href="#1-拖拽显示图片" class="headerlink" title="1. 拖拽显示图片"></a>1. 拖拽显示图片</h2><p>拖拽读取的功能主要是要兼听 HTML5 的 <code>drag</code> 事件， 这个没什么好说的，主要在于怎么读取用户拖过来的图片并把它转成 base64 以在本地显示。</p><p><strong>监听 drop 事件</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>  init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$container<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 需要把dragover的默认行为禁掉，不然会跳页</span>    $container<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $container<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里获取拖过来的图片文件， 为一个File对象</span>      <span class="token keyword">var</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>originalEvent<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">;</span>      handler<span class="token punctuation">.</span><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这里获取到图片文件之后交给 <code>handleDrop</code> 来处理。</p><p>注意如果使用 <code>input</code>, 则监听 <code>input</code> 的 <code>change</code> 事件，</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果使用的是 input，监听change事件</span>$container<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'input[type=file]'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">;</span>  handler<span class="token punctuation">.</span><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">'.container'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>handleDrop</code> 函数里， 读取 file 的内容， 并把它转成 base64 的格式：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 读取File内容并转base64</span>handleDrop<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$container<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> $img <span class="token operator">=</span> $container<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  handler<span class="token punctuation">.</span><span class="token function">readimgFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> $img<span class="token punctuation">,</span> $container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>readimgFile</code> 读取图片文件内容</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 读取图片文件内容</span>readimgFile<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> $img<span class="token punctuation">,</span> $container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 根据mime type检验用户是否选则是图片文件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">"image"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// util.toast("You should choose an image file"); // 工具弹出插件，如果没有请自行封装</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"You should choose an image file"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取图片base64内容</span>    <span class="token keyword">var</span> base64 <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果图片大千1MB, 将body置半透明</span>  <span class="token comment" spellcheck="true">/*    *  如果图片有几个 MB 的，展示的时候会被卡一下， 通过把页面变虚的方式告诉用户现在正在处理之中，页面不可操作，请稍等一会。    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">></span> ONE_MB<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"opacity"</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 因为这里图片太大会被卡一下， 整个页面会不可操作</span>    $img<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 还原</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">></span> ONE_MB<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"opacity"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 然后再调一个压缩和上传的函数</span>    handler<span class="token punctuation">.</span><span class="token function">compressAndUpload</span><span class="token punctuation">(</span>$img<span class="token punctuation">,</span> base64<span class="token punctuation">,</span> file<span class="token punctuation">,</span> $container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 读取为base64格式</span>  reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过 <code>FileReader</code> 读取文件内容， 调的是 <code>readAsDataURL</code>, 这个 API 能够把二进制图片内容转成 base64 的格式， 读取完之后会触发 <code>onload</code> 事件， 在 <code>onload</code> 里面进行显示和上传。</p><p>还会有一个问题， 就是 ios 系统拍摄的照片，如果不是横着拍的，展示出来的照片旋转角度会有问题，即不管你怎么拍，ios 实际存的图片都是横着放的，因此需要用户自己手动去旋转。<br>旋转的角度放在了 exif 的数据结构里面，把这个读出来就知道它的旋转角度了， 用一个 EXIF 的库读取</p><pre class=" language-js"><code class="language-js">readImgFile<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> $img<span class="token punctuation">,</span> $container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  EXIF<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> orientation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exifdata<span class="token punctuation">.</span>Orientation<span class="token punctuation">,</span>      rotateDeg <span class="token operator">=</span> O<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果不是ios拍的照片或者是横拍的，则不用处理，直接读取</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> orientation <span class="token operator">===</span> <span class="token string">"undefined"</span> <span class="token operator">||</span> orientation <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 原本的readImgFile, 添加一个rotateDeg的参数</span>      handler<span class="token punctuation">.</span><span class="token function">doReadImgFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> $img<span class="token punctuation">,</span> $container<span class="token punctuation">,</span> rotateDeg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 否刻用canvas旋转一下</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      rotateDeg <span class="token operator">=</span> orientation <span class="token operator">===</span> <span class="token number">6</span> <span class="token operator">?</span> <span class="token number">90</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span> <span class="token punctuation">:</span>        orientation <span class="token operator">===</span> <span class="token number">8</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span> <span class="token punctuation">:</span>        orientation <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">180</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      handler<span class="token punctuation">.</span><span class="token function">doReadImgFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> $img<span class="token punctuation">,</span> $container<span class="token punctuation">,</span> rotateDeg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>知道角度之后， 就可以用 canvas 处理了， 在下面的压缩图片再进行说明， 因为压缩也要用到 canvas。</p><h2 id="2-压缩图片"><a href="#2-压缩图片" class="headerlink" title="2. 压缩图片"></a>2. 压缩图片</h2><p>压缩图片可以借助 canvas, canvas 可以很方便地实现压缩，其原理是把一张图片画到一个小的画布，然后再把这个画布的内容导出 base64, 就能够拿到一张被压小的图片了。</p><p>在 <code>compress</code> 函数里面进行压缩</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设定图片最大压缩宽度为1500px</span><span class="token keyword">var</span> maxWidth <span class="token operator">=</span> <span class="token number">1500</span><span class="token punctuation">;</span><span class="token keyword">var</span> resultimg <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>$img<span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span> file<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用压缩</span></code></pre><p>在 compress 这个函数里首先创建一个 canvas 对象，然后计算这个画布的大小，</p><pre class=" language-js"><code class="language-js">compress<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> maxWidth<span class="token punctuation">,</span> mimeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 创建一个canvas对象</span>  <span class="token keyword">var</span> cvs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> width <span class="token operator">=</span> img<span class="token punctuation">.</span>naturalWidth<span class="token punctuation">,</span>    height <span class="token operator">=</span> img<span class="token punctuation">.</span>naturalHeight<span class="token punctuation">,</span>    imgRatio <span class="token operator">=</span> width <span class="token operator">/</span> height<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果图片维度超过了给定的maxWidth 1500,</span>  <span class="token comment" spellcheck="true">// 为了保持图片宽高比， 计算画布的大小</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">></span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    width <span class="token operator">=</span> maxWidth<span class="token punctuation">;</span>    height <span class="token operator">=</span> width <span class="token operator">/</span> imgRatio<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cvs<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  cvs<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下来把大的图片画到一个小的画布上</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>  img<span class="token punctuation">,</span>  O<span class="token punctuation">,</span>  O<span class="token punctuation">,</span>  img<span class="token punctuation">.</span>naturalWidth<span class="token punctuation">,</span>  img<span class="token punctuation">.</span>naturalHeight<span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  width<span class="token punctuation">,</span>  height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 图片质量进行适当压缩</span><span class="token keyword">var</span> quality <span class="token operator">=</span> width <span class="token operator">>=</span> <span class="token number">1500</span> <span class="token operator">?</span> <span class="token number">0.5</span> <span class="token punctuation">:</span> width <span class="token operator">></span> <span class="token number">600</span> <span class="token operator">?</span> <span class="token number">0.6</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出图片为base64</span><span class="token keyword">var</span> newImageData <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">,</span> quality<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> resultImg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resultImg<span class="token punctuation">.</span>src <span class="token operator">=</span> newImageData<span class="token punctuation">;</span><span class="token keyword">return</span> resultImg<span class="token punctuation">;</span></code></pre><p>最后一行返回了一个被压缩过的小图片。这里有个问题需要注意一下，有的浏览器在把 base64 赋值给 new 出来的 Image 的 src 时，是异步的操作，特别是 Safari, 所以要用监听 onload, 才能对此图片进行下一步的处理</p><pre class=" language-js"><code class="language-js">resultImg<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>    img<span class="token punctuation">,</span>    O<span class="token punctuation">,</span>    O<span class="token punctuation">,</span>    img<span class="token punctuation">.</span>naturalWidth<span class="token punctuation">,</span>    img<span class="token punctuation">.</span>naturalHeight<span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>    width<span class="token punctuation">,</span>    height  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>resultImg<span class="token punctuation">.</span>src <span class="token operator">=</span> newImageData<span class="token punctuation">;</span></code></pre><p>由于前面提到 ios 拍的照片需要旋转一下， 在压缩的时候可以一起处理。也就是说，如果需要旋转的话，那么画在 canvas 上面的时候就把它旋转好了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> destX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  destY <span class="token operator">=</span> O<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rotateDeg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>cvs<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> cvs<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>rotateDeg<span class="token punctuation">)</span><span class="token punctuation">;</span>  destX <span class="token operator">=</span> <span class="token operator">-</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  destY <span class="token operator">=</span> <span class="token operator">-</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">...</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>naturalWidth<span class="token punctuation">,</span> img<span class="token punctuation">.</span>naturalHeight<span class="token punctuation">,</span> destX<span class="token punctuation">,</span> destY<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要先把 canvas 的原点移到画布的中心，然后再进行旋转，默认原点是在左上角，原理和<code>transform</code>类似。</p><p>这样就解决了 ios 图片旋转的问题，得到一张旋转和压缩调节过的图片之后，再用它进行裁剪和编辑。</p><h2 id="3-裁剪图片"><a href="#3-裁剪图片" class="headerlink" title="3. 裁剪图片"></a>3. 裁剪图片</h2><p>裁剪图片，使用了一个 cropper 插件，这个插件还是挺强大的， 支待裁剪、旋转、翻转，但是它并没有对图片真正的处理，只是记录了用户做了哪些变换，然后你自己再去处理。</p><h3 id="3-1-简单裁剪"><a href="#3-1-简单裁剪" class="headerlink" title="3.1 简单裁剪"></a>3.1 简单裁剪</h3><p>假设用户没有进行旋转和翻转，只是简单地选了区域裁剪了一下，那就简单很多。</p><p>最简单的办法就是创建一个 canvas, 它的大小就是选框的大小， 然后根据起点 x、y 和宽高把图片相应的位置画到这个画布，再导出图片就可以了。</p><p>由于考虑到需要翻转， 所以用第二种方法：创建一个和图片一样大小的 canvas, 把图片原封不动地画上去， 然后把选中区域的数据 <code>imageData</code> 存起来， 重新设置画布的大小为选中框的大小， 再把 <code>imageData</code> 画上去，最后再导出就可以了，</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> cvs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> img <span class="token operator">=</span> $img<span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> width <span class="token operator">=</span> img<span class="token punctuation">.</span>naturalWidth<span class="token punctuation">,</span>  height <span class="token operator">=</span> img<span class="token punctuation">.</span>naturalHeight<span class="token punctuation">,</span>cvs<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>cvs<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> destX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    destY <span class="token operator">=</span> O<span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> destX<span class="token punctuation">,</span> destY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把选中框里的图片内容存起来</span><span class="token keyword">var</span> imageData <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span>cropOptions<span class="token punctuation">.</span>x<span class="token punctuation">,</span> cropOptions<span class="token punctuation">.</span>y<span class="token punctuation">,</span> cropOptions<span class="token punctuation">.</span>width<span class="token punctuation">,</span> cropoptions<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>cvs<span class="token punctuation">.</span>width <span class="token operator">=</span> cropOptions<span class="token punctuation">.</span>width<span class="token punctuation">;</span>cvs<span class="token punctuation">.</span>height <span class="token operator">=</span> cropOptions<span class="token punctuation">.</span>height<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 然后再画上去</span>ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-裁剪加翻转"><a href="#3-2-裁剪加翻转" class="headerlink" title="3.2 裁剪加翻转"></a>3.2 裁剪加翻转</h3><p>如果用户做了翻转， 只需要在 <code>drawlmage</code> 之前对画布做一下翻转变化</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>cropOptions<span class="token punctuation">.</span>scaleX <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> cropOptions<span class="token punctuation">.</span>scaleY <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 水平翻转</span>  destX <span class="token operator">=</span> cropOptions<span class="token punctuation">.</span>scaleX <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> width <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 垂直翻转</span>  destY <span class="token operator">=</span> cropOptions<span class="token punctuation">.</span>scaleY <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> height <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>cropOptions<span class="token punctuation">.</span>scaleX<span class="token punctuation">,</span> cropOptions<span class="token punctuation">.</span>scaleY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ctx<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> destX<span class="token punctuation">,</span> destY<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其他的都不用变，就可以实现上下左右翻转了，难点在于既要翻转又要旋转</p><h3 id="3-3-旋转加翻转剪裁"><a href="#3-3-旋转加翻转剪裁" class="headerlink" title="3.3 旋转加翻转剪裁"></a>3.3 旋转加翻转剪裁</h3><p>两种变化叠加没办法直接通过变化 canvas 的坐标一次性 <code>drawImage</code> 上去，有两种办法，第一种是用 <code>imageData</code> 进行数学变换，计算一遍得到 <code>imageData</code> 里面从第一行到最后一行每个像素新的 rgba 值是多少，然后再画上去。第二种是创建第二个 canvas，第一个 canvas 做翻转时把它画到第二个 canvas，第二个再进行旋转，我们用第二种办法</p><p>在第一个 canvas 画完之后，创建第二个 canvas 进行旋转。</p><pre class=" language-js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">drawlmage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> destX<span class="token punctuation">,</span> destY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rotate</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cropOptions<span class="token punctuation">.</span>rotate <span class="token operator">!==</span> O<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> newCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deg <span class="token operator">=</span> <span class="token punctuation">(</span>cropOptions<span class="token punctuation">.</span>rotate <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 旋转之后， 导致画布变大， 需要计算一下</span>  newCanvas<span class="token punctuation">.</span>width <span class="token operator">=</span>    Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>width <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>height <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newCanvas<span class="token punctuation">.</span>height <span class="token operator">=</span>    Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>width <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>height <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> newContext <span class="token operator">=</span> newCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newContext<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newContext<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>newCanvas<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> newCanvas<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newContext<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>destX <span class="token operator">=</span> <span class="token operator">-</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>destY <span class="token operator">=</span> <span class="token operator">-</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将第一个canvas的内容在经旋转后的坐标系画上来</span>  newContext<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>cvs<span class="token punctuation">,</span> destX<span class="token punctuation">,</span> destY<span class="token punctuation">)</span><span class="token punctuation">;</span>  newContext<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4-文件上传和上传进度"><a href="#4-文件上传和上传进度" class="headerlink" title="4. 文件上传和上传进度"></a>4. 文件上传和上传进度</h2><p>文件上传只能通过表单提交的形式，编码方式为 <code>multipart/form-data</code>, 可以通过写个 form 标签进行提交， 也可以用 AJAX 模拟表单提交的格式。</p><p>首先创建一个 AJAX 请求，并设置编码方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> upload_url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> boundary <span class="token operator">=</span> <span class="token string">'someboundary'</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">,</span>  <span class="token string">'multipart/form-data; boundary='</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后拼表单格式的数据进行上传</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 拼表单提交的数据形式</span><span class="token keyword">var</span> data <span class="token operator">=</span> img<span class="token punctuation">.</span>src<span class="token punctuation">;</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'data:'</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">';base64,'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">sendAsBinary</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//name=data</span>    <span class="token string">'--'</span> <span class="token operator">+</span> boundary<span class="token punctuation">,</span>    <span class="token string">'Content-Disposition: form-data; name="data"; filename="'</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'"'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type: '</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>type<span class="token punctuation">,</span>    <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token function">atob</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'--'</span> <span class="token operator">+</span> boundary<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// name=docName</span>    <span class="token string">'--'</span> <span class="token operator">+</span> boundary<span class="token punctuation">,</span>    <span class="token string">'Content-Disposition: form-data; name="docName"'</span><span class="token punctuation">,</span>    <span class="token string">''</span><span class="token punctuation">,</span>    file<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    <span class="token string">'--'</span> <span class="token operator">+</span> boundary <span class="token operator">+</span> <span class="token string">'--'</span>  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>atob</code> 将 base64 解码为二进制的格式， 符合表单提交的数据格式要求。</p><p>表单数据不同的字段是用 <code>boundary</code> 的随机字符串分隔的， 拼好之后用 <code>sendAsBinary</code> 发出去。 这个上传功能参考了一个 JIC 插件， 但是由于这个 API 已经废弃了， 所以新代码不推荐再使用这种方式。</p><p>在调这个函数之前先监听下它的事件</p><p><strong>1. 上传的进度</strong></p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">duringCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>loaded <span class="token operator">/</span> event<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这里调用 <code>duringCallback</code> 的回调函数， 给这个回调函数传了当前进度的参数， 用这个参数就可以设置进度条的过程了。 进度条可以自已实现， 或者直接上网找一个。</p><p><strong>2. 成功和失败</strong></p><p>需要对成功和失败做一些反馈处理，</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">errorCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>至此整个功能就拆解说明完了， 上面的代码可以兼容到 IE10, <code>FileReader</code> 的 API 到 IElO 才兼容，问题应该不大。这个东西一来减少了后端的压力， 二来不用和后端来回交互， 对用户体验来说还是比较好的， 除了上面说的有一个地方会被卡一下之外。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于前端是不能直接操作本地文件的， 要么通过 &lt;code&gt;&amp;lt;input type= &amp;quot;file&amp;quot;&amp;gt;&lt;/cod
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="HTML5" scheme="http://coder.liusixin.cn/tags/HTML5/"/>
    
      <category term="插件" scheme="http://coder.liusixin.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JTalk 第八期 前端安全大起底 总结</title>
    <link href="http://coder.liusixin.cn/posts/7189c795/"/>
    <id>http://coder.liusixin.cn/posts/7189c795/</id>
    <published>2018-06-05T05:43:00.000Z</published>
    <updated>2018-06-05T05:43:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JTalk《前端安全》活动结束啦，我收录了这次讲师所讲述的内容和部分同学提出的问题与讲师的答复，遗憾的是没有全部收录下来，只收录了部分内容，文章的内容并不完全代表讲师所讲述的全部内容，有部分是我回忆补充的，会有出入，希望这部分内容能帮到大家。</p></blockquote><h1 id="XSS-跨站脚本的攻击原理与防御-龙佳文"><a href="#XSS-跨站脚本的攻击原理与防御-龙佳文" class="headerlink" title="XSS 跨站脚本的攻击原理与防御 - 龙佳文"></a>XSS 跨站脚本的攻击原理与防御 - 龙佳文</h1><ul><li><p>什么是 XSS? (XSS 会有哪些危害, 窃取凭据,窃取会话令牌)<br><img src="http://cdn-blog.liusixin.cn/163cb0650796548f.png" alt=""></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cafd44b03bf61.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb021fc37f816.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>在输入框输入标签字符可以反射得到 cookie 值，并将这个 cookie 发送到指定的地址</p></li><li><p>v-html 可以将重要的数据以任何的形式弹出这个功能类似 innerHEML</p></li><li><p>XSS 产生的原因？（常见导致 XSS 的途径: 反射型，存储型，DOM based）</p></li><li><p>不使用 innerHEML 作为瀑布流展示</p></li><li><p>在地址中可以使用 标签的形式 得到或改变页面显示的形式</p></li><li><p>Chrome 会自带 XSS 防御，在注入标签的时候回被自动拦截,只能拦截主流的注入形式。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb089bf90e7c5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb09717394bc3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>如何防御 XSS？（慎用数据,避免使用 innerHTML 等等）</p></li><li><p>XSS 能实现的攻击有回话劫持，通过 cookie 将用户的信息发送到指定的地址</p></li><li><p>用过得到的 cookie 拿到 token 可以模仿用户的信息和行为进行常规的操作。</p></li><li><p>通过 JS 不断创建文件进行请求通过模仿某一服务器对指定服务器进行攻击。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb0a06277b97f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>对内容进行做转义，防止恶意的标签注入。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb0de342be316.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb0e916ba1543.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>内容白名单，对外部动态内容的安全过滤使用白名单，而不是黑名单通过白名单对指定的标签进行过滤选择。</li></ul><h2 id="问题收录"><a href="#问题收录" class="headerlink" title="问题收录"></a>问题收录</h2><ul><li>攻击次数的上报</li><li>通过 CSP 的规范通过内部的声明，通过其可以将内容进行上报。</li><li>CSP 会去要求进入到所有的内容以外的进行执行。 在页面执行非法的 JS CSP 都会对其执行拦截。</li><li>知道概念 并不深入 怎么检测项目的隐患</li><li>OWSP 有安全的规范和安全的审计软件可以使用</li><li>转义 只针对 HTML 进行转义 对于其他的转义 需要后台做配合处理</li><li>XSS 对于攻击的防御，有没有好用的工具或实时监测漏洞的工具</li><li>对业务流程使用安全审计软件进行审计，如果公司对这个比较重视可以花钱去审计， 安全是需要团队和老板一起进行开发和协作。第三方的数据不一定可靠， 需要团队进行互相协作。</li></ul><h1 id="浅谈流量劫持与防治-刘洋河"><a href="#浅谈流量劫持与防治-刘洋河" class="headerlink" title="浅谈流量劫持与防治 - 刘洋河"></a>浅谈流量劫持与防治 - 刘洋河</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb106596222f7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>典型的上网会经历哪些阶段</p></li><li><p>在急于将产品投入使用,导致软件开发的过程中出现很多的问题漏铜，而不知道攻击者的攻击方式，对于基础的内容只是一定要掌握。</p></li><li><p>流量劫持 并不是新生的话题,流量劫持一直纯在并没有彻底的消除。</p></li><li><p>理想的上网环境,打开浏览器就可以使用,当用户打开浏览器上网的时候是需要通过路由器的 IP 访问服务器网站 然后通过 CDN 进行对文件进行下载。</p></li><li><p>流量劫持是怎么发生的呢？</p></li><li><p>链路本身不安全</p></li><li><p>从设计上未考虑安全性。</p></li><li><p>随着计算力发展，安全链路变得不安全。</p></li><li><p>干扰安全链路，迫使链路使用若安全方案。</p></li><li><p>DNS 投毒与防治 流量劫持与防治</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb117791f7267.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb11f67c8579f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb126047b7c1a.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>DNS</p></li><li><p>基于一个 UDP 的协议，工作的时候效率较慢,缓存的时候是比较快的。</p></li><li><p>没有缓存的情况下需要查询很久。</p></li><li><p>公共域名访问顶级域 存在一个缓存时间 TTL 可以在指定的时限内 如果没有请求到数据会再次请求。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb15a476aa645.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb16b70a62002.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>污染 DNS</p></li><li><p>可以使用缓存对 DNS 进行攻击或污染</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb1a304068b9e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>HTTP</p></li><li><p>在网服务其对 DNS 加密，用户得到加密的我呢间下载后进行解密再使用，增加 DNS 的安全性。</p></li><li><p>抵抗 DNS 流量劫持</p></li><li><p>链路问题的排查</p></li><li><p>方案 A:在某些省份、地区⾃自建监测站，定期抓取固定资源</p></li><li><p>问题:资源太固定，监测站数量量也远远不不够</p></li><li><p>方案 B:业务⽅方在⾃自⼰己的 html 中监听资源的 error 事件</p></li><li><p>问题:⽆无法确认问题在于链路路，也可能只是普通的 js 出错</p></li><li><p>方案 C:使⽤用第三⽅方企业服务进⾏行行监控</p></li><li><p>问题:服务越多成本越⾼高</p></li><li><p>方案 D:CSP、SRI</p></li><li><p>问题:兼容性和灵活性差，⽆无法进⾏行行⾃自定义逻辑</p></li></ul><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><p>这部分的问答，我只记录了讲师的回复，因为近期加班时长耳鸣，没能听清楚问题，向大家致歉。</p><ul><li><p>浏览器在跑业务代码的时候， 没有空余的时间去做业务计算。 没有太多的资源去做,或者在 SDK 中嵌入，拿到文件的长度和首尾前 100 个字节进行判断，是否被篡改。</p></li><li><p>异步加载脚本，首先可以使用浏览器的加载机制去做， 另一个方案是不使用原有的方案进行加载。 使用自己定义的方案进行修改。</p></li></ul><h1 id="深入浅出-CSRF-吴空"><a href="#深入浅出-CSRF-吴空" class="headerlink" title="深入浅出 CSRF - 吴空"></a>深入浅出 CSRF - 吴空</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb34dfc313cf3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>CSRF 是什么? CSRF 可以做什么? CSRF 攻击现状</p></li><li><p>CSRF 攻击 可以伪造邮件 仿制用户的信息 盗取账号 购买商品 银行转账。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb4d458280fc6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb4dec0a1bcdc.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb4e74dff952f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>CSRF 攻击原理与防御 CSRF 漏铜检测</p></li><li><p>防御内容详见 PPT CSRF 常见防御。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb51f0968d4f1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb546e03c6e89.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb560c5166bb1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>CSRF Tester 漏洞检测</p></li><li><p>使⽤用代理理抓取我们在浏览器器中访问过的所有的连接以及所有的表单等信息，通过在 CSRFTester 中修改相应的表单等 信息，重新提交，相当于一次伪造客户端请求，如果修测试的请求成功被⽹网站服务器器接受，则说明存在 CSRF 漏漏洞洞，当然此款⼯工具也可以被⽤用来进⾏行行 CSRF 攻击。</p></li><li><p>CSRF Request Build 漏洞检测</p></li><li><p>在⿊黑客圈指：观点验证程序，运⾏行行这个程序得到预期结果，就验证了了这个观点。</p></li><li><p>前端与服务器端如何在代码层面防范 CSRF 攻击</p></li><li><p>在自动化构建过程接入漏洞检测工具在提交的时候就进行漏铜的检测。</p></li><li><p>线上接口扫描，线上提供一个入口， 通过漏洞扫描工具 进行线上的扫描和更新。</p></li></ul><h1 id="用户安全验证探索-潘俊"><a href="#用户安全验证探索-潘俊" class="headerlink" title="用户安全验证探索 - 潘俊"></a>用户安全验证探索 - 潘俊</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb58a84fa9cd0.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>安全验证在 Web 服务中的位置</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb5b73cf65d09.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>信息的分类与网站的性质有关系，最常见的一般分为隐私和非隐私两大类。结合产品自身的特性来选择信息如何呈现给用户</p></li><li><p>常规操作和敏感操作对于验证的需求并不相同。</p></li><li><p>Case:[新买的手机有了别人的数据]</p></li><li><p>Case:[新注册了一个账号，发现了不属于自己的东西]</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb5ea5e87a0d7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>验证的类型和优劣 强验证 弱验证(对于用户识别) 扩展的动态类型的验证</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb5ff4f0fe0c9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>密码正在演变，登录的方式多样性与多样化。</li><li>密码的安全性和重要性逐渐在降低。</li><li>短信快捷登录</li><li>短信登录的兴起</li><li>智能手机的普及和移动互联网的发展</li><li>手机资费结构变化和短信功能的转变</li><li>SIM 卡实名化让手机可以从当个人账号的角色</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb62561f0ad0e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb6189a6f7081.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>短信开发的一些常见的问题</li><li>防范短信轰炸</li><li>短信的有效期</li><li>服务商和费用</li><li>短信登录的利弊</li><li>简单快捷安全</li><li>手机号是可以回收的</li><li>如何从产品整体层面来规划和制定策略</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb60379a73824.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>如何减少验证次数</li><li>设备化，将浏览器器也设备化(通过⼀一个⻓长效 COOKIE 标识) 增加设备关联，历史数据来决定设备与账号关系 地域，IP，甚⾄至活跃时间段都可以当成辅助来判定当前用户是否可信。</li><li>该如何选择验证方式</li><li>密码登录</li><li>短信登录</li><li>动态令牌</li><li>扫码登录</li><li>其他</li><li>强依赖第三方登录</li><li>人脸识别，指纹识别等等</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb5f4c8e24131.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163cb60cd2ec6b92.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>该如何选择验证方式</li><li>纯微信开发</li><li>微信登录 手机短信 密码登录</li><li>手机 App 为主</li><li>手机短信 密码登录 人工申诉 微信登录 扫码登录</li><li>PC 浏览器位置</li><li>密码登录 手机短信 动态令牌</li><li>多端并重</li><li>手机短信 扫码登录 密码登录 微信登录 动态令牌</li><li>低交互信息类</li><li>密码登录 手机短信</li><li>工具类（重资产）</li><li>手机短信 动态令牌 人工申诉 微信登录 扫码登录 密码登录</li><li>工具类（重信息）</li><li>动态令牌 人工申诉 手机短信 密码登录</li></ul><p>先后顺序代表推荐顺序和开发的优先级</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>安全问题，不只是局限于 Web 前端凡是涉及网络的地方都会有攻击的存在，大厂有自己的安全团队，中小型公司就成了黑客的练手的存在，据朋友说有很多地方在培训黑客，会拿一些中小型公司练手，听到这个感觉充满了挑战，是对自己能力和快速查错及解决问题综合的考验。产品的完成不只是功能的完善，代码的可靠性，健壮性，安全性也是很重要的，任何微小的瑕疵都会成为攻击方的入口，我认为这也是一种对自己的提升与考验，只有经历风雨存活下来的才是有能力继续前行的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163caf73017a4cd5.jpeg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>本文转自<a href="https://juejin.im/post/5b1521b1f265da6e4a6bd24f" rel="external nofollow noopener noreferrer" target="_blank">掘金</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JTalk《前端安全》活动结束啦，我收录了这次讲师所讲述的内容和部分同学提出的问题与讲师的答复，遗憾的是没有全部收录下来，只收录了部分内容，文章的内容并不完全代表讲师所讲述的全部内容，有部分是我回忆补充的，会有出入，希望这部分内容能帮到大家。&lt;/p
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端安全" scheme="http://coder.liusixin.cn/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网站性能优化实战——从12.67s到1.06s的故事</title>
    <link href="http://coder.liusixin.cn/posts/92e76411/"/>
    <id>http://coder.liusixin.cn/posts/92e76411/</id>
    <published>2018-06-01T04:42:50.000Z</published>
    <updated>2018-06-01T04:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：腾讯课堂 NEXT 学位</p><p>文章摘自：<a href="https://juejin.im/post/5b0b7d74518825158e173a0c" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5b0b7d74518825158e173a0c</a></p></blockquote><h1 id="网站性能监测与优化策略"><a href="#网站性能监测与优化策略" class="headerlink" title="网站性能监测与优化策略"></a>网站性能监测与优化策略</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h2><p>作为互联网项目，最重要的便是用户体验。在举国“互联网+”的热潮中，用户至上也已经被大多数企业所接收，特别是在如今移动端快速发展的时代，我们的网页不仅只是呈现在用户的 PC 浏览器里，更多的时候，用户是通过移动产品浏览我们的网页。加之有越来越多的开发者投入到 Web APP 和 Hybrid APP 的开发队伍中，性能，又再一次成为了被程序员们重点关注的话题。我曾经看到过这样一句话：一个网站的体验，决定了用户是否愿意去了解网站的功能；而网站的功能，决定了用户是否会一票否决网站的体验。这是改版自网络上的一句流行语，但却把网站性能这件事说的十分透彻，特别是在网站这样的项目中，如果一个用户需要超过 5s 才能看见页面，他会毫不犹豫地关闭它。</p><p>性能优化，作为工程师界的“上乘武功”，是我们在开发中老生常谈的话题，也是一名开发者从入门向资深进阶的必经阶段，虽然我们看到过很多的标准、军规，但在真正实践中，却常常力不从心，不知道落下了什么，不知道性能是否还有进一步优化的空间。</p><p>对于网站的性能，在行业内有很多既定的指标，但就以我们 Front-Enders 而言，应该更加关注以下指标：白屏时间、首屏时间、整页时间、DNS 时间、CPU 占用率。而我之前自己搭建的一个网站（网址：<a href="https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fjerryonlyzrj.com%2Fresume%2F" rel="external nofollow noopener noreferrer" target="_blank">jerryonlyzrj.com/resume/</a> ，近日因域名备案无法打开，几日后即恢复正常），完全没做性能优化时，首屏时间是 12.67s，最后经过多方面优化，终于将其降低至 1.06s，并且还未配置 CDN 加速。其中过程我踩了很多坑，也翻了许多专业书籍，最后决定将这几日的努力整理成文，帮助前端爱好者们少走弯路。</p><p>今天，我们将从性能优化的三大方面工作逐步展开介绍，其中包括网络传输性能、页面渲染性能以及 JS 阻塞性能，系统性地带着读者们体验性能优化的实践流程。</p><h2 id="1-网络传输性能优化"><a href="#1-网络传输性能优化" class="headerlink" title="1.网络传输性能优化"></a>1.网络传输性能优化</h2><p>在开始介绍网络传输性能优化这项工作之前，我们需要了解浏览器处理用户请求的过程，那么就必须奉上这幅神图了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fdc524f3.jpeg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是 navigation timing 监测指标图，从图中我们可以看出，浏览器在得到用户请求之后，经历了下面这些阶段：重定向 → 拉取缓存 →DNS 查询 → 建立 TCP 链接 → 发起请求 → 接收响应 → 处理 HTML 元素 → 元素加载完成。不着急，我们将对其中的细节一步步展开讨论：</p><h3 id="1-1-浏览器缓存"><a href="#1-1-浏览器缓存" class="headerlink" title="1.1.浏览器缓存"></a>1.1.浏览器缓存</h3><p>我们都知道，浏览器在向服务器发起请求前，会先查询本地是否有相同的文件，如果有，就会直接拉取本地缓存，这和我们在后台部属的 Redis、Memcache 类似，都是起到了中间缓冲的作用，我们先看看浏览器处理缓存的策略：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fdd197b6.jpeg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>因为网上的图片太笼统了，而且我翻过很多讲缓存的文章，很少有将状态码还有什么时候将缓存存放在内存（memory）中什么时候将缓存在硬盘中（disk）系统地整理出来，所以我自己绘制了一张浏览器缓存机制流程图，结合这张图再更深入地说明浏览器的缓存机制。</p><p>这里我们可以使用 chrome devtools 里的 network 面板查看网络传输的相关信息：</p><p>（这里需要特别注意，在我们进行缓存调试时，需要去除 network 面板顶部的 <code>Disable cache</code> 勾选项，否则浏览器将始终不会从缓存中拉取数据）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fde62f77.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>浏览器默认的缓存是放在内存内的，但我们知道，内存里的缓存会因为进程的结束或者说浏览器的关闭而被清除，而存在硬盘里的缓存才能够被长期保留下去。很多时候，我们在 network 面板中各请求的 size 项里，会看到两种不同的状态：<code>from memory cache</code> 和 <code>from disk cache</code>，前者指缓存来自内存，后者指缓存来自硬盘。而控制缓存存放位置的，不是别人，就是我们在服务器上设置的 Etag 字段。在浏览器接收到服务器响应后，会检测响应头部（Header），如果有 Etag 字段，那么浏览器就会将本次缓存写入硬盘中。</p><p>之所以拉取缓存会出现 200、304 两种不同的状态码，取决于浏览器是否有向服务器发起验证请求。 只有向服务器发起验证请求并确认缓存未被更新，才会返回 304 状态码。</p><p>这里我以 nginx 为例，谈谈如何配置缓存:</p><p>首先，我们先进入 nginx 的配置文档</p><pre class=" language-shell"><code class="language-shell">$ vim /etc/nginx/conf.d/nginx.conf</code></pre><p>在配置文档内插入如下两项：</p><pre class=" language-shell"><code class="language-shell">etag on;   # 开启etag验证expires 7d;    # 设置缓存过期时间为7天</code></pre><p>打开我们的网站，在 chrome devtools 的 network 面板中观察我们的请求资源，如果在响应头部看见 Etag 和 Expires 字段，就说明我们的缓存配置成功了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fe069bbc.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>【！！！特别注意！！！】在我们配置缓存时一定要切记，浏览器在处理用户请求时，如果命中强缓存，浏览器会直接拉取本地缓存，不会与服务器发生任何通信，也就是说，如果我们在服务器端更新了文件，并不会被浏览器得知，就无法替换失效的缓存。所以我们在构建阶段，需要为我们的静态资源添加 md5 hash 后缀，避免资源更新而引起的前后端文件无法同步的问题。</p><h3 id="1-2-资源打包压缩"><a href="#1-2-资源打包压缩" class="headerlink" title="1.2.资源打包压缩"></a>1.2.资源打包压缩</h3><p>我们之前所作的浏览器缓存工作，只有在用户第二次访问我们的页面才能起到效果，如果要在用户首次打开页面就实现优良的性能，必须对资源进行优化。我们常将网络性能优化措施归结为三大方面：减少请求数、减小请求资源体积、提升网络传输速率。现在，让我们逐个击破：</p><p>结合前端工程化思想，我们在对上线文件进行自动化打包编译时，通常都需要打包工具的协助，这里我推荐 webpack，我通常都使用 Gulp 和 Grunt 来编译 node，Parcel 太新，而且 webpack 也一直在自身的特性上向 Parcel 靠拢。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fdb72897.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在对 webpack 进行上线配置时，我们要特别注意以下几点：</p><p><strong>①JS 压缩：</strong>（这点应该算是耳熟能详了，就不多介绍了）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>②HTML 压缩：</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/views/index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// new 一个这个插件的实例，并传入相关的参数</span>  filename<span class="token punctuation">:</span> <span class="token string">'../index.html'</span><span class="token punctuation">,</span>  minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>    removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    removeRedundantAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    useShortDoctype<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    keepClosingSlash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  chunksSortMode<span class="token punctuation">:</span> <span class="token string">'dependency'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们在使用 <code>html-webpack-plugin</code> 自动化注入 JS、CSS 打包 HTML 文件时，很少会为其添加配置项，这里我给出样例，大家直接复制就行。</p><p>PS：这里有一个技巧，在我们书写 HTML 元素的 src 或 href 属性时，可以省略协议部分，这样也能简单起到节省资源的目的。</p><p><strong>③ 提取公共资源：</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'vendor'</span><span class="token punctuation">,</span>  filename<span class="token punctuation">:</span> <span class="token string">'scripts/common/vendor-[hash:5].js'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>PS:这里是 webpack3 的语法，在 webpack4 中已作更改，希望大家注意</p></blockquote><p><strong>④ 提取 css 并压缩：</strong></p><p>在使用 webpack 的过程中，我们通常会以模块的形式引入 css 文件（webpack 的思想不就是万物皆模块嘛），但是在上线的时候，我们还需要将这些 css 提取出来，并且压缩，这些看似复杂的过程只需要简单的几行配置就行：</p><blockquote><p>我们需要用到 <code>extract-text-webpack-plugin</code> ，所以还得大家自行 <code>npm install</code></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">...</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        fallback<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            minimize<span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>⑤ 使用 webpack3 的新特性：ModuleConcatenationPlugin</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>如果你能按照上述五点将 webpack 上线配置完整配置出来，基本能将文件资源体积压缩到极致了，如有疏漏，还希望大家能加以补充。</p><p>给大家上一份我的 webpack 上线配置文档，欢迎参考：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.pro.js</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/public/scripts/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/build/static'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件存放的地方</span>    filename<span class="token punctuation">:</span> <span class="token string">'scripts/[name]-[hash:5].js'</span> <span class="token comment" spellcheck="true">// 打包后输出文件的文件名,带有md5 hash戳</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.jsx'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/(\.jsx|\.js)$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token operator">/</span>node_modules<span class="token operator">/</span> <span class="token comment" spellcheck="true">// 不进行编译的目录</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        fallback<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            minimize<span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/views/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'../index.html'</span><span class="token punctuation">,</span>      minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeRedundantAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        useShortDoctype<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        keepClosingSlash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      chunksSortMode<span class="token punctuation">:</span> <span class="token string">'dependency'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'styles/style-[hash:5].css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token string">'build/*'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      root<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span>      verbose<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      dry<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>      <span class="token keyword">from</span><span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/public/images'</span><span class="token punctuation">,</span>      to<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/build/static/images'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token keyword">from</span><span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/public/scripts/vector.js'</span><span class="token punctuation">,</span>      to<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/build/static/scripts/vector.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'vendor'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'scripts/common/vendor-[hash:5].js'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>最后，我们还应该在服务器上开启 Gzip 传输压缩，它能将我们的文本类文件体积压缩至原先的四分之一，效果立竿见影，还是切换到我们的 nginx 配置文档，添加如下两项配置项目：</p><pre class=" language-shell"><code class="language-shell">gzip on;gzip_types text/plain application/javascriptapplication/x-javascripttext/css application/xml text/javascriptapplication/x-httpd-php application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</code></pre><p>如果你在网站请求的响应头里看到这样的字段，那么就说明咱们的 Gzip 压缩配置成功啦：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fde01d06.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>【！！！特别注意！！！】不要对图片文件进行 Gzip 压缩！不要对图片文件进行 Gzip 压缩！不要对图片文件进行 Gzip 压缩！我只会告诉你效果适得其反，至于具体原因，还得考虑服务器压缩过程中的 CPU 占用还有压缩率等指标，对图片进行压缩不但会占用后台大量资源，压缩效果其实并不可观，可以说是“弊大于利”，所以请在 <code>gzip_types</code> 把图片的相关项去掉。针对图片的相关处理，我们接下来会更加具体地介绍。</p><h3 id="1-3-图片资源优化"><a href="#1-3-图片资源优化" class="headerlink" title="1.3.图片资源优化"></a>1.3.图片资源优化</h3><p>刚刚我们介绍了资源打包压缩，只是停留在了代码层面，而在我们实际开发中，真正占用了大量网络传输资源的，并不是这些文件，而是图片，如果你对图片进行了优化工作，你能立刻看见明显的效果。</p><h4 id="1-3-1-不要在-HTML-里缩放图像"><a href="#1-3-1-不要在-HTML-里缩放图像" class="headerlink" title="1.3.1.不要在 HTML 里缩放图像"></a>1.3.1.不要在 HTML 里缩放图像</h4><p>很多开发者可能会有这样的错觉（其实我曾经也是这样），比如我们会为了方便在一个 200✖200 的图片容器内直接使用一张 400✖400 的图片，我们甚至认为这样能让用户觉得图片更加清晰，其实不然，在普通的显示器上，用户并不会感到缩放后的大图更加清晰，但这一切却导致网页加速速度下降，同时照成带宽浪费，你可能不知道，一张 200KB 的图片和 2M 的图片的传输时间会是 200ms 和 12s 的差距（亲身经历，深受其害(┬＿┬)）。所以，当你需要用多大的图片时，就在服务器上准备好多大的图片，尽量固定图片尺寸。</p><h4 id="1-3-2-使用雪碧图（CSS-Sprite）"><a href="#1-3-2-使用雪碧图（CSS-Sprite）" class="headerlink" title="1.3.2.使用雪碧图（CSS Sprite）"></a>1.3.2.使用雪碧图（CSS Sprite）</h4><p>雪碧图的概念大家一定在开发中经常听见，其实雪碧图是减小请求数的示范性代表。而且很奇妙的是，多张图片拼在一块后，总体积会比之前所有图片的体积之和小（你可以亲自试试）。这里给大家推荐一个自动化生成雪碧图的工具：<a href="https://www.toptal.com/developers/css/sprite-generator" rel="external nofollow noopener noreferrer" target="_blank">www.toptal.com/developers/…</a> （图片来自官网首页）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fdf5e86b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>只要你添加相关资源文件，他就会自动帮你生成雪碧图以及对应的 CSS 样式，你要做的，只是 download 和 copy。</p><h2 id="1-3-3-使用字体图标（iconfont）"><a href="#1-3-3-使用字体图标（iconfont）" class="headerlink" title="1.3.3.使用字体图标（iconfont）"></a>1.3.3.使用字体图标（iconfont）</h2><p>不论是压缩后的图片，还是雪碧图，终归还是图片，只要是图片，就还是会占用大量网络传输资源。但是字体图标的出现，却让前端开发者看到了另外一个神奇的世界。</p><p>我最喜欢用的是阿里矢量图标库（网址：<a href="www.iconfont.cn/">www.iconfont.cn/</a> ） ，里面有大量的矢量图资源，而且你只需要像在淘宝采购一样把他们添加至购物车就能把它们带回家，整理完资源后还能自动生成 CDN 链接，可以说是完美的一条龙服务了。（图片来自官网首页）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fe96a2e5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>图片能做的很多事情，矢量图都能作，而且它只是往 HTML 里插入字符和 CSS 样式而已，和图片请求比起来，在网络传输资源的占用上它们完全不在一个数量级，如果你的项目里有大量的小图标，就用矢量图吧。</p><h4 id="1-3-4-使用-WebP"><a href="#1-3-4-使用-WebP" class="headerlink" title="1.3.4.使用 WebP"></a>1.3.4.使用 WebP</h4><p>WebP 格式，是谷歌公司开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间。Facebook、Ebay 等知名网站已经开始测试并使用 WebP 格式。</p><p>我们可以使用官网提供的 Linux 命令行工具对项目中的图片进行 WebP 编码，也可以使用我们的线上服务，这里我推荐叉拍云（网址：<a href="https://www.upyun.com/webp" rel="external nofollow noopener noreferrer" target="_blank">www.upyun.com/webp</a> ）。但是在实际的上线工作中，我们还是得编写 Shell 脚本使用命令行工具进行批量编码，不过测试阶段我们用线上服务就足够了，方便快捷。（图片来自叉拍云官网）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fee2951a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="1-4-网络传输性能检测工具——Page-Speed"><a href="#1-4-网络传输性能检测工具——Page-Speed" class="headerlink" title="1.4.网络传输性能检测工具——Page Speed"></a>1.4.网络传输性能检测工具——Page Speed</h3><p>除了 network 版块，其实 chrome 还为我们准备好了一款监测网络传输性能的插件——Page Speed，咱们的文章封面，就是用的 Page Speed 的官方宣传图（因为我觉得这张图再合适不过了）。我们只需要通过下面步骤安装，就可以在 chrome devtools 里找到它了：chrome 菜单 → 更多工具 → 拓展程序 →chrome 网上应用商店 → 搜索 pagespeed 后安转即可。</p><p>（PS：使用 chrome 应用商店需要翻墙，怎么翻墙我就不便多说了）</p><p>这就是 Page Speed 的功能界面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fed205f2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们只需要打开待测试的网页，然后点击 Page Speed 里的 Start analyzing 按钮，它就会自动帮我们测试网络传输性能了，这是我的网站测试结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01fefa618a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Page Speed 最人性化的地方，便是它会对测试网站的性能瓶颈提出完整的建议，我们可以根据它的提示进行优化工作。这里我的网站已经优化到最好指标了(•́⌄•́๑)૭✧，Page Speed Score 表示你的性能测试得分，100/100 表示已经没有需要优化的地方。</p><p>优化完毕后再使用 chorme devtools 的 network 版块测量一下我们网页的白屏时间还有首屏时间，是不是得到了很大的提升？</p><h3 id="1-5-使用-CDN"><a href="#1-5-使用-CDN" class="headerlink" title="1.5.使用 CDN"></a>1.5.使用 CDN</h3><p>Last but not least，</p><p>再好的性能优化实例，也必须在 CDN 的支撑下才能到达极致。</p><p>如果我们在 Linux 下使用命令 <code>$ traceroute targetIp</code> 或者在 Windows 下使用批处理 <code>&gt; tracert targetIp</code>，都可以定位用户与目标计算机之间经过的所有路由器，不言而喻，用户和服务器之间距离越远，经过的路由器越多，延迟也就越高。使用 CDN 的目的之一便是解决这一问题，当然不仅仅如此，CDN 还可以分担 IDC 压力。</p><p>当然，凭着我们单个人的资金实力（除非你是王思聪）是必定搭建不起来 CDN 的，不过我们可以使用各大企业提供的服务，诸如腾讯云等，配置也十分简单，这里就请大家自行去推敲啦。</p><p>其实我们的 CDN 域名一般是和我们的网站主域名不同的，大家可以看看淘宝、腾讯的官方网站，看看他们存放静态资源的 CDN 域名，都是和主域名不一样的。为什么要这么做？主要有两个原因：[内容摘选自：<a href="https://bbs.aliyun.com/simple/t116453.html" rel="external nofollow noopener noreferrer" target="_blank">bbs.aliyun.com/simple/t116…</a> ]</p><ul><li><p>便于 CDN 业务独立，能够独立配置缓存。</p><ul><li>为了降低 web 压力，CDN 系统会遵循 Cache-Control 和 Expires HTTP 头标准对改请求返回的内容进行缓存，便于后面的请求不在回源，起到加速功能。而传统 CDN（Web 与 CDN 共用域名）的方式，需要对不同类型的文件设置相应的 Cache 规则或者遵循后端的 HTTP 头，但这样难以发挥 CDN 的最大优势，因为动态请求回源的概率非常之大，如果访客与源站的线路并不慢，通过 CDN 的请求未必快于直接请求源站的。 大型网站为了提升 web 性能到极致，通常缓存头设置比较大，像谷歌 JS 设置一年缓存，百度首页 logo 设置十年缓存，如果将静态元素抽取出来，就可以很方便的对所有静态元素部署规则，而不用考虑动态请求。减少规则的条数可以提升 CDN 的效率。</li></ul></li><li><p>抛开无用 cookie，减小带宽占用。</p><ul><li>我们都知道 HTTP 协议每次发送请求都会自动带上该域名及父级域名下的 cookie，但对于 CSS，JS 还有图片资源，这些 cookie 是没用的，反而会浪费访客带宽和服务器入带宽。而我们的主站，为了保持会话或者做其他缓存，都会存放着大量的 cookie，所以如果将 CDN 与主站域名分离，就能解决这一问题。</li><li>不过这样一来，新的问题就出现了：CDN 域名与主站域名不同，DNS 解析 CDN 域名还需要花费额外的时间，增加网络延迟。不过这难不住我们伟大的程序员前辈，DNS Prefetch 闪亮登场。</li></ul></li></ul><p>如果大家翻看大型网站的 HTML 源代码，都会在头部发现这样的 link 链接：（这里以淘宝首页为例）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01ff02c0c5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这就是 DNS Prefetch。DNS Prefetch 是一种 DNS 预解析技术，当我们浏览网页时，浏览器会在加载网页时对网页中的域名进行预解析并缓存，这样在浏览器加载网页中的链接时，就无需进行 DNS 解析，减少用户的等待时间，提高用户体验。DNS Prefetch 现已被主流浏览器支持，大多数浏览器针对 DNS 解析都进行了优化，典型的一次 DNS 解析会耗费 20~120ms，减少 DNS 解析时间和次数是个很好的优化措施。这里附上一张 Can I use it 官网上的 DNS Prefetch 支持情况图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01ff09ef40.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所以，放心大胆地去使用它吧。</p><h2 id="2-页面渲染性能优化"><a href="#2-页面渲染性能优化" class="headerlink" title="2.页面渲染性能优化"></a>2.页面渲染性能优化</h2><h3 id="2-1-浏览器渲染过程（Webkit）"><a href="#2-1-浏览器渲染过程（Webkit）" class="headerlink" title="2.1.浏览器渲染过程（Webkit）"></a>2.1.浏览器渲染过程（Webkit）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d01ff8efb71.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其实大家应该对浏览器的 HTML 渲染机制比较熟悉了，基本流程同上图所述，大家在入门的时候，你的导师或者前辈可能会告诉你，在渲染方面我们要减少重排和重绘，因为他们会影响浏览器性能。不过你一定不知道其中原理是什么，对吧。今天我们就结合《Webkit 技术内幕》（这本书我还是很推荐大家买来看看，好歹作为一名前端工程师，你得知道我们天天接触的浏览器内核是怎样工作的）的相关知识，给大家普及普及那些深层次的概念。</p><p>PS：这里提到了 Webkit 内核，我顺带提一下浏览器内部的渲染引擎、解释器等组件的关系，因为经常有师弟或者一些前端爱好者向我问这方面的知识，分不清他们的关系，我就拿一张图来说明：（这部分内容与本文无关，如果你对此不感兴趣，可以直接跳过）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d02159fe9a1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>浏览器的解释器，是包括在渲染引擎内的，我们常说的 Chrome（现在使用的是 Blink 引擎）和 Safari 使用的 Webkit 引擎，Firefox 使用的 Gecko 引擎，指的就是渲染引擎。而在渲染引擎内，还包括着我们的 HTML 解释器（渲染时用于构造 DOM 树）、CSS 解释器（渲染时用于合成 CSS 规则）还有我们的 JS 解释器。不过后来，由于 JS 的使用越来越重要，工作越来越繁杂，所以 JS 解释器也渐渐独立出来，成为了单独的 JS 引擎，就像众所周知的 V8 引擎，我们经常接触的 Node.js 也是用的它。</p><h3 id="2-2-DOM-渲染层与-GPU-硬件加速"><a href="#2-2-DOM-渲染层与-GPU-硬件加速" class="headerlink" title="2.2.DOM 渲染层与 GPU 硬件加速"></a>2.2.DOM 渲染层与 GPU 硬件加速</h3><p>如果我告诉你，一个页面是由许多许多层级组成的，他们就像千层面那样，你能想象出这个页面实际的样子吗？这里为了便于大家想象，我附上一张之前 Firefox 提供的 3D View 插件的页面 Layers 层级图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d0216d4c88b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>对，你没看错，页面的真实样子就是这样，是由多个 DOM 元素渲染层（Layers）组成的，实际上一个页面在构建完 Render Tree 之后，是经历了这样的流程才最终呈现在我们面前的：</p><ol><li><p>浏览器会先获取 DOM 树并依据样式将其分割成多个独立的渲染层</p></li><li><p>CPU 将每个层绘制进绘图中</p></li><li><p>将位图作为纹理上传至 GPU（显卡）绘制</p></li><li><p>GPU 将所有的渲染层缓存（如果下次上传的渲染层没有发生变化，GPU 就不需要对其进行重绘）并复合多个渲染层最终形成我们的图像</p></li></ol><p>从上面的步骤我们可以知道，布局是由 CPU 处理的，而绘制则是由 GPU 完成的。</p><p>其实在 chrome 中，也为我们提供了相关插件供我们查看页面渲染层的分布情况以及 GPU 的占用率：（所以说，平时我们得多去尝试尝试 chrome 的那些莫名其妙的插件，真的会发现好多东西都是神器）</p><p>chrome 开发者工具菜单 →more tools→Layers（<strong>开启渲染层功能模块</strong>）</p><p>chrome 开发者工具菜单 →more tools→rendering（<strong>开启渲染性能监测工具</strong>）</p><p>执行上面的操作后，你会在浏览器里看到这样的效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d0218b8bd8e.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>太多东西了，分模块讲吧：</p><ol><li><p>最先是页面右上方的小黑窗：其实提示已经说的很清楚了，它显示的就是我们的 GPU 占用率，能够让我们清楚地知道页面是否发生了大量的重绘。</p></li><li><p>Layers 版块：这就是用于显示我们刚提到的 DOM 渲染层的工具了，左侧的列表里将会列出页面里存在哪些渲染层，还有这些渲染层的详细信息。</p></li><li><p>Rendering 版块：这个版块和我们的控制台在同一个地方，大家可别找不到它。前三个勾选项是我们最常使用的，让我来给大家解释一下他们的功能（充当一次免费翻译）</p></li></ol><p>①Paint flashing：勾选之后会对页面中发生重绘的元素高亮显示</p><p>②Layer borders：和我们的 Layer 版块功能类似，它会用高亮边界突出我们页面中的各个渲染层</p><p>③FPS meter：就是开启我们在（一）中提到的小黑窗，用于观察我们的 GPU 占用率</p><p>可能大家会问我，提到 DOM 渲染层这么深的概念有什么用啊，好像跟性能优化没一点关系啊？大家应该还记得我刚说到 GPU 会对我们的渲染层作缓存对吧，那么大家试想一下，如果我们把那些一直发生大量重排重绘的元素提取出来，单独触发一个渲染层，那样这个元素不就不会“连累”其他元素一块重绘了对吧。</p><p>那么问题来了，什么情况下会触发渲染层呢？大家只要记住：</p><p>Video 元素、WebGL、Canvas、CSS3 3D、CSS 滤镜、z-index 大于某个相邻节点的元素都会触发新的 Layer，其实我们最常用的方法，就是给某个元素加上下面的样式：</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></code></pre><p>这样就可以触发渲染层啦。</p><p>我们把容易触发重排重绘的元素单独触发渲染层，让它与那些“静态”元素隔离，让 GPU 分担更多的渲染工作，我们通常把这样的措施成为硬件加速，或者是 GPU 加速。大家之前肯定听过这个说法，现在完全清楚它的原理了吧。</p><h3 id="2-3-重排与重绘"><a href="#2-3-重排与重绘" class="headerlink" title="2.3 重排与重绘"></a>2.3 重排与重绘</h3><p>现在到我们的重头戏了，重排和重绘。先抛出概念：</p><ol><li><p>重排（reflow）：渲染层内的元素布局发生修改，都会导致页面重新排列，比如窗口的尺寸发生变化、删除或添加 DOM 元素，修改了影响元素盒子大小的 CSS 属性（诸如：width、height、padding）。</p></li><li><p>重绘（repaint）：绘制，即渲染上色，所有对元素的视觉表现属性的修改，都会引发重绘。</p></li></ol><p>我们习惯使用 chrome devtools 中的 performance 版块来测量页面重排重绘所占据的时间：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d021daae81d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>① 蓝色部分：HTML 解析和网络通信占用的时间</p><p>② 黄色部分：JavaScript 语句执行所占用时间</p><p>③ 紫色部分：重排占用时间</p><p>④ 绿色部分：重绘占用时间</p><p>不论是重排还是重绘，都会阻塞浏览器。要提高网页性能，就要降低重排和重绘的频率和成本，近可能少地触发重新渲染。正如我们在 2.3 中提到的，重排是由 CPU 处理的，而重绘是由 GPU 处理的，CPU 的处理效率远不及 GPU，并且重排一定会引发重绘，而重绘不一定会引发重排。所以在性能优化工作中，我们更应当着重减少重排的发生。</p><p>这里给大家推荐一个网站，里面详细列出了哪些 CSS 属性在不同的渲染引擎中是否会触发重排或重绘：</p><p><a href="https://csstriggers.com" rel="external nofollow noopener noreferrer" target="_blank">csstriggers.com/</a> （图片来自官网）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d0222022935.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="2-4-优化策略"><a href="#2-4-优化策略" class="headerlink" title="2.4.优化策略"></a>2.4.优化策略</h3><p>谈了那么多理论，最实际不过的，就是解决方案，大家一定都等着急了吧，做好准备，一大波干货来袭：</p><ol><li><p>CSS 属性读写分离：浏览器每次对元素样式进行读操作时，都必须进行一次重新渲染（重排 + 重绘），所以我们在使用 JS 对元素样式进行读写操作时，最好将两者分离开，先读后写，避免出现两者交叉使用的情况。最最最客观的解决方案，就是不用 JS 去操作元素样式，这也是我最推荐的。</p></li><li><p>通过切换 class 或者使用元素的 style.csstext 属性去批量操作元素样式。</p></li><li><p>DOM 元素离线更新：当对 DOM 进行相关操作时，例、appendChild 等都可以使用 Document Fragment 对象进行离线操作，带元素“组装”完成后再一次插入页面，或者使用 <code>display:none</code> 对元素隐藏，在元素“消失”后进行相关操作。</p></li><li><p>将没用的元素设为不可见：<code>visibility: hidden</code>，这样可以减小重绘的压力，必要的时候再将元素显示。</p></li><li><p>压缩 DOM 的深度，一个渲染层内不要有过深的子元素，少用 DOM 完成页面样式，多使用伪元素或者 box-shadow 取代。</p></li><li><p>图片在渲染前指定大小：因为 img 元素是内联元素，所以在加载图片后会改变宽高，严重的情况会导致整个页面重排，所以最好在渲染前就指定其大小，或者让其脱离文档流。</p></li><li><p>对页面中可能发生大量重排重绘的元素单独触发渲染层，使用 GPU 分担 CPU 压力。（这项策略需要慎用，得着重考量以牺牲 GPU 占用率为代价能否换来可期的性能优化，毕竟页面中存在太多的渲染层对于 GPU 而言也是一种不必要的压力，通常情况下，我们会对动画元素采取硬件加速。</p></li></ol><h2 id="3-JS-阻塞性能"><a href="#3-JS-阻塞性能" class="headerlink" title="3.JS 阻塞性能"></a>3.JS 阻塞性能</h2><p>JavaScript 在网站开发中几乎已经确定了垄断地位，哪怕是一个再简单不过的静态页面，你都可能看到 JS 的存在，可以说，没有 JS，网站就基本告别用户交互了。然而，脚本带来的问题就是他会阻塞页面的平行下载，还会提高进程的 CPU 占用率。更有甚者，现在 node.js 已经在前端开发中普及，稍有不慎，我们引发了内存泄漏，或者在代码中误写了死循环，会直接造成我们的服务器崩溃。在如今这个 JS 已经遍布前后端的时代，性能的瓶颈不单单只是停留在影响用户体验上，还会有更多更为严重的问题，对 JS 的性能优化工作不可小觑。</p><p>在编程的过程中，如果我们使用了闭包后未将相关资源加以释放，或者引用了外链后未将其置空（比如给某 DOM 元素绑定了事件回调，后来却 remove 了该元素），都会造成内存泄漏的情况发生，进而大量占用用户的 CPU，造成卡顿或死机。我们可以使用 chrome 提供的 JavaScript Profile 版块，开启方式同 Layers 等版块，这里我就不再多说了，直接上效果图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d022999314a.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以清楚看见 JS 执行时各函数的执行时间以及 CPU 占用情况，如果我在代码里增加一行 <code>while(true){}</code>, 那么它的占用率一定会飙升到一个异常的指标（亲测 93.26%）。</p><p>其实浏览器强大的内存回收机制在大多数时候避免了这一情况的发生，即便用户发生了死机，他只要结束相关进程（或关闭浏览器）就可以解决这一问题，但我们要知道，同样的情况还会发生在我们的服务器端，也就是我们的 node 中，严重的情况，会直接造成我们的服务器宕机，网站崩溃。所以更多时候，我们都使用 JavaScript Profile 版块来对我们的 node 服务进行压力测试，搭配 <code>node-inspector</code> 插件，我们能更有效地检测 JS 执行时各函数的 CPU 占用率，针对性地进行优化。</p><blockquote><p>PS：所以没修炼到一定水平，千万别在服务端使用闭包，一个是真没啥用，我们会有更多优良的解决办法，二是真的很容易内存泄漏，造成的后果是你无法预期的</p></blockquote><h2 id="4-【拓展】负载均衡"><a href="#4-【拓展】负载均衡" class="headerlink" title="4.【拓展】负载均衡"></a>4.【拓展】负载均衡</h2><p>之所以将负载均衡作为拓展内容，是因为如果是你自己搭建的个人网站，或者中小型网站，其实并不需要考虑多大的并发量，但是如果你搭建的是大型网站，负载均衡便是开发过程不可或缺的步骤。</p><h3 id="4-1-Node-js-处理-IO-密集型请求"><a href="#4-1-Node-js-处理-IO-密集型请求" class="headerlink" title="4.1.Node.js 处理 IO 密集型请求"></a>4.1.Node.js 处理 IO 密集型请求</h3><p>现在的开发流程都注重前后端分离，也就是软件工程中常提到的“高内聚低耦合”的思想，你也可以用模块化的思想去理解，前后解耦就相当与把一个项目分成了前端和后端两个大模块，中间通过接口联系起来，分别进行开发。这样做有什么好处？我就举最有实际效果的一点：“异步编程”。这是我自己想的名字，因为我觉得前后解耦的形式很像我们 JS 中的异步队列，传统的开发模式是“同步”的，前端需要等后端封装好接口，知道了能拿什么数据，再去开发，时间短，工程大。而解耦之后，我们只需要提前约定好接口，前后两端就可以同时开发，不仅高效而且省时。</p><p>我们都知道 node 的核心是事件驱动，通过 Event Loop 去异步处理用户请求，相比于传统的后端服务，它们都是将用户的每个请求分配一个进程进行处理，推荐大家去看这样一篇博文：<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513044&amp;idx=1&amp;sn=9b8526e9d641b970ee5ddac02dae3c57&amp;scene=21#wechat_redirect" rel="external nofollow noopener noreferrer" target="_blank">mp.weixin.qq.com/s?__biz=MzA…</a> 。特别生动地讲解了事件驱动的运行机制，通俗易懂。事件驱动的最大优势是什么？就是在高并发 IO 时，不会造成堵塞，对于直播类网站，这点是至关重要的，我们有成功的先例——快手，快手强大的 IO 高并发究其本质一定能追溯到 node。</p><p>其实现在的企业级网站，都会搭建一层 node 作为中间层。大概的网站框架如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d022bc55d45.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="4-2-pm2-实现-Node-js“多进程”"><a href="#4-2-pm2-实现-Node-js“多进程”" class="headerlink" title="4.2.pm2 实现 Node.js“多进程”"></a>4.2.pm2 实现 Node.js“多进程”</h3><p>我们都知道 node 的优劣，这里分享一份链接，找了挺久写的还算详细：<a href="https://www.zhihu.com/question/19653241/answer/15993549" rel="external nofollow noopener noreferrer" target="_blank">www.zhihu.com/question/19…</a> 。其实很多都是老套路，那些说 node 不行的都是指着 node 是单进程这一个软肋开撕，告诉你，我们有解决方案了——pm2。这是它的官网：<a href="http://pm2.keymetrics.io" rel="external nofollow noopener noreferrer" target="_blank">pm2.keymetrics.io/</a> 。它是一款 node.js 进程管理器，具体的功能，就是能在你的计算机里的每一个内核都启动一个 node.js 服务，也就是说如果你的电脑或者服务器是多核处理器（现在也少见单核了吧），它就能启动多个 node.js 服务，并且它能够自动控制负载均衡，会自动将用户的请求分发至压力小的服务进程上处理。听起来这东西简直就是神器啊！而且它的功能远远不止这些，这里我就不作过多介绍了，大家知道我们在上线的时候需要用到它就行了，安装的方法也很简单，直接用 npm 下到全局就可以了 <code>$ npm i pm2 -g</code> 具体的使用方法还有相关特性可以参照官网。</p><p>下面是 pm2 启动后的效果图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d0231a2dec5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="4-3-nginx-搭建反向代理"><a href="#4-3-nginx-搭建反向代理" class="headerlink" title="4.3.nginx 搭建反向代理"></a>4.3.nginx 搭建反向代理</h3><p>在开始搭建工作之前，首先得知道什么是反向代理。可能大家对这个名词比较陌生，先上一张图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/163a4d0229e73075.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所谓代理就是我们通常所说的中介，网站的反向代理就是指那台介于用户和我们真实服务器之间的服务器（说的我都拗口了），它的作用便是能够将用户的请求分配到压力较小的服务器上，其机制是轮询。听完这句话是不是感觉很耳熟，没错，在我介绍 pm2 的时候也说过同样的话，反向代理起到的作用同 pm2 一样也是实现负载均衡，你现在应该也明白了两者之间的差异，反向代理是对服务器实现负载均衡，而 pm2 是对进程实现负载均衡。大家如果想深入了解反向代理的相关知识，我推荐知乎的一个贴子：<a href="https://www.zhihu.com/question/24723688" rel="external nofollow noopener noreferrer" target="_blank">www.zhihu.com/question/24…</a> 。但是大家会想到，配服务器是运维的事情啊，和我们前端有什么关系呢？的确，在这部分，我们的工作只有一些，只需要向运维提供一份配置文档即可。</p><pre class=" language-shell"><code class="language-shell">http {    upstream video {        ip_hash;        server localhost:3000;    }    server {        listen: 8080;        location / {            proxy_pass: http://video        }    }}</code></pre><p>也就是说，在和运维对接的时候，我们只需要将上面这几行代码改为我们配置好的文档发送给他就行了，其他的事情，运维小哥会明白的，不用多说，都在酒里。</p><p>但是，这几行代码该怎么去改呢？首先我们得知道，在 nginx 中，模块被分为三大类：handler、filter 和 upstream。而其中的 upstream 模块，负责完成完成网络数据的接收、处理和转发，也是我们需要在反向代理中用到的模块。接下来我们将介绍配置代码里的内容所表示的含义：</p><h4 id="4-3-1-upstream-配置信息"><a href="#4-3-1-upstream-配置信息" class="headerlink" title="4.3.1.upstream 配置信息"></a>4.3.1.upstream 配置信息</h4><p>upstream 关键字后紧跟的标识符是我们自定义的项目名称，通过一对花括号在其中增添我们的配置信息。</p><ul><li><p><code>ip_hash</code> 关键字：控制用户再次访问时是否连接到前一次连接的服务器</p></li><li><p><code>server</code> 关键字：我们真实服务器的地址，这里的内容肯定是需要我们去填写的，不然运维怎么知道你把项目放在那个服务器上了，也不知道你封装了一层 node 而得去监听 3000 端口。</p></li></ul><h4 id="4-3-2-server-配置信息"><a href="#4-3-2-server-配置信息" class="headerlink" title="4.3.2.server 配置信息"></a>4.3.2.server 配置信息</h4><p>server 是 nginx 的基本配置，我们需要通过 server 将我们定义的 upstream 应用到服务器上。</p><ul><li><p><code>listen</code> 关键字：服务器监听的端口</p></li><li><p><code>location</code> 关键字：和我们之前在 node 层说到的路由是起同样的功能，这里是把用户的请求分配到对应的 upstream 上</p></li></ul><h2 id="5-拓展阅读"><a href="#5-拓展阅读" class="headerlink" title="5.拓展阅读"></a>5.拓展阅读</h2><p>网站的性能与监测是一项复杂的工程，还有很多很多后续的工作，我之前所提到的这些，也只能算是冰山一角，在熟悉开发规范的同时，也需要实践经验的积累。</p><p>在翻阅了许多与网站性能相关的书籍后，我还是更钟情于唐文前辈编著的《大型网站性能监测、分析与优化》，里面的知识较新，切合实际，至少我读完一遍后很有收获、醍醐灌顶，我也希望对性能感兴趣的读者在看完我的文章后能去翻翻这本著作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者：腾讯课堂 NEXT 学位&lt;/p&gt;
&lt;p&gt;文章摘自：&lt;a href=&quot;https://juejin.im/post/5b0b7d74518825158e173a0c&quot; rel=&quot;external nofollow noopener norefe
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 相关知识了解一下</title>
    <link href="http://coder.liusixin.cn/posts/a4336408/"/>
    <id>http://coder.liusixin.cn/posts/a4336408/</id>
    <published>2018-05-26T04:13:04.000Z</published>
    <updated>2018-05-29T12:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多前端开发的同学  不是特别了解 http 相关的知识，本文我们就深入去了解下 http 协议原理和实践相关的内容。</p><p>首先了解下<strong>浏览器输入 url 后 http 请求返回的过程是什么</strong>，看下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-002640-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>(一) 首先一开始要做 == redirect == 重定向，那么为什么要 redirect 呢，因为浏览器可能记录了你这个地址已经永久跳转成一个新的地址，所以一开始浏览器需要判断需不需要 redirect 以及 redirect 到哪里。</p><p>(二) 看缓存，请求的资源可能已经缓存过，在 == App cache == 里看是否有缓存，如果没有缓存，就会去服务器请求资源。</p><p>(三) 输入域名，域名会对应 ip 之后才能真正访问到服务器，所以这时候会先去查找域名对应的 IP 地址， 这就叫 == DNS 解析 ==</p><p>(四) 有了 IP 之后，就会创建 == tcp 连接 ==，该过程要经过 tcp 的 == 三次握手 == 之后才能真正创建连接。同时如果这个请求是 https 的，就会创建 https 的链接，这跟 tcp 的三次握手不一样，中间会有一个保证安全的数据传输的过程。</p><p>(五) 连接创建好之后，才会真正发起 http 请求的数据包，数据包发送完成之后，服务器接收到这个数据并进行处理之后会  返回这个请求响应的内容数据，返回数据之后这个 http 请求才真正完成</p><h2 id="1-网络协议分层"><a href="#1-网络协议分层" class="headerlink" title="1. 网络协议分层"></a>1. 网络协议分层</h2><p>我们先来看下经典五层模型图例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-144132-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个五层模型中，分为应用层、传输层、网络层、数据链路层、物理层，每一个服务器上都会有这样的层级关系存在来维护整个网络数据传输的过程。</p><p>本文主要内容是 http 相关内容，所以主要是在应用层展开。http 协议基于传输层里的 TCP/IP 协议，该协议会涉及到一些 http 请求的性能，以及请求过程的消耗， 会面也会有一些 TCP/IP 协议的介绍。</p><p><strong>低三层：</strong></p><ul><li>物理层(硬件) - 主要作用是定义物理设备如何传输数据</li><li>数据链路层 - 在通信的实体间建立数据链路连接</li><li>网络层 - 为数据在结点之间传输创建逻辑链路</li></ul><h3 id="1-1-传输层"><a href="#1-1-传输层" class="headerlink" title="1.1 传输层"></a>1.1 传输层</h3><p>传输层主要有两个协议，一个是 TCP/IP，一个是 UDP。更多情况下都使用的是 TCP/IP 协议，因为它更可靠的传输数据。</p><p><strong>向用户提供可靠的端到端(e2e)服务</strong></p><p>个人电脑到网络服务器建立连接之后，如果传输数据很大，一次性无法完成传输，就需要分片传输，传输成功之后再重新组装。两端传输数据的方式都是在这一层定义</p><p><strong>传输层向高层屏蔽了下层数据通信的细节</strong></p><p>http 协议要传输数据只需在浏览器输入 url，输入 url 这个过程还涉及到一系列数据的拼装及传输，比如分包传输具体是怎么实现，服务器怎么接收，ajax 请求，整个过程传输层已经做好了封装，这个过程用户不需要知道。</p><h3 id="1-2-应用层"><a href="#1-2-应用层" class="headerlink" title="1.2 应用层"></a>1.2 应用层</h3><p>http 协议所在层</p><ul><li>为应用软件提供了很多服务</li><li>构建于 TCP 协议之上</li><li>屏蔽网络传输相关细节</li></ul><h2 id="2-http-协议发展历史"><a href="#2-http-协议发展历史" class="headerlink" title="2. http 协议发展历史"></a>2. http 协议发展历史</h2><ul><li>HTTP/0.9<ul><li>只有一个命令 GET</li><li>没有 HEADER 等描述数据的信息</li><li>服务器发送完毕，就关闭 TCP 连接</li></ul></li><li>HTTP/1.0<ul><li>增加了很多命令</li><li>增加 status code 和 header</li><li>多字符集支持、多部分发送、权限、缓存等</li></ul></li><li>HTTP/1.1<ul><li>持久连接</li><li>pipeline</li><li>增加 host 和其它一些命令</li></ul></li><li>HTTP2<ul><li>所有数据以二进制传输</li><li>同一个连接里面发送多个请求不再需要按照顺序来</li><li>头信息压缩以及推送等提高效率的功能</li></ul></li></ul><p><strong>头信息压缩及推送</strong></p><p>http2 解决了 http 里整体性能低下的问题，在 http1.1 里，每次发送请求和返回请求，它的 http 头都会进行一个完整传输， 并且很多字段都是以字符串形式保存，占用大量带宽。http2 里会将头信息进行压缩传输。</p><p>推送是什么概念呢？在 http1.1 里，客户端发起请求然后服务端响应请求返回内容，客户端永远是主动方，服务端永远是被动方。在 http2 里，服务端是可以主动发起数据传输的。比如：一个 html 页面中引入了 css 和 js，浏览器首先要对 html 进行分析，再寻找 css 和 js 对应的 url 去请求对应的文件，这就涉及到一个顺序问题，需要先请求到 html 文本，在浏览器里运行解析了这个文本之后才能发送 css 及 js 的请求。但是  在 http2 中服务端可以主动把 css 及 js 文件推送到客户端，与 html 并行传输，极大提高传输效率</p><h2 id="3-http-的连接"><a href="#3-http-的连接" class="headerlink" title="3. http 的连接"></a>3. http 的连接</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-162521-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在客户端和服务端之间进行 http 请求的发送和返回的过程当中，需要创建一个 TCP connection。http 只有请求和响应这个概念，不存在连接，请求和响应都是数据包，<br>之间要经过一个传输的通道，这个传输的通道就是在 tcp 里创建的一个连接(TCP connection)。这个连接可以保持状态，http 请求就是在这个连接之上发送的，所以在一个 tcp 连接上可以发送多个 http 请求。</p><p>在不同版本下，http 连接的模式不一样，在 http1.0 里，这个连接是在 http 请求创建同时创建 tcp 连接，请求结束后 tcp 连接就会关闭。</p><p>在 http1.1 里，这个连接可以通过某种方式声明是否保持连接状态。tcp 连接在创建过程中有三次握手消耗，三次握手就表示三次网络传输(客户端发送 - 服务端响应 - 客户端再次发送)，然后才能发送 http 请求。如果 tcp 连接一直保持，第二个 http 请求就没有三次握手的开销</p><p>在 http2 里不仅可以保持 tcp 的连接，同时这个连接上的 http 请求可以并发，就是说同一个用户对同一个服务器发起一个网页请求时只需要一个 tcp 连接。</p><h3 id="3-1-tcp-的三次握手"><a href="#3-1-tcp-的三次握手" class="headerlink" title="3.1 tcp 的三次握手"></a>3.1 tcp 的三次握手</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-162552-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>(一) 在 tcp 的三次握手当中，客户端会向服务端发起一个创建连接的数据包请求，这里会有一个标识为 <code>SYN=1</code>,SYN 是一个标志位，表示创建请求的数据包。后面会发送一个叫 <code>Seq=X</code>，X 表示数字，一般为 1。服务端接收到这个数据包之后就会知道要创建一个连接</p><p>(二) 创建  连接之后， 服务端就会开启一个 tcp 端口，返回给客户端数据，这个数据 <code>SYN=1,ACK=X+1,Seq=Y</code>,客户端拿到这个数据表示服务端允许创建这个 tcp 连接。</p><p>(三) 这时候客户端再去发送 <code>ACK=Y+1,Seq=Z</code>。</p><p>那么  为什么 tcp 要进行三次握手呢，这是为了防止服务端开启一些无用连接，网络连接具有延时性。客户端向服务端发起创建连接请求时，服务端直接创建了这个连接，返回的数据包因为网络原因丢失，那么客户端就一直接收不到服务器返回的数据，连接超时这个连接就会关闭，然后再发起新的连接，如果没有三次握手的话，这时服务端是不知道客户端到底有没有接收到返回的数据，浪费服务端的开销。所以需要三次握手去即时的察觉到网络原因导致的数据包传输中断的问题。</p><h3 id="3-2-URI、URL、URN"><a href="#3-2-URI、URL、URN" class="headerlink" title="3.2 URI、URL、URN"></a>3.2 URI、URL、URN</h3><p>在 http 协议中，基本上使用的都是 URL。</p><ul><li>URI(Uniform Resource Identifier)<ul><li>统一资源标志符</li><li>用来唯一标识互联网上的信息资源</li><li>包含 URL 和 URN</li></ul></li><li>URL(Uniform Resource Locator)<ul><li>统一资源定位器 </li></ul></li><li>URN<ul><li>永久统一资源定位符</li><li>在资源移动之后还能被找到</li><li>目前还没有非常成熟的使用方案</li></ul></li></ul><h3 id="3-3-HTTP-报文"><a href="#3-3-HTTP-报文" class="headerlink" title="3.3 HTTP 报文"></a>3.3 HTTP 报文</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-181124-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从图中可以看到 http 首部下面有一段空行，空行下面表示 http body 部分，上面就是 http headers 部分。</p><h4 id="3-3-1-请求报文"><a href="#3-3-1-请求报文" class="headerlink" title="3.3.1 请求报文"></a>3.3.1 请求报文</h4><p>(一) <strong>GET</strong></p><p>http 请求头中，首行第一部分包含的是 <code>method</code> 请求方法 ，每个方法有各自的语义，分别是 GET(获取数据)、POST(创建数据)、PUT(更新数据)、DELETE(删除数据)。这几种方法只是语义上的说明，并没有强约束， 比如使用 GET 方法去更新数据，只是这样违反了 http 语义化的定义规则。</p><p>(二) <strong>/test/hi-there.txt</strong></p><p>首行第二部分是请求的资源资源地址 url，一般这里是存放  路由相关的内容</p><p>(三) <strong>HTTP/1.0</strong></p><p>首行第三部分是 http 的版本，现在的 web 服务一般都是 http1.1，http2 也会有越来越多的实现，不同的版本也会有不同操作方式。</p><h4 id="3-3-2-响应报文"><a href="#3-3-2-响应报文" class="headerlink" title="3.3.2 响应报文"></a>3.3.2 响应报文</h4><p>(一) <strong>200 ok</strong></p><p>http 状态码，200 代表成功</p><h3 id="3-4-HTTP-方法"><a href="#3-4-HTTP-方法" class="headerlink" title="3.4 HTTP 方法"></a>3.4 HTTP 方法</h3><ul><li>用来定义对于资源的操作</li><li>常用有 GET、POST 等</li><li>从定义上有各自的语义</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>GET | 请求指定的页面信息，并返回实体主体。<br>HEAD | 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>POST | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>PUT | 从客户端向服务器传送的数据取代指定的文档的内容。<br>DELETE | 请求服务器删除指定的页面。</p><h3 id="3-5-HTTP-CODE"><a href="#3-5-HTTP-CODE" class="headerlink" title="3.5 HTTP CODE"></a>3.5 HTTP CODE</h3><ul><li>定义服务器对请求的处理结果</li><li>各个区间的 CODE 有各自的语义</li><li>好的 HTTP 服务可以通过 CODE 判断结果</li></ul><p><strong>HTTP Status：</strong></p><p>1xx（临时响应）<br>表示临时响应并需要请求者继续执行操作的状态代码。</p><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">状态</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>100 | （继续） | 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。<br>101 | （切换协议） | 请求者已要求服务器切换协议，服务器已确认并准备切换。</p><p>2xx （成功）<br>表示成功处理了请求的状态代码。</p><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">状态</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>200 | （成功） | 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br>201 | （已创建） | 请求成功并且服务器创建了新的资源。<br>202 | （已接受） | 服务器已接受请求，但尚未处理。<br>203 | （非授权信息） | 服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204 | （无内容） | 服务器成功处理了请求，但没有返回任何内容。<br>205 | （重置内容） | 服务器成功处理了请求，但没有返回任何内容。<br>206 | （部分内容） | 服务器成功处理了部分 GET 请求。</p><p>3xx （重定向）<br>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">状态</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>300 | （多种选择） | 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301 | （永久移动） | 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302 | （临时移动） | 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303 | （查看其他位置） | 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304 | （未修改） | 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305 | （使用代理） | 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307 | （临时重定向） | 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p>4xx（请求错误）<br>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">状态</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>400 | （错误请求） | 服务器不理解请求的语法。<br>401 | （未授权） | 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403 | （禁止） | 服务器拒绝请求。<br>404 | （未找到） | 服务器找不到请求的网页。<br>405 | （方法禁用） | 禁用请求中指定的方法。<br>406 | （不接受） | 无法使用请求的内容特性响应请求的网页。<br>407 | （需要代理授权）| 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br>408 | （请求超时）| 服务器等候请求时发生超时。<br>409 | （冲突）| 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br>410 | （已删除） | 如果请求的资源已永久删除，服务器就会返回此响应。<br>411 | （需要有效长度） | 服务器不接受不含有效内容长度标头字段的请求。<br>412 | （未满足前提条件） | 服务器未满足请求者在请求中设置的其中一个前提条件。<br>413 | （请求实体过大） | 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414 | （请求的 URI 过长） | 请求的 URI（通常为网址）过长，服务器无法处理。<br>415 | （不支持的媒体类型） | 请求的格式不受请求页面的支持。<br>416 | （请求范围不符合要求） | 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417 | （未满足期望值） | 服务器未满足”期望”请求标头字段的要求。</p><p>5xx（服务器错误）<br>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">状态</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>500 | （服务器内部错误） | 服务器遇到错误，无法完成请求。<br>501 | （尚未实施） | 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502 | （错误网关）| 服务器作为网关或代理，从上游服务器收到无效响应。<br>503 | （服务不可用） | 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504 | （网关超时） | 服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br>505 | （HTTP 版本不受支持） | 服务器不支持请求中所用的 HTTP 协议版本。</p><h2 id="4-HTTP-客户端"><a href="#4-HTTP-客户端" class="headerlink" title="4. HTTP 客户端"></a>4. HTTP 客户端</h2><p>浏览器就是我们最常用的 http 客户端</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-193151-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p> 同时 curl 可以查看 http 请求返回的内容</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-222909-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>curl 还可以查看请求的详细内容， <code>curl -v [host]</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-222733-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="4-1-CORS-跨域请求的限制与解决"><a href="#4-1-CORS-跨域请求的限制与解决" class="headerlink" title="4.1 CORS 跨域请求的限制与解决"></a>4.1 CORS 跨域请求的限制与解决</h3><p>做过前端开发的同学对跨域并不会陌生，通常我们可以使用 jsonp 去实现跨域请求。</p><p><strong>jsonp 跨域：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.example.com:8080<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>原理：</strong></p><p>浏览器允许 link、img、script 标签上写入路径加载一些内容的时候，是允许跨域的。</p><p><strong>服务端设置跨域：</strong></p><p>这里以 express 为例，我们只需在响应头中  添加 <code>Access-Control-Allow-Origin</code> 即可</p><pre class=" language-js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>浏览器在发送请求的时候并不知道服务是否跨域，还是会发送请求并且接收返回内容，只是在浏览器接收内容的时候  没有找到 <code>Access-Control-Allow-Origin</code> 头设置为  允许的话，它会把请求返回的内容忽略掉并且会在服务端报错。这个是浏览器所提供的功能。</p><p>实际上 Access-Control-Allow-Origin 值为 * 是不安全的，这样会导致第三方服务也可以通过跨域访问你的服务，可以设置为特定的域名</p><pre class=" language-js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://xxxx.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-1-1-CORS-预请求"><a href="#4-1-1-CORS-预请求" class="headerlink" title="4.1.1 CORS 预请求"></a>4.1.1 CORS 预请求</h4><p>浏览器是根据 header 判断某个请求的返回是否允许，如果  想要允许自定义的头进行发送的话，需要返回新的头  告知浏览器允许</p><pre class=" language-js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>  <span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">:</span> <span class="token string">'X-Test-Cors'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180606-233126-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同时会发现 network 中多出一个请求，这就是预请求</p><p>(一) 在跨域请求中，默认允许的方法只有 GET、HEAD、POST，其它的方法默认不允许，浏览器是有一个预请求的方式去验证的。</p><p>(二) 默认允许的 Content-Type：text/plain、multipart/form-data、application/x-www-form-urlencoded。这三个就是在 html 里使用 form 表单可以设置的三种数据类型。其它的也需要预请求验证过之后才能进行发送。</p><p>(三) 其它的请求头限制具体可以查看文档<br><a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header" rel="external nofollow noopener noreferrer" target="_blank">https://fetch.spec.whatwg.org/#cors-safelisted-request-header</a></p><p>(四) <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器</p><p>(五) 请求中没有使用 <code>ReadableStream</code> 对象</p><h3 id="4-2-缓存-Cache-Control"><a href="#4-2-缓存-Cache-Control" class="headerlink" title="4.2 缓存 Cache-Control"></a>4.2 缓存 Cache-Control</h3><ul><li>可缓存性<ul><li><code>public</code>（任何地方都会缓存）</li><li><code>private</code>（发起请求的浏览器）</li><li><code>no-cache</code> 可以在本地进行缓存，但是每次发起请求都要在服务端验证，如果服务端允许使用本地缓存，才能真正使用本地缓存。</li></ul></li><li>到期<ul><li><code>max-age = &lt;seconds&gt;</code></li><li><code>s-maxage = &lt;seconds&gt;</code> 在代理服务器中才会生效，代理服务器中如果两个都设置了，会优先选择 s-maxage 配置项</li><li><code>max-stale = &lt;secon ds&gt;</code> 发起端设置。即便缓存失效，只要这个时间内还可以使用过期的缓存，而不需要去原服务器请求新的内容。</li></ul></li><li>重新验证(不常用)<ul><li><code>must-revalidate</code> 在设置了 max-age 缓存中如果过期，必须去原服务端发送请求  然后重新获取数据再来验证内容是否真的过期，而不能直接使用本地缓存。</li><li><code>proxy-revalidate</code> 和 must-revalidate 类似，但是用在缓存服务器当中。</li></ul></li><li>其它<ul><li><code>no-store</code> 与 no-cache 对应，表示任何情况下都不会存储缓存，永远都要去服务端请求新的内容才能使用它。即便服务端允许使用缓存，但本地  没有进行缓存</li><li><code>no-transform</code> 用在 proxy 服务器，有些 proxy 服务器返回资源过大，会帮助进行压缩及格式转换，该属性会不允许。</li></ul></li></ul><p>没有缓存情况下请求资源</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-134507-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>设置客户端缓存后</p><pre class=" language-js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/javascript'</span><span class="token punctuation">,</span>  <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=200'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'console.log("script loaded")'</span><span class="token punctuation">)</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-134342-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到 Size 变为了 == (from memory cache) ==，表示从浏览器中读取缓存。</p><p>在做前端开发的时候，有些静态资源文件我们希望浏览器缓存下来，但是在服务端内容更新之后，客户端请求的是缓存下的旧资源文件，这样就没法更新应用。</p><p>目前最常见的方式就是前端编译的时候加静态资源文件 md5 戳。</p><h3 id="4-3-资源验证"><a href="#4-3-资源验证" class="headerlink" title="4.3 资源验证"></a>4.3 资源验证</h3><p>首先看一张图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-141513-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>浏览器创建请求，请求到达本地缓存(如果有 cache-control)，如果有本地缓存，就直接返回给浏览器显示出来，不经过任何网络传输。如果没有本地缓存，请求进入网络传输， 如果有代理服务器就会进入并查找缓存设置，查看资源是否被缓存，有缓存就返回缓存资源经过本地缓存再到浏览器显示。如果代理服务器未缓存，就会进入原服务器获取新的内容再返回。</p><h4 id="4-3-1-验证头"><a href="#4-3-1-验证头" class="headerlink" title="4.3.1 验证头"></a>4.3.1 验证头</h4><ul><li>Last-Modified<ul><li>上次修改时间</li><li>配合 If-Modified-Since 或者 If-Unmodified-Since 使用</li></ul></li></ul><p>浏览器在请求资源的 headers 里有 <code>Last-Modified</code> 这个头，并指定了时间，这个时间内下次浏览器发起请求时就会带上 <code>Last-Modified</code>传入的值，通过 <code>If-Modified-Since</code> 或 <code>If-Unmodified-Since</code>(通常为 If-Modified-Since)带到服务器上，服务器通过读取 headers 里 If-Modified-Since 带入的值找到资源存在的地方对比上次修改的时间，如果时间一样，就表示资源没有被重新修改过，服务器就通知浏览器直接使用缓存的资源，这就是资源验证的过程。</p><ul><li>Etag(更加严格的验证方式)<ul><li>数据签名 - 对内容产生唯一的签名</li><li>配合 If-Match 或者 If-Non-Match 使用</li></ul></li></ul><p>有任何的修改两个签名就会不一样，最典型的做法就是对资源内容做哈希计算，计算之后会得到一个唯一值，用这个签名来标记这个资源，下一次浏览器发起请求时会带上<br>If-Match 或者 If-Non-Match 头，这个头的值就是服务端返回 Etag 的值，然后对比服务器拿到浏览器传入的签名和服务器存在的签名，如果相同，就不需要返回新的内容。</p><h3 id="4-4-Cookie-和-Session"><a href="#4-4-Cookie-和-Session" class="headerlink" title="4.4 Cookie 和 Session"></a>4.4 Cookie 和 Session</h3><ul><li>Cookie<ul><li>通过 Set-Cookie 设置</li><li>下次请求会自动带上</li><li>键值对，可以设置多个</li></ul></li><li>Cookie 属性<ul><li>max-age(有效时间)和 expires(到某个时间点过期)设置过期时间</li><li>Secure 只在 https 的时候发送</li><li>HttpOnly 无法通过 document.cookie 访问</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Cookie设置，以express为例</span>response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token string">'name=hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置多个</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name=hello'</span><span class="token punctuation">,</span> <span class="token string">'age=12'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 过期时间</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name=hello; max-age=2'</span><span class="token punctuation">,</span> <span class="token string">'age=12'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 禁止js访问cookie</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name=hello'</span><span class="token punctuation">,</span> <span class="token string">'age=12; HttpOnly'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 子域名共享主域名cookie，前提是cookie要在主域名下设置</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name=hello'</span><span class="token punctuation">,</span> <span class="token string">'age=12; domain=example.com'</span><span class="token punctuation">]</span></code></pre><p><strong>Session</strong></p><p>session 机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p><p>当程序需要为某个客户端的请求创建一个 session 的时候，服务器首先检查这个客户端的请求里是否已包含了一个 session 标识 - 称为 session id，如果已包含一个 session id 则说明以前已经为此客户端创建过 session，服务器就按照 session id 把这个 session 检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含 session id，则为此客户端创建一个 session 并且生成一个与此 session 相关联的 session id，session id 的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 session id 将被在本次响应中返回给客户端保存。</p><p>保存这个 session id 的方式可以采用 cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。一般这个 cookie 的名字都是类似于<code>SEEESIONID</code>，而。比如 weblogic 对于 web 应用程序生成的 cookie，<code>JSESSIONID=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764</code>，它的名字就是<code>JSESSIONID</code>。</p><p>由于 cookie 可以被人为的禁止，必须有其他机制以便在 cookie 被禁止时仍然能够把 session id 传递回服务器。经常被使用的一种技术叫做 URL 重写，就是把 session id 直接附加在 URL 路径的后面，附加方式也有两种，一种是作为 URL 路径的附加信息，表现形式为<code>http://...../xxx;jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764</code></p><p>另一种是作为查询字符串附加在 URL 后面，表现形式为<code>http://...../xxx?jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764</code></p><p>这两种方式对于用户来说是没有区别的，只是服务器在解析的时候处理的方式不同，采用第一种方式也有利于把 session id 的信息和正常程序参数区分开来。为了在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个 session id。</p><p>另一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把 session id 传递回服务器。比如下面的表单：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testform<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>在被传递给客户端之前将被改写成：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testform<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jsessionid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>这种技术现在已较少应用，实际上这种技术可以简单的用对 action 应用 URL 重写来代替。</p><h3 id="4-5-HTTP-长连接"><a href="#4-5-HTTP-长连接" class="headerlink" title="4.5 HTTP 长连接"></a>4.5 HTTP 长连接</h3><p>http 的请求是在 tcp 的连接上进行发送的，tcp 连接又分为长连接和短连接。</p><p>长连接就是在 tcp 连接上把 http 请求发送并接收返回，这个时候一次 http 请求已经结束，浏览器和服务器会协商是否断掉这个连接，长连接就是在不断掉连接下可以持续发送 http 请求，适合高并发。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-164944-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在 Connection Id 这一栏可以看到很多 10247 的相同 id，表示这些请求都是在同一连接下发送的。但还是会有不同的连接，因为 http1.1 的连接在 tcp 连接上发送请求是有先后顺序的，不会并发请求。</p><p>我们希望在加载网站首页的时候可以并发处理这些请求，浏览器可以允许产生一个并发的创建 tcp 连接，chrome 允许最大并发数为 6。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-170036-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，并发情况下会创建不同的 tcp 连接，chrome 如果超出了 6 个并发，后面的请求会等待前面的完成，并且会尽量复用前面的连接地址而保持长连接，这是浏览器默认的行为。</p><p>可以手动关闭长连接</p><pre class=" language-js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'image/jpg'</span><span class="token punctuation">,</span>  <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'close'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-171314-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>关闭长连接之后可以发现每次连接 id 都会不一样，后面的也会等待前面的完成，没有重复利用 tcp 连接，每次请求发送完成 tcp 连接就会关闭。</p><p>一般情况下 keep-alive 都是开启的，并且  会设置一个自动关闭时间。</p><p><strong>信道复用</strong></p><p>在 tcp 连接上并发的发送 http 请求，也就是说在连接一个网站时只需一个 tcp 连接，只在同域下请求有效，http2 实现了这个功能。</p><h3 id="4-6-数据协商"><a href="#4-6-数据协商" class="headerlink" title="4.6 数据协商"></a>4.6 数据协商</h3><p>在客户端发送给服务端请求的时候，客户端会声明这个请求拿到的数据格式以及数据相关的一些限制是怎样的，服务端会根据客户端的这个声明做出判断，从而返回不同的数据类型格式。</p><p><strong>分类</strong></p><ul><li>请求<ul><li>Accept</li><li>Accept-Encoding</li><li>Accept-Language</li><li>User-Agent</li></ul></li><li>返回<ul><li>Content-Type</li><li>Content-Encoding</li><li>Content-Language</li></ul></li></ul><blockquote><p>MIME_types 相关对照表看这里<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" rel="external nofollow noopener noreferrer" target="_blank">文档</a></p></blockquote><h3 id="4-7-Redirect"><a href="#4-7-Redirect" class="headerlink" title="4.7 Redirect"></a>4.7 Redirect</h3><p>在开发中，我们存放资源的位置如果发生了改变，页面在请求时就会报 404 错误，为了避免这种错误，需要帮助浏览器指向到正确的地址。</p><pre class=" language-js"><code class="language-js">http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Location'</span><span class="token punctuation">:</span> <span class="token string">'/new'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/new'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;div>web&lt;/div>'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-180941-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图中可以看到第一次请求页面状态码为 302，并跳转到了 new 这个 url 下。</p><p>但是 302 是临时跳转，每一次  访问都要经过服务端的跳转，图中也可以看到有两个 url 的请求。如果确定每次访问 / 下都会跳转到 new 下，可以指定状态码为 301 永久跳转，这样访问页面就只出现 new。</p><p>需要注意的是，301 会尽可能长时间的把跳转页面缓存下来，这时候服务端即使修改了 url，浏览器还是会从缓存里读取，这个是有用户使用浏览器情况所决定的，除非用户主动去清理浏览器缓存。所以 301 要慎重处理。</p><h3 id="4-8-CSP"><a href="#4-8-CSP" class="headerlink" title="4.8 CSP"></a>4.8 CSP</h3><p>Content-Security-Policy 内容安全策略，这使得浏览器变得更加安全。</p><p><strong>作用</strong></p><ul><li>限制资源获取</li><li>报告资源获取越权</li></ul><p><strong>限制方式</strong></p><ul><li>default-src 限制全局</li><li>制定资源类型<ul><li>connect-src</li><li>img-src</li><li>manifest-src</li><li>font-src</li><li>media-src</li><li>style-src</li><li>frame-src</li><li>script-src</li></ul></li></ul><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">'default-src http: https:'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>加入限制之后浏览器就会阻止 js 脚本的加载并报错</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-183042-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>只允许本站下的资源</p><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">'default-src \'self\''</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>允许某些站点的内容</p><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">'default-src \'self\' http://www.example.com/'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>限制 form 表单的  跳转</p><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">'default-src \'self\'; form-action \'self\''</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>详细内容可以查看 csp 文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP" rel="external nofollow noopener noreferrer" target="_blank">MDN CSP</a></p></blockquote><p>内容安全策略如果出现了不希望出现的情况下，可以申请主动向服务端发起请求来汇报</p><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">'default-src \'self\' report-uri /report'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180607-185148-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果我们只想对限制进行错误报告而不阻止资源加载的话，可以这么写</p><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Content-Security-Policy-Report-Only'</span><span class="token punctuation">:</span> <span class="token string">'default-src \'self\''</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>scp不仅可以写在 headers 里，还可以在html的meta标签里写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在meta下是不允许写 report-uri 的，这个指令只能写在 headers 里。</p><h2 id="5-Nginx-代理服务器"><a href="#5-Nginx-代理服务器" class="headerlink" title="5. Nginx 代理服务器"></a>5. Nginx 代理服务器</h2><h3 id="5-1-基础代理配置"><a href="#5-1-基础代理配置" class="headerlink" title="5.1 基础代理配置"></a>5.1 基础代理配置</h3><p>nginx 是现在互联网界用的最多的 web 服务器，它是一个非常纯粹的做 http 协议实现的服务器，并没有一个工具来实现业务逻辑的开发。主要是用来做 http 的代理服务器。</p><p>nginx 的安装和用法可以查网上相关教程。这里介绍的主要是 nginx 的代理和缓存的功能。</p><p> 一个最简单的代理</p><pre class=" language-shell"><code class="language-shell">// nginx.confserver {  listen       80;  server_name  test.com;  location / {    proxy_pass http://127.0.0.1:8888;    # proxy_set_header Host $host;  }}</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-121046-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-121213-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，浏览器下 host 是 <code>test.com</code>，但在服务器下就变成了 <code>127.0.0.1:8888</code>。这是因为设置了代理，浏览器请求是发送到 nginx 的，nginx 再进行转发，发送到实际的 node 服务，这时候作为发起方， 它认为的 host 就是这里设置的 <code>proxy_pass</code>。</p><p>想要拿到浏览器的 host 。可以设置 <code>proxy_set_header</code> 属性 <code>$host</code>。</p><p>中间代理可以修改任何想要修改的数据，但只是在 http 中，https 的传输过程是加密的，中间代理无法解析。在手机上所看到的一些移动联通的  广告就是  经过代理层插入了一些代码所展示的。</p><h3 id="5-2-nginx-缓存"><a href="#5-2-nginx-缓存" class="headerlink" title="5.2 nginx 缓存"></a>5.2 nginx 缓存</h3><pre class=" language-shell"><code class="language-shell"># nginx.confproxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;server {  listen       80;  server_name  example.com;  location / {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8080;    proxy_set_header Host $host;  }}</code></pre><p><strong>proxy_cache_path：</strong>第一个选项表示缓存路径，<code>levels</code> 是否创建二级文件夹，<code>keys_zone</code> url 对应的缓存位置及内存大小</p><pre class=" language-js"><code class="language-js">response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=10, s-maxage=10, private'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>s-maxage</code> 是专门为代理缓存设置过期时间的，而 private 就表示只允许浏览器缓存。</p><h3 id="5-3-HTTPS"><a href="#5-3-HTTPS" class="headerlink" title="5.3 HTTPS"></a>5.3 HTTPS</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-130309-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>https 在传输过程中，客户端会生成一个随机数传输到服务端，中间会带上一个  支持的加密套件，服务端拿到之后保存并且也生成一段随机数，然后把这段随机数和服务端生成的证书一同发到客户端，同时客户端也会把服务端的随机数保存，并且通过服务端证书生成预主秘钥，生成过程也会生成一个随机数，这个随机数  通过公钥加密后传输给服务端，服务端通过私钥解密拿到预主秘钥。然后客户端和服务端同时对这  三个随机数进行算法解密生成主密钥(这里会涉及到加密套件，服务端选择的加密套件必须是客户端所支持的)，后续的数据传输都是经过主密钥加密进行传输的。这对主密钥只有客户端和服务端共有，中间代理无法破解 ，这就是 https 的加密原理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-131702-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里是通过抓取工具抓的 https 加密的站点，可以看到，数据都被加密，无法破解。</p><h4 id="5-3-1-nginx-部署-https-服务"><a href="#5-3-1-nginx-部署-https-服务" class="headerlink" title="5.3.1 nginx 部署 https 服务"></a>5.3.1 nginx 部署 https 服务</h4><p>要部署 https 服务，首先要生成一对公钥和私钥，这里有一个  命令可以帮助生成</p><pre class=" language-shell"><code class="language-shell">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout localhost-privkey.pem -out localhost-cert.pem</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-170452-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>敲入回车之后可以看到这样的提示，这里我们测试，全部按回车跳过就好。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-170824-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最终会生成两个文件，然后在 nginx 配置这个证书</p><pre class=" language-shell"><code class="language-shell">// nginx.confproxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;server {  listen       80 default_server;  listen       [::]:80 default_server;  server_name  test.com;  return 302 https://$server_name$request_uri;}server {  listen       443;  server_name  test.com;  ssl on;  ssl_certificate_key /www/data/cert/localhost-privkey.pem;  ssl_certificate /www/data/cert/localhost-cert.pem;  location / {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8080;    proxy_set_header Host $host;  }}  ssl on;  ssl_certificate_key /www/data/cert/localhost-privkey.pem;  ssl_certificate /www/data/cert/localhost-cert.pem;  location / {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8080;    proxy_set_header Host $host;  }}</code></pre><p>配置好之后重启 nginx 服务，然后输入 https 的域名<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-171754-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>提示非安全连接是因为 chrome 浏览器认为的安全证书是要通过有权威的机构去签发的，这种机构会先认证域名所有者与服务是否属于你，验证通过才会签发证书。</p><h4 id="5-3-2-http2"><a href="#5-3-2-http2" class="headerlink" title="5.3.2 http2"></a>5.3.2 http2</h4><ul><li>优势<ul><li>信道复用</li><li>分帧传输</li><li>Server Push(推送)</li></ul></li></ul><p><strong>http2 的使用</strong></p><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>  <span class="token string">'Link'</span><span class="token punctuation">:</span> <span class="token string">'&lt;/test.jpg>; as=image; rel=preload'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>server 头信息了的 <code>Link</code>可以指定这个头想要推送的内容，<code>&lt;/xxx&gt;</code> 为文件绝对路径，<code>as</code> 指定文件类型，<code>preload</code> 表示需要进行服务端推送。</p><p>nginx 里也要做这些配置。在使用 nginx 做反向代理时，我们希望 nginx 帮助处理这些东西，而 http2 也是在 nginx 里提供的，node server 还是  为 http 的服务，nginx 会把 http2 的请求转化为 http 的请求发送到 node 服务上。</p><p>为何不在 node 上做 http2 的服务呢，因为在 nginx 开启一个 http2 的服务是非常容易的，在 node 上做 http2 的服务可能还会涉及到大量的逻辑修改，成本开销比较大。</p><blockquote><p>需要注意的是，目前只有在 https 下才能开启 http2</p></blockquote><p>在 nginx 下开启 http2 很简单。</p><pre class=" language-shell"><code class="language-shell">// nginx.confproxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;server {  listen       80 default_server;  listen       [::]:80 default_server;  server_name  test.com;  return 302 https://$server_name$request_uri;}server {  listen       443 http2;  server_name  test.com;  http2_push_preload on;  ssl on;  ssl_certificate_key /www/data/cert/localhost-privkey.pem;  ssl_certificate /www/data/cert/localhost-cert.pem;  location / {    proxy_cache my_cache;    proxy_pass http://127.0.0.1:8080;    proxy_set_header Host $host;  }}</code></pre><p><code>http2_push_preload</code> 开启之后，在接收 node 返回信息里如果有  <code>Link：rel=preload</code>，就会去寻找该路径资源，然后主动推送。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-175257-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到 <code>Protocal</code> 值为 <code>h2</code>，这个就是 http2 的缩写。</p><p>这里有一个可以测试 http2 性能的网站 <a href="https://http2.akamai.com/demo/http2-lab.html" rel="external nofollow noopener noreferrer" target="_blank">网站入口</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180608-183211-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，使用 HTTP2 的性能提升非常显著。</p><p>有些浏览器不支持 http2，nginx 会帮助浏览器做兼容处理，这个兼容方案为 ALPN ，客户端跟服务端会进行协商用哪个协议，如果客户端只支持 http1.1，服务端就会以 http1.1 的传输方式进行。</p><p><strong>以上就是对 http 知识的总结</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多前端开发的同学  不是特别了解 http 相关的知识，本文我们就深入去了解下 http 协议原理和实践相关的内容。&lt;/p&gt;
&lt;p&gt;首先了解下&lt;strong&gt;浏览器输入 url 后 http 请求返回的过程是什么&lt;/strong&gt;，看下图&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="HTTP" scheme="http://coder.liusixin.cn/tags/HTTP/"/>
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用命令及实践</title>
    <link href="http://coder.liusixin.cn/posts/a0b65e8c/"/>
    <id>http://coder.liusixin.cn/posts/a0b65e8c/</id>
    <published>2018-05-24T11:30:13.000Z</published>
    <updated>2018-05-24T11:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-虚拟机常用命令"><a href="#Docker-虚拟机常用命令" class="headerlink" title="Docker 虚拟机常用命令"></a>Docker 虚拟机常用命令</h2><h3 id="1-先更新软件包"><a href="#1-先更新软件包" class="headerlink" title="1. 先更新软件包"></a>1. 先更新软件包</h3><pre class=" language-shell"><code class="language-shell">yum -y update</code></pre><h3 id="2-安装-Docker-虚拟机"><a href="#2-安装-Docker-虚拟机" class="headerlink" title="2. 安装 Docker 虚拟机"></a>2. 安装 Docker 虚拟机</h3><pre class=" language-shell"><code class="language-shell">yum install -y docker</code></pre><h3 id="3-运行、重启、关闭-Docker-虚拟机"><a href="#3-运行、重启、关闭-Docker-虚拟机" class="headerlink" title="3. 运行、重启、关闭 Docker 虚拟机"></a>3. 运行、重启、关闭 Docker 虚拟机</h3><pre class=" language-shell"><code class="language-shell">service docker startservice docker startservice docker stop</code></pre><h3 id="4-搜索镜像"><a href="#4-搜索镜像" class="headerlink" title="4. 搜索镜像"></a>4. 搜索镜像</h3><pre class=" language-shell"><code class="language-shell">docker search 镜像名称</code></pre><h3 id="5-下载镜像"><a href="#5-下载镜像" class="headerlink" title="5. 下载镜像"></a>5. 下载镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull 镜像名称</code></pre><h3 id="6-查看镜像"><a href="#6-查看镜像" class="headerlink" title="6. 查看镜像"></a>6. 查看镜像</h3><pre class=" language-shell"><code class="language-shell">docker images</code></pre><h3 id="7-删除镜像"><a href="#7-删除镜像" class="headerlink" title="7. 删除镜像"></a>7. 删除镜像</h3><pre class=" language-shell"><code class="language-shell">docker rmi 镜像名称</code></pre><h3 id="8-运行容器"><a href="#8-运行容器" class="headerlink" title="8. 运行容器"></a>8. 运行容器</h3><pre class=" language-shell"><code class="language-shell">docker run 启动参数  镜像名称</code></pre><h3 id="9-查看容器列表"><a href="#9-查看容器列表" class="headerlink" title="9. 查看容器列表"></a>9. 查看容器列表</h3><pre class=" language-shell"><code class="language-shell">docker ps -a</code></pre><h3 id="10-停止、挂起、恢复容器"><a href="#10-停止、挂起、恢复容器" class="headerlink" title="10. 停止、挂起、恢复容器"></a>10. 停止、挂起、恢复容器</h3><pre class=" language-shell"><code class="language-shell">docker stop 容器IDdocker pause 容器IDdocker unpase 容器ID</code></pre><h3 id="11-查看容器信息"><a href="#11-查看容器信息" class="headerlink" title="11. 查看容器信息"></a>11. 查看容器信息</h3><pre class=" language-shell"><code class="language-shell">docker inspect 容器ID</code></pre><h3 id="12-删除容器"><a href="#12-删除容器" class="headerlink" title="12. 删除容器"></a>12. 删除容器</h3><pre class=" language-shell"><code class="language-shell">docker rm 容器ID</code></pre><h3 id="13-数据卷管理"><a href="#13-数据卷管理" class="headerlink" title="13. 数据卷管理"></a>13. 数据卷管理</h3><pre class=" language-shell"><code class="language-shell">docker volume create 数据卷名称  #创建数据卷docker volume rm 数据卷名称  #删除数据卷docker volume inspect 数据卷名称  #查看数据卷</code></pre><h3 id="14-网络管理"><a href="#14-网络管理" class="headerlink" title="14. 网络管理"></a>14. 网络管理</h3><pre class=" language-shell"><code class="language-shell">docker network ls 查看网络信息docker network create --subnet=网段 网络名称docker network rm 网络名称</code></pre><h3 id="15-避免-VM-虚拟机挂起恢复之后，Docker-虚拟机断网"><a href="#15-避免-VM-虚拟机挂起恢复之后，Docker-虚拟机断网" class="headerlink" title="15. 避免 VM 虚拟机挂起恢复之后，Docker 虚拟机断网"></a>15. 避免 VM 虚拟机挂起恢复之后，Docker 虚拟机断网</h3><pre class=" language-shell"><code class="language-shell">vi /etc/sysctl.conf</code></pre><p>文件中添加<code>net.ipv4.ip_forward=1</code>这个配置</p><pre class=" language-shell"><code class="language-shell">#重启网络服务systemctl  restart network</code></pre><h2 id="安装-PXC-集群，负载均衡，双机热备"><a href="#安装-PXC-集群，负载均衡，双机热备" class="headerlink" title="安装 PXC 集群，负载均衡，双机热备"></a>安装 PXC 集群，负载均衡，双机热备</h2><h3 id="1-安装-PXC-镜像"><a href="#1-安装-PXC-镜像" class="headerlink" title="1. 安装 PXC 镜像"></a>1. 安装 PXC 镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull percona/percona-xtradb-cluster</code></pre><h3 id="2-为-PXC-镜像改名"><a href="#2-为-PXC-镜像改名" class="headerlink" title="2. 为 PXC 镜像改名"></a>2. 为 PXC 镜像改名</h3><pre class=" language-shell"><code class="language-shell">docker tag percona/percona-xtradb-cluster pxc</code></pre><h3 id="3-创建-net1-网段"><a href="#3-创建-net1-网段" class="headerlink" title="3. 创建 net1 网段"></a>3. 创建 net1 网段</h3><pre class=" language-shell"><code class="language-shell">docker network create --subnet=172.18.0.0/16 net1</code></pre><h3 id="4-创建-5-个数据卷"><a href="#4-创建-5-个数据卷" class="headerlink" title="4. 创建 5 个数据卷"></a>4. 创建 5 个数据卷</h3><pre class=" language-shell"><code class="language-shell">docker volume create --name v1docker volume create --name v2docker volume create --name v3docker volume create --name v4docker volume create --name v5</code></pre><h3 id="5-创建备份数据卷（用于热备份数据）"><a href="#5-创建备份数据卷（用于热备份数据）" class="headerlink" title="5. 创建备份数据卷（用于热备份数据）"></a>5. 创建备份数据卷（用于热备份数据）</h3><pre class=" language-shell"><code class="language-shell">docker volume create --name backup</code></pre><h3 id="6-创建-5-节点的-PXC-集群"><a href="#6-创建-5-节点的-PXC-集群" class="headerlink" title="6. 创建 5 节点的 PXC 集群"></a>6. 创建 5 节点的 PXC 集群</h3><p>注意，每个 MySQL 容器创建之后，因为要执行 PXC 的初始化和加入集群等工作，耐心等待 1 分钟左右再用客户端连接 MySQL。另外，必须第 1 个 MySQL 节点启动成功，用 MySQL 客户端能连接上之后，再去创建其他 MySQL 节点。</p><pre class=" language-shell"><code class="language-shell">#创建第1个MySQL节点docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 pxc#创建第2个MySQL节点docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=net1 --ip 172.18.0.3 pxc#创建第3个MySQL节点docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v3:/var/lib/mysql --privileged --name=node3 --net=net1 --ip 172.18.0.4 pxc#创建第4个MySQL节点docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v4:/var/lib/mysql --privileged --name=node4 --net=net1 --ip 172.18.0.5 pxc#创建第5个MySQL节点docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=net1 --ip 172.18.0.6 pxc</code></pre><h3 id="7-安装-Haproxy-镜像"><a href="#7-安装-Haproxy-镜像" class="headerlink" title="7. 安装 Haproxy 镜像"></a>7. 安装 Haproxy 镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull haproxy</code></pre><h3 id="8-宿主机上编写-Haproxy-配置文件"><a href="#8-宿主机上编写-Haproxy-配置文件" class="headerlink" title="8. 宿主机上编写 Haproxy 配置文件"></a>8. 宿主机上编写 Haproxy 配置文件</h3><pre class=" language-shell"><code class="language-shell">vi /home/soft/haproxy.cfg</code></pre><p><strong>配置文件如下：</strong></p><pre class=" language-properties"><code class="language-properties">global<span class="token comment" spellcheck="true">   #工作目录</span><span class="token attr-name">   chroot</span> <span class="token attr-value">/usr/local/etc/haproxy</span><span class="token comment" spellcheck="true">   #日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info</span><span class="token attr-name">   log</span> <span class="token attr-value">127.0.0.1 local5 info</span><span class="token comment" spellcheck="true">   #守护进程运行</span>   daemondefaults<span class="token attr-name">   log</span> <span class="token attr-value">   global</span><span class="token attr-name">   mode</span> <span class="token attr-value">   http</span><span class="token comment" spellcheck="true">   #日志格式</span><span class="token attr-name">   option</span> <span class="token attr-value">   httplog</span><span class="token comment" spellcheck="true">   #日志中不记录负载均衡的心跳检测记录</span><span class="token attr-name">   option</span> <span class="token attr-value">   dontlognull</span><span class="token comment" spellcheck="true">   #连接超时（毫秒）</span><span class="token attr-name">   timeout</span> <span class="token attr-value">connect 5000</span><span class="token comment" spellcheck="true">   #客户端超时（毫秒）</span><span class="token attr-name">   timeout</span> <span class="token attr-value">client  50000</span><span class="token comment" spellcheck="true">   #服务器超时（毫秒）</span><span class="token attr-name">   timeout</span> <span class="token attr-value">server  50000</span><span class="token comment" spellcheck="true">#监控界面</span><span class="token attr-name">listen</span> <span class="token attr-value"> admin_stats</span><span class="token comment" spellcheck="true">   #监控界面的访问的IP和端口</span><span class="token attr-name">   bind</span> <span class="token attr-value"> 0.0.0.0:8888</span><span class="token comment" spellcheck="true">   #访问协议</span><span class="token attr-name">   mode</span> <span class="token attr-value">       http</span><span class="token comment" spellcheck="true">   #URI相对地址</span><span class="token attr-name">   stats</span> <span class="token attr-value">uri   /dbs</span><span class="token comment" spellcheck="true">   #统计报告格式</span><span class="token attr-name">   stats</span> <span class="token attr-value">realm     Global\ statistics</span><span class="token comment" spellcheck="true">   #登陆帐户信息</span><span class="token attr-name">   stats</span> <span class="token attr-value">auth  admin:abc123456</span><span class="token comment" spellcheck="true">#数据库负载均衡</span><span class="token attr-name">listen</span> <span class="token attr-value"> proxy-mysql</span><span class="token comment" spellcheck="true">   #访问的IP和端口</span><span class="token attr-name">   bind</span> <span class="token attr-value"> 0.0.0.0:3306</span><span class="token comment" spellcheck="true">   #网络协议</span><span class="token attr-name">   mode</span> <span class="token attr-value"> tcp</span><span class="token comment" spellcheck="true">   #负载均衡算法（轮询算法）</span><span class="token comment" spellcheck="true">   #轮询算法：roundrobin</span><span class="token comment" spellcheck="true">   #权重算法：static-rr</span><span class="token comment" spellcheck="true">   #最少连接算法：leastconn</span><span class="token comment" spellcheck="true">   #请求源IP算法：source</span><span class="token attr-name">   balance</span> <span class="token attr-value"> roundrobin</span><span class="token comment" spellcheck="true">   #日志格式</span><span class="token attr-name">   option</span> <span class="token attr-value"> tcplog</span><span class="token comment" spellcheck="true">   #在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span><span class="token attr-name">   option</span> <span class="token attr-value"> mysql-check user haproxy</span><span class="token attr-name">   server</span> <span class="token attr-value"> MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000</span><span class="token attr-name">   server</span> <span class="token attr-value"> MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000</span><span class="token attr-name">   server</span> <span class="token attr-value"> MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000</span><span class="token attr-name">   server</span> <span class="token attr-value"> MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000</span><span class="token attr-name">   server</span> <span class="token attr-value"> MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000</span><span class="token comment" spellcheck="true">   #使用keepalive检测死链</span><span class="token attr-name">   option</span> <span class="token attr-value"> tcpka</span></code></pre><h3 id="9-创建两个-Haproxy-容器"><a href="#9-创建两个-Haproxy-容器" class="headerlink" title="9. 创建两个 Haproxy 容器"></a>9. 创建两个 Haproxy 容器</h3><pre class=" language-shell"><code class="language-shell">#创建第1个Haproxy负载均衡服务器docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.18.0.7 haproxy#进入h1容器，启动Haproxydocker exec -it h1 bashhaproxy -f /usr/local/etc/haproxy/haproxy.cfg#创建第2个Haproxy负载均衡服务器docker run -it -d -p 4003:8888 -p 4004:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h2 --privileged --net=net1 --ip 172.18.0.8 haproxy#进入h2容器，启动Haproxydocker exec -it h2 bashhaproxy -f /usr/local/etc/haproxy/haproxy.cfg</code></pre><h3 id="10-Haproxy-容器内安装-Keepalived，设置虚拟-IP"><a href="#10-Haproxy-容器内安装-Keepalived，设置虚拟-IP" class="headerlink" title="10. Haproxy 容器内安装 Keepalived，设置虚拟 IP"></a>10. Haproxy 容器内安装 Keepalived，设置虚拟 IP</h3><pre class=" language-shell"><code class="language-shell">#进入h1容器docker exec -it h1 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件（参考下方配置文件）vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start#宿主机执行ping命令ping 172.18.0.201</code></pre><p><strong>配置文件内容如下：</strong></p><pre><code>vrrp_instance  VI_1 {    state  MASTER    interface  eth0    virtual_router_id  51    priority  100    advert_int  1    authentication {        auth_type  PASS        auth_pass  123456    }    virtual_ipaddress {        172.18.0.201    }}</code></pre><pre class=" language-shell"><code class="language-shell">#进入h2容器docker exec -it h2 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start#宿主机执行ping命令ping 172.18.0.201</code></pre><p><strong>配置文件内容如下：</strong></p><pre class=" language-shell"><code class="language-shell">vrrp_instance  VI_1 {    state  MASTER    interface  eth0    virtual_router_id  51    priority  100    advert_int  1    authentication {        auth_type  PASS        auth_pass  123456    }    virtual_ipaddress {        172.18.0.201    }}</code></pre><h3 id="11-宿主机安装-Keepalived，实现双击热备"><a href="#11-宿主机安装-Keepalived，实现双击热备" class="headerlink" title="11. 宿主机安装 Keepalived，实现双击热备"></a>11. 宿主机安装 Keepalived，实现双击热备</h3><pre class=" language-shell"><code class="language-shell">#宿主机执行安装Keepalivedyum -y install keepalived#修改Keepalived配置文件vi /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><p><strong>Keepalived 配置文件如下：</strong></p><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {           192.168.99.150    }}virtual_server 192.168.99.150 8888 {    delay_loop 3    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 172.18.0.201 8888 {        weight 1    }}virtual_server 192.168.99.150 3306 {    delay_loop 3    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 172.18.0.201 3306 {        weight 1    }}</code></pre><h3 id="12-热备份数据"><a href="#12-热备份数据" class="headerlink" title="12. 热备份数据"></a>12. 热备份数据</h3><pre class=" language-shell"><code class="language-shell">#进入node1容器docker exec -it node1 bash#更新软件包apt-get update#安装热备工具apt-get install percona-xtrabackup-24#全量热备innobackupex --user=root --password=abc123456 /data/backup/full</code></pre><h3 id="13-冷还原数据"><a href="#13-冷还原数据" class="headerlink" title="13. 冷还原数据"></a>13. 冷还原数据</h3><p>停止其余 4 个节点，并删除节点</p><pre class=" language-shell"><code class="language-shell">docker stop node2docker stop node3docker stop node4docker stop node5docker rm node2docker rm node3docker rm node4docker rm node5</code></pre><p>node1 容器中删除 MySQL 的数据</p><pre class=" language-shell"><code class="language-shell">#删除数据rm -rf /var/lib/mysql/*#清空事务innobackupex --user=root --password=abc123456 --apply-back /data/backup/full/2018-04-15_05-09-07/#还原数据innobackupex --user=root --password=abc123456 --copy-back  /data/backup/full/2018-04-15_05-09-07/</code></pre><p>重新创建其余 4 个节点，组件 PXC 集群</p><h2 id="安装-Redis，配置-RedisCluster-集群"><a href="#安装-Redis，配置-RedisCluster-集群" class="headerlink" title="安装 Redis，配置 RedisCluster 集群"></a>安装 Redis，配置 RedisCluster 集群</h2><h3 id="1-安装-Redis-镜像"><a href="#1-安装-Redis-镜像" class="headerlink" title="1. 安装 Redis 镜像"></a>1. 安装 Redis 镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull yyyyttttwwww/redis</code></pre><h3 id="2-创建-net2-网段"><a href="#2-创建-net2-网段" class="headerlink" title="2. 创建 net2 网段"></a>2. 创建 net2 网段</h3><pre class=" language-shell"><code class="language-shell">docker network create --subnet=172.19.0.0/16 net2</code></pre><h3 id="3-创建-6-节点-Redis-容器"><a href="#3-创建-6-节点-Redis-容器" class="headerlink" title="3. 创建 6 节点 Redis 容器"></a>3. 创建 6 节点 Redis 容器</h3><pre class=" language-shell"><code class="language-shell">docker run -it -d --name r1 -p 5001:6379 --net=net2 --ip 172.19.0.2 redis bashdocker run -it -d --name r2 -p 5002:6379 --net=net2 --ip 172.19.0.3 redis bashdocker run -it -d --name r3 -p 5003:6379 --net=net2 --ip 172.19.0.4 redis bashdocker run -it -d --name r4 -p 5004:6379 --net=net2 --ip 172.19.0.5 redis bashdocker run -it -d --name r5 -p 5005:6379 --net=net2 --ip 172.19.0.6 redis bash</code></pre><h3 id="4-启动-6-节点-Redis-服务器"><a href="#4-启动-6-节点-Redis-服务器" class="headerlink" title="4. 启动 6 节点 Redis 服务器"></a>4. 启动 6 节点 Redis 服务器</h3><pre class=" language-shell"><code class="language-shell">#进入r1节点docker exec -it r1 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r2节点docker exec -it r2 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r3节点docker exec -it r3 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r4节点docker exec -it r4 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r5节点docker exec -it r5 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf#进入r6节点docker exec -it r6 bashcp /home/redis/redis.conf /usr/redis/redis.confcd /usr/redis/src./redis-server ../redis.conf</code></pre><h3 id="5-创建-Cluster-集群"><a href="#5-创建-Cluster-集群" class="headerlink" title="5. 创建 Cluster 集群"></a>5. 创建 Cluster 集群</h3><pre class=" language-shell"><code class="language-shell">#在r1节点上执行下面的指令cd /usr/redis/srcmkdir -p ../clustercp redis-trib.rb ../cluster/cd ../cluster#创建Cluster集群./redis-trib.rb create --replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379</code></pre><h2 id="打包部署后端项目"><a href="#打包部署后端项目" class="headerlink" title="打包部署后端项目"></a>打包部署后端项目</h2><h3 id="1-进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个-JAR-文件）"><a href="#1-进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个-JAR-文件）" class="headerlink" title="1. 进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个 JAR 文件）"></a>1. 进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个 JAR 文件）</h3><pre class=" language-shell"><code class="language-shell">mvn clean install -Dmaven.test.skip=true</code></pre><h3 id="2-安装-Java-镜像"><a href="#2-安装-Java-镜像" class="headerlink" title="2. 安装 Java 镜像"></a>2. 安装 Java 镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull java</code></pre><h3 id="3-创建-3-节点-Java-容器"><a href="#3-创建-3-节点-Java-容器" class="headerlink" title="3. 创建 3 节点 Java 容器"></a>3. 创建 3 节点 Java 容器</h3><pre class=" language-shell"><code class="language-shell">#创建数据卷，上传JAR文件docker volume create j1#启动容器docker run -it -d --name j1 -v j1:/home/soft --net=host java#进入j1容器docker exec -it j1 bash#启动Java项目nohup java -jar /home/soft/renren-fast.jar#创建数据卷，上传JAR文件docker volume create j2#启动容器docker run -it -d --name j2 -v j2:/home/soft --net=host java#进入j1容器docker exec -it j2 bash#启动Java项目nohup java -jar /home/soft/renren-fast.jar#创建数据卷，上传JAR文件docker volume create j3#启动容器docker run -it -d --name j3 -v j3:/home/soft --net=host java#进入j1容器docker exec -it j3 bash#启动Java项目nohup java -jar /home/soft/renren-fast.jar</code></pre><h3 id="4-安装-Nginx-镜像"><a href="#4-安装-Nginx-镜像" class="headerlink" title="4. 安装 Nginx 镜像"></a>4. 安装 Nginx 镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull nginx</code></pre><h3 id="5-创建-Nginx-容器，配置负载均衡"><a href="#5-创建-Nginx-容器，配置负载均衡" class="headerlink" title="5. 创建 Nginx 容器，配置负载均衡"></a>5. 创建 Nginx 容器，配置负载均衡</h3><p>宿主机上/home/n1/nginx.conf 配置文件内容如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user</span> <span class="token attr-value"> nginx;</span><span class="token attr-name">worker_processes</span> <span class="token attr-value"> 1;</span><span class="token attr-name">error_log</span> <span class="token attr-value"> /var/log/nginx/error.log warn;</span><span class="token attr-name">pid</span> <span class="token attr-value">       /var/run/nginx.pid;</span><span class="token attr-name">events</span> <span class="token attr-value">{</span><span class="token attr-name">   worker_connections</span> <span class="token attr-value"> 1024;</span>}<span class="token attr-name">http</span> <span class="token attr-value">{</span><span class="token attr-name">   include</span> <span class="token attr-value">      /etc/nginx/mime.types;</span><span class="token attr-name">   default_type</span> <span class="token attr-value"> application/octet-stream;</span><span class="token attr-name">   log_format</span> <span class="token attr-value"> main  '$remote_addr - $remote_user [$time_local] "$request" '</span><span class="token attr-name">                     '$status</span> <span class="token attr-value">$body_bytes_sent "$http_referer" '</span><span class="token attr-name">                     '"$http_user_agent"</span> <span class="token attr-value">"$http_x_forwarded_for"';</span><span class="token attr-name">   access_log</span> <span class="token attr-value"> /var/log/nginx/access.log  main;</span><span class="token attr-name">   sendfile</span> <span class="token attr-value">       on;</span><span class="token comment" spellcheck="true">   #tcp_nopush     on;</span><span class="token attr-name">   keepalive_timeout</span> <span class="token attr-value"> 65;</span><span class="token comment" spellcheck="true">   #gzip  on;</span><span class="token attr-name">   proxy_redirect</span> <span class="token attr-value">         off;</span><span class="token attr-name">   proxy_set_header</span> <span class="token attr-value">       Host $host;</span><span class="token attr-name">   proxy_set_header</span> <span class="token attr-value">       X-Real-IP $remote_addr;</span><span class="token attr-name">   proxy_set_header</span> <span class="token attr-value">       X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token attr-name">   client_max_body_size</span> <span class="token attr-value">   10m;</span><span class="token attr-name">   client_body_buffer_size</span> <span class="token attr-value">  128k;</span><span class="token attr-name">   proxy_connect_timeout</span> <span class="token attr-value">  5s;</span><span class="token attr-name">   proxy_send_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">   proxy_read_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">   proxy_buffer_size</span> <span class="token attr-value">       4k;</span><span class="token attr-name">   proxy_buffers</span> <span class="token attr-value">          4 32k;</span><span class="token attr-name">   proxy_busy_buffers_size</span> <span class="token attr-value"> 64k;</span><span class="token attr-name">   proxy_temp_file_write_size</span> <span class="token attr-value">64k;</span><span class="token attr-name">   upstream</span> <span class="token attr-value">tomcat {</span><span class="token attr-name">       server</span> <span class="token attr-value">192.168.99.104:6001;</span><span class="token attr-name">       server</span> <span class="token attr-value">192.168.99.104:6002;</span><span class="token attr-name">       server</span> <span class="token attr-value">192.168.99.104:6003;</span>   }<span class="token attr-name">   server</span> <span class="token attr-value">{</span><span class="token attr-name">       listen</span> <span class="token attr-value">      6101;</span><span class="token attr-name">       server_name</span> <span class="token attr-value"> 192.168.99.104;</span><span class="token attr-name">       location</span> <span class="token attr-value">/ {</span><span class="token attr-name">           proxy_pass</span> <span class="token attr-value">  http://tomcat;</span><span class="token attr-name">           index</span> <span class="token attr-value"> index.html index.htm;</span>       }   }}</code></pre><p><strong>创建第 1 个 Nginx 节点</strong></p><pre class=" language-shell"><code class="language-shell">docker run -it -d --name n1 -v /home/n1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre><p><strong>宿主机上/home/n2/nginx.conf 配置文件内容如下：</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user</span> <span class="token attr-value"> nginx;</span><span class="token attr-name">worker_processes</span> <span class="token attr-value"> 1;</span><span class="token attr-name">error_log</span> <span class="token attr-value"> /var/log/nginx/error.log warn;</span><span class="token attr-name">pid</span> <span class="token attr-value">       /var/run/nginx.pid;</span><span class="token attr-name">events</span> <span class="token attr-value">{</span><span class="token attr-name">   worker_connections</span> <span class="token attr-value"> 1024;</span>}<span class="token attr-name">http</span> <span class="token attr-value">{</span><span class="token attr-name">   include</span> <span class="token attr-value">      /etc/nginx/mime.types;</span><span class="token attr-name">   default_type</span> <span class="token attr-value"> application/octet-stream;</span><span class="token attr-name">   log_format</span> <span class="token attr-value"> main  '$remote_addr - $remote_user [$time_local] "$request" '</span><span class="token attr-name">                     '$status</span> <span class="token attr-value">$body_bytes_sent "$http_referer" '</span><span class="token attr-name">                     '"$http_user_agent"</span> <span class="token attr-value">"$http_x_forwarded_for"';</span><span class="token attr-name">   access_log</span> <span class="token attr-value"> /var/log/nginx/access.log  main;</span><span class="token attr-name">   sendfile</span> <span class="token attr-value">       on;</span><span class="token comment" spellcheck="true">   #tcp_nopush     on;</span><span class="token attr-name">   keepalive_timeout</span> <span class="token attr-value"> 65;</span><span class="token comment" spellcheck="true">   #gzip  on;</span><span class="token attr-name">   proxy_redirect</span> <span class="token attr-value">         off;</span><span class="token attr-name">   proxy_set_header</span> <span class="token attr-value">       Host $host;</span><span class="token attr-name">   proxy_set_header</span> <span class="token attr-value">       X-Real-IP $remote_addr;</span><span class="token attr-name">   proxy_set_header</span> <span class="token attr-value">       X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token attr-name">   client_max_body_size</span> <span class="token attr-value">   10m;</span><span class="token attr-name">   client_body_buffer_size</span> <span class="token attr-value">  128k;</span><span class="token attr-name">   proxy_connect_timeout</span> <span class="token attr-value">  5s;</span><span class="token attr-name">   proxy_send_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">   proxy_read_timeout</span> <span class="token attr-value">     5s;</span><span class="token attr-name">   proxy_buffer_size</span> <span class="token attr-value">       4k;</span><span class="token attr-name">   proxy_buffers</span> <span class="token attr-value">          4 32k;</span><span class="token attr-name">   proxy_busy_buffers_size</span> <span class="token attr-value"> 64k;</span><span class="token attr-name">   proxy_temp_file_write_size</span> <span class="token attr-value">64k;</span><span class="token attr-name">   upstream</span> <span class="token attr-value">tomcat {</span><span class="token attr-name">       server</span> <span class="token attr-value">192.168.99.104:6001;</span><span class="token attr-name">       server</span> <span class="token attr-value">192.168.99.104:6002;</span><span class="token attr-name">       server</span> <span class="token attr-value">192.168.99.104:6003;</span>   }<span class="token attr-name">   server</span> <span class="token attr-value">{</span><span class="token attr-name">       listen</span> <span class="token attr-value">      6102;</span><span class="token attr-name">       server_name</span> <span class="token attr-value"> 192.168.99.104;</span><span class="token attr-name">       location</span> <span class="token attr-value">/ {</span><span class="token attr-name">           proxy_pass</span> <span class="token attr-value">  http://tomcat;</span><span class="token attr-name">           index</span> <span class="token attr-value"> index.html index.htm;</span>       }   }}</code></pre><p><strong>创建第 2 个 Nginx 节点</strong></p><pre class=" language-shell"><code class="language-shell">docker run -it -d --name n2 -v /home/n2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre><h3 id="6-在-Nginx-容器安装-Keepalived"><a href="#6-在-Nginx-容器安装-Keepalived" class="headerlink" title="6. 在 Nginx 容器安装 Keepalived"></a>6. 在 Nginx 容器安装 Keepalived</h3><pre class=" language-shell"><code class="language-shell">#进入n1节点docker exec -it n1 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre><code>vrrp_instance VI_1 {   state MASTER   interface ens33   virtual_router_id 51   priority 100   advert_int 1   authentication {       auth_type PASS       auth_pass 123456   }   virtual_ipaddress {       192.168.99.151   }}virtual_server 192.168.99.151 6201 {   delay_loop 3   lb_algo rr   lb_kind NAT   persistence_timeout 50   protocol TCP   real_server 192.168.99.104 6101 {       weight 1   }}</code></pre><pre class=" language-shell"><code class="language-shell">#进入n1节点docker exec -it n2 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {   state MASTER   interface ens33   virtual_router_id 51   priority 100   advert_int 1   authentication {       auth_type PASS       auth_pass 123456   }   virtual_ipaddress {       192.168.99.151   }}virtual_server 192.168.99.151 6201 {   delay_loop 3   lb_algo rr   lb_kind NAT   persistence_timeout 50   protocol TCP   real_server 192.168.99.104 6102 {       weight 1   }}</code></pre><h2 id="打包部署前端项目"><a href="#打包部署前端项目" class="headerlink" title="打包部署前端项目"></a>打包部署前端项目</h2><h3 id="1-在前端项目路径下执行打包指令"><a href="#1-在前端项目路径下执行打包指令" class="headerlink" title="1. 在前端项目路径下执行打包指令"></a>1. 在前端项目路径下执行打包指令</h3><pre class=" language-shell"><code class="language-shell">npm run build</code></pre><h3 id="2-build-目录的文件拷贝到宿主机的-home-fn1-renren-vue、-home-fn2-renren-vue、-home-fn3-renren-vue-的目录下面"><a href="#2-build-目录的文件拷贝到宿主机的-home-fn1-renren-vue、-home-fn2-renren-vue、-home-fn3-renren-vue-的目录下面" class="headerlink" title="2. build 目录的文件拷贝到宿主机的/home/fn1/renren-vue、/home/fn2/renren-vue、/home/fn3/renren-vue 的目录下面"></a>2. build 目录的文件拷贝到宿主机的/home/fn1/renren-vue、/home/fn2/renren-vue、/home/fn3/renren-vue 的目录下面</h3><h3 id="3-创建-3-节点的-Nginx，部署前端项目"><a href="#3-创建-3-节点的-Nginx，部署前端项目" class="headerlink" title="3. 创建 3 节点的 Nginx，部署前端项目"></a>3. 创建 3 节点的 Nginx，部署前端项目</h3><p>宿主机/home/fn1/nginx.conf 的配置文件</p><pre><code>user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {   worker_connections  1024;}http {   include       /etc/nginx/mime.types;   default_type  application/octet-stream;   log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                     &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                     &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;   access_log  /var/log/nginx/access.log  main;   sendfile        on;   #tcp_nopush     on;   keepalive_timeout  65;   #gzip  on;   proxy_redirect          off;   proxy_set_header        Host $host;   proxy_set_header        X-Real-IP $remote_addr;   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;   client_max_body_size    10m;   client_body_buffer_size   128k;   proxy_connect_timeout   5s;   proxy_send_timeout      5s;   proxy_read_timeout      5s;   proxy_buffer_size        4k;   proxy_buffers           4 32k;   proxy_busy_buffers_size  64k;   proxy_temp_file_write_size 64k;   server {       listen 6501;       server_name  192.168.99.104;       location  /  {           root  /home/fn1/renren-vue;           index  index.html;       }   }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动第fn1节点docker run -it -d --name fn1 -v /home/fn1/nginx.conf:/etc/nginx/nginx.conf -v /home/fn1/renren-vue:/home/fn1/renren-vue --privileged --net=host nginx</code></pre><p>宿主机/home/fn2/nginx.conf 的配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {   worker_connections  1024;}http {   include       /etc/nginx/mime.types;   default_type  application/octet-stream;   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                     '$status $body_bytes_sent "$http_referer" '                     '"$http_user_agent" "$http_x_forwarded_for"';   access_log  /var/log/nginx/access.log  main;   sendfile        on;   #tcp_nopush     on;   keepalive_timeout  65;   #gzip  on;   proxy_redirect          off;   proxy_set_header        Host $host;   proxy_set_header        X-Real-IP $remote_addr;   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;   client_max_body_size    10m;   client_body_buffer_size   128k;   proxy_connect_timeout   5s;   proxy_send_timeout      5s;   proxy_read_timeout      5s;   proxy_buffer_size        4k;   proxy_buffers           4 32k;   proxy_busy_buffers_size  64k;   proxy_temp_file_write_size 64k;   server {       listen 6502;       server_name  192.168.99.104;       location  /  {           root  /home/fn2/renren-vue;           index  index.html;       }   }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动第fn2节点docker run -it -d --name fn2 -v /home/fn2/nginx.conf:/etc/nginx/nginx.conf -v /home/fn2/renren-vue:/home/fn2/renren-vue --privileged --net=host nginx</code></pre><p>宿主机/home/fn3/nginx.conf 的配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {   worker_connections  1024;}http {   include       /etc/nginx/mime.types;   default_type  application/octet-stream;   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                     '$status $body_bytes_sent "$http_referer" '                     '"$http_user_agent" "$http_x_forwarded_for"';   access_log  /var/log/nginx/access.log  main;   sendfile        on;   #tcp_nopush     on;   keepalive_timeout  65;   #gzip  on;   proxy_redirect          off;   proxy_set_header        Host $host;   proxy_set_header        X-Real-IP $remote_addr;   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;   client_max_body_size    10m;   client_body_buffer_size   128k;   proxy_connect_timeout   5s;   proxy_send_timeout      5s;   proxy_read_timeout      5s;   proxy_buffer_size        4k;   proxy_buffers           4 32k;   proxy_busy_buffers_size  64k;   proxy_temp_file_write_size 64k;   server {       listen 6503;       server_name  192.168.99.104;       location  /  {           root  /home/fn3/renren-vue;           index  index.html;       }   }}</code></pre><p>启动 fn3 节点</p><pre class=" language-shell"><code class="language-shell">#启动第fn3节点docker run -it -d --name fn3 -v /home/fn3/nginx.conf:/etc/nginx/nginx.conf -v /home/fn3/renren-vue:/home/fn3/renren-vue --privileged --net=host nginx</code></pre><h3 id="4-配置负载均衡"><a href="#4-配置负载均衡" class="headerlink" title="4. 配置负载均衡"></a>4. 配置负载均衡</h3><p>宿主机/home/ff1/nginx.conf 配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {   worker_connections  1024;}http {   include       /etc/nginx/mime.types;   default_type  application/octet-stream;   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                     '$status $body_bytes_sent "$http_referer" '                     '"$http_user_agent" "$http_x_forwarded_for"';   access_log  /var/log/nginx/access.log  main;   sendfile        on;   #tcp_nopush     on;   keepalive_timeout  65;   #gzip  on;   proxy_redirect          off;   proxy_set_header        Host $host;   proxy_set_header        X-Real-IP $remote_addr;   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;   client_max_body_size    10m;   client_body_buffer_size   128k;   proxy_connect_timeout   5s;   proxy_send_timeout      5s;   proxy_read_timeout      5s;   proxy_buffer_size        4k;   proxy_buffers           4 32k;   proxy_busy_buffers_size  64k;   proxy_temp_file_write_size 64k;   upstream fn {       server 192.168.99.104:6501;       server 192.168.99.104:6502;       server 192.168.99.104:6503;   }   server {       listen       6601;       server_name  192.168.99.104;       location / {           proxy_pass   http://fn;           index  index.html index.htm;       }   }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动ff1节点docker run -it -d --name ff1 -v /home/ff1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre><p>宿主机/home/ff2/nginx.conf 配置文件</p><pre class=" language-shell"><code class="language-shell">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events {   worker_connections  1024;}http {   include       /etc/nginx/mime.types;   default_type  application/octet-stream;   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                     '$status $body_bytes_sent "$http_referer" '                     '"$http_user_agent" "$http_x_forwarded_for"';   access_log  /var/log/nginx/access.log  main;   sendfile        on;   #tcp_nopush     on;   keepalive_timeout  65;   #gzip  on;   proxy_redirect          off;   proxy_set_header        Host $host;   proxy_set_header        X-Real-IP $remote_addr;   proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;   client_max_body_size    10m;   client_body_buffer_size   128k;   proxy_connect_timeout   5s;   proxy_send_timeout      5s;   proxy_read_timeout      5s;   proxy_buffer_size        4k;   proxy_buffers           4 32k;   proxy_busy_buffers_size  64k;   proxy_temp_file_write_size 64k;   upstream fn {       server 192.168.99.104:6501;       server 192.168.99.104:6502;       server 192.168.99.104:6503;   }   server {       listen       6602;       server_name  192.168.99.104;       location / {           proxy_pass   http://fn;           index  index.html index.htm;       }   }}</code></pre><pre class=" language-shell"><code class="language-shell">#启动ff2节点docker run -it -d --name ff2 -v /home/ff2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</code></pre><h3 id="5-配置双机热备"><a href="#5-配置双机热备" class="headerlink" title="5. 配置双机热备"></a>5. 配置双机热备</h3><pre class=" language-shell"><code class="language-shell">#进入ff1节点docker exec -it ff1 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {   state MASTER   interface ens33   virtual_router_id 52   priority 100   advert_int 1   authentication {       auth_type PASS       auth_pass 123456   }   virtual_ipaddress {       192.168.99.152   }}virtual_server 192.168.99.151 6701 {   delay_loop 3   lb_algo rr   lb_kind NAT   persistence_timeout 50   protocol TCP   real_server 192.168.99.104 6601 {       weight 1   }}</code></pre><pre class=" language-shell"><code class="language-shell">#进入ff1节点docker exec -it ff2 bash#更新软件包apt-get update#安装VIMapt-get install vim#安装Keepalivedapt-get install keepalived#编辑Keepalived配置文件(如下)vim /etc/keepalived/keepalived.conf#启动Keepalivedservice keepalived start</code></pre><pre class=" language-shell"><code class="language-shell">vrrp_instance VI_1 {   state MASTER   interface ens33   virtual_router_id 52   priority 100   advert_int 1   authentication {       auth_type PASS       auth_pass 123456   }   virtual_ipaddress {       192.168.99.152   }}virtual_server 192.168.99.151 6701 {   delay_loop 3   lb_algo rr   lb_kind NAT   persistence_timeout 50   protocol TCP   real_server 192.168.99.104 6602 {       weight 1   }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-虚拟机常用命令&quot;&gt;&lt;a href=&quot;#Docker-虚拟机常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker 虚拟机常用命令&quot;&gt;&lt;/a&gt;Docker 虚拟机常用命令&lt;/h2&gt;&lt;h3 id=&quot;1-先更新软件包&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Docker" scheme="http://coder.liusixin.cn/tags/Docker/"/>
    
      <category term="微服务" scheme="http://coder.liusixin.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Eslint 规则总结</title>
    <link href="http://coder.liusixin.cn/posts/ed5f9f50/"/>
    <id>http://coder.liusixin.cn/posts/ed5f9f50/</id>
    <published>2018-03-27T03:26:33.000Z</published>
    <updated>2018-03-27T03:26:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ESLint 主要有以下特点：</strong></p><ul><li>默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移；</li><li>规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；</li><li>包含代码风格检测的规则（可以丢掉 JSCS 了）；</li><li>支持插件扩展、自定义规则。</li></ul><p>Use /_ eslint-disable _/ to ignore all warnings in a file.</p><p>有一种万能方法，就是在报错的 JS 文件中第一行写上</p><p><code>/* eslint-disable */</code></p><p><strong>配置</strong></p><p>可以通过以下三种方式配置 ESLint:</p><ol><li>使用 .eslintrc 文件（支持 JSON 和 YAML 两种语法）；</li><li>在 package.json 中添加 eslintConfig 配置块；直接在代码文件中定义。</li><li>以下是.eslintrc 文件示例和解释：为了方便查看，特记录如下,需要用的规则。</li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"commonjs"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ecmaFeatures"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      // lambda表达式      <span class="token property">"arrowFunctions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // 解构赋值      <span class="token property">"destructuring"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // class      <span class="token property">"classes"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/function#函数参数的默认值      <span class="token property">"defaultParams"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // 块级作用域，允许使用let const      <span class="token property">"blockBindings"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // 允许使用模块，模块内默认严格模式      <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // 允许字面量定义对象时，用表达式做属性名      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/object#属性名表达式      <span class="token property">"objectLiteralComputedProperties"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // 允许对象字面量方法名简写      /*var o = <span class="token punctuation">{</span>        method(<span class="token punctuation">)</span> <span class="token punctuation">{</span>          return <span class="token string">"Hello!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     等同于     var o = <span class="token punctuation">{</span>       method<span class="token operator">:</span> function(<span class="token punctuation">)</span> <span class="token punctuation">{</span>         return <span class="token string">"Hello!"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>    */      <span class="token property">"objectLiteralShorthandMethods"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      /*      对象字面量属性名简写      var foo = 'bar'<span class="token punctuation">;</span>      var baz = <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>      baz // <span class="token punctuation">{</span>foo<span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">}</span>      // 等同于      var baz = <span class="token punctuation">{</span>foo<span class="token operator">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span>    */      <span class="token property">"objectLiteralShorthandProperties"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/function#rest参数      <span class="token property">"restParams"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/function#扩展运算符      <span class="token property">"spread"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/iterator#for---of循环      <span class="token property">"forOf"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/generator      <span class="token property">"generators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/string#模板字符串      <span class="token property">"templateStrings"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"superInFunctions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      // http<span class="token operator">:</span>//es6.ruanyifeng.com/#docs/object#对象的扩展运算符      <span class="token property">"experimentalObjectRestSpread"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      // 定义对象的set存取器属性时，强制定义get      <span class="token property">"accessor-pairs"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      // 指定数组的元素之间要以空格隔开(<span class="token punctuation">,</span>后面<span class="token punctuation">)</span>， never参数：<span class="token punctuation">[</span> 之前和 <span class="token punctuation">]</span> 之后不能带空格，always参数：<span class="token punctuation">[</span> 之前和 <span class="token punctuation">]</span> 之后必须带空格      <span class="token property">"array-bracket-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 在块级作用域外访问块内定义的变量是否报错提示      <span class="token property">"block-scoped-var"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      // if while function 后面的<span class="token punctuation">{</span>必须与if在同一行，java风格。      <span class="token property">"brace-style"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"1tbs"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"allowSingleLine"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 双峰驼命名格式      <span class="token property">"camelcase"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      // 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号<span class="token punctuation">,</span> always参数：必须带末尾的逗号，      // always-multiline：多行模式必须带逗号，单行模式不能带逗号      <span class="token property">"comma-dangle"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 控制逗号前后的空格      <span class="token property">"comma-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"before"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token property">"after"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 控制逗号在行尾出现还是在行首出现      // http<span class="token operator">:</span>//eslint.org/docs/rules/comma-style      <span class="token property">"comma-style"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"last"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 圈复杂度      <span class="token property">"complexity"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 以方括号取对象属性时，<span class="token punctuation">[</span> 后面和 <span class="token punctuation">]</span> 前面是否需要空格<span class="token punctuation">,</span> 可选参数 never<span class="token punctuation">,</span> always      <span class="token property">"computed-property-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 强制方法必须返回值，TypeScript强类型，不配置      <span class="token property">"consistent-return"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      // 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了      // e.g <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"that"</span><span class="token punctuation">]</span> 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值      <span class="token property">"consistent-this"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      // 强制在子类构造函数中用super(<span class="token punctuation">)</span>调用父类构造函数，TypeScrip的编译器也会提示      <span class="token property">"constructor-super"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      // if else while for do后面的代码块是否需要<span class="token punctuation">{</span> <span class="token punctuation">}</span>包围，参数：      //    multi  只有块中有多行语句时才需要<span class="token punctuation">{</span> <span class="token punctuation">}</span>包围      //    multi-line  只有块中有多行语句时才需要<span class="token punctuation">{</span> <span class="token punctuation">}</span>包围<span class="token punctuation">,</span> 但是块中的执行语句只有一行时，      //                   块中的语句只能跟和if语句在同一行。if (foo<span class="token punctuation">)</span> foo++<span class="token punctuation">;</span> else doSomething(<span class="token punctuation">)</span><span class="token punctuation">;</span>      //    multi-or-nest 只有块中有多行语句时才需要<span class="token punctuation">{</span> <span class="token punctuation">}</span>包围<span class="token punctuation">,</span> 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面      //    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"multi"</span><span class="token punctuation">,</span> <span class="token string">"consistent"</span><span class="token punctuation">]</span> 保持前后语句的<span class="token punctuation">{</span> <span class="token punctuation">}</span>一致      //    default<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">]</span> 全都需要<span class="token punctuation">{</span> <span class="token punctuation">}</span>包围      <span class="token property">"curly"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // switch语句强制default分支，也可添加 // no default 注释取消此次警告      <span class="token property">"default-case"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      // 强制object.key 中 . 的位置，参数<span class="token operator">:</span>      //      property，'.'号应与属性在同一行      //      object<span class="token punctuation">,</span> '.' 号应与对象名在同一行      <span class="token property">"dot-location"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"property"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 强制使用.号取属性      //    参数： allowKeywords：<span class="token boolean">true</span> 使用保留字做属性名时，只能使用.方式取属性      //                          <span class="token boolean">false</span> 使用保留字做属性名时<span class="token punctuation">,</span> 只能使用<span class="token punctuation">[</span><span class="token punctuation">]</span>方式取属性 e.g <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"allowKeywords"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span>      //           allowPattern<span class="token operator">:</span>  当属性名匹配提供的正则表达式时，允许使用<span class="token punctuation">[</span><span class="token punctuation">]</span>方式取值<span class="token punctuation">,</span>否则只能用.号取值 e.g <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"allowPattern"</span><span class="token operator">:</span> <span class="token string">"^[a-z]+(_[a-z]+)+$"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token property">"dot-notation"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"allowKeywords"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 文件末尾强制换行      <span class="token property">"eol-last"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      // 使用 === 替代 ==      <span class="token property">"eqeqeq"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"allow-null"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      // 方法表达式是否需要命名      <span class="token property">"func-names"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      // 方法定义风格，参数：      //    declaration<span class="token operator">:</span> 强制使用方法声明的方式，function f(<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> e.g <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"declaration"</span><span class="token punctuation">]</span>      //    expression：强制使用方法表达式的方式，var f = function(<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  e.g <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"expression"</span><span class="token punctuation">]</span>      //    allowArrowFunctions<span class="token operator">:</span> declaration风格中允许箭头函数。 e.g <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"declaration"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"allowArrowFunctions"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token property">"func-style"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"no-alert"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用alert confirm prompt<span class="token property">"no-array-constructor"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用数组构造器<span class="token property">"no-bitwise"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用按位运算符<span class="token property">"no-caller"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//禁止使用arguments.caller或arguments.callee<span class="token property">"no-catch-shadow"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止catch子句参数与外部作用域变量同名<span class="token property">"no-class-assign"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止给类赋值<span class="token property">"no-cond-assign"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止在条件表达式中使用赋值语句<span class="token property">"no-console"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用console<span class="token property">"no-const-assign"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止修改const声明的变量<span class="token property">"no-constant-condition"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止在条件中使用常量表达式 if(<span class="token boolean">true</span><span class="token punctuation">)</span> if(<span class="token number">1</span><span class="token punctuation">)</span><span class="token property">"no-continue"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用continue<span class="token property">"no-control-regex"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止在正则表达式中使用控制字符<span class="token property">"no-debugger"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用debugger<span class="token property">"no-delete-var"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//不能对var声明的变量使用delete操作符<span class="token property">"no-div-regex"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//不能使用看起来像除法的正则表达式/=foo/<span class="token property">"no-dupe-keys"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//在创建对象字面量时不允许键重复 <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token property">"no-dupe-args"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//函数参数不能重复<span class="token property">"no-duplicate-case"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//switch中的case标签不能重复<span class="token property">"no-else-return"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//如果if语句里面有return<span class="token punctuation">,</span>后面不能跟else语句<span class="token property">"no-empty"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//块语句中的内容不能为空<span class="token property">"no-empty-character-class"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//正则表达式中的<span class="token punctuation">[</span><span class="token punctuation">]</span>内容不能为空<span class="token property">"no-empty-label"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用空label<span class="token property">"no-eq-null"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止对<span class="token null">null</span>使用==或!=运算符<span class="token property">"no-eval"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//禁止使用eval<span class="token property">"no-ex-assign"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止给catch语句中的异常参数赋值<span class="token property">"no-extend-native"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止扩展native对象<span class="token property">"no-extra-bind"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止不必要的函数绑定<span class="token property">"no-extra-boolean-cast"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止不必要的bool转换<span class="token property">"no-extra-parens"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止非必要的括号<span class="token property">"no-extra-semi"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止多余的冒号<span class="token property">"no-fallthrough"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//禁止switch穿透<span class="token property">"no-floating-decimal"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止省略浮点数中的<span class="token number">0</span> .<span class="token number">5</span> <span class="token number">3</span>.<span class="token property">"no-func-assign"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止重复的函数声明<span class="token property">"no-implicit-coercion"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//禁止隐式转换<span class="token property">"no-implied-eval"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用隐式eval<span class="token property">"no-inline-comments"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止行内备注<span class="token property">"no-inner-declarations"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"functions"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//禁止在块语句中使用声明（变量或函数）<span class="token property">"no-invalid-regexp"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止无效的正则表达式<span class="token property">"no-invalid-this"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止无效的this，只能用在构造器，类，对象字面量<span class="token property">"no-irregular-whitespace"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//不能有不规则的空格<span class="token property">"no-iterator"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用__iterator__ 属性<span class="token property">"no-label-var"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//label名不能与var声明的变量名相同<span class="token property">"no-labels"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止标签声明<span class="token property">"no-lone-blocks"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止不必要的嵌套块<span class="token property">"no-lonely-if"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止else语句内只有if语句<span class="token property">"no-loop-func"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）<span class="token property">"no-mixed-requires"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//声明时不能混用声明类型<span class="token property">"no-mixed-spaces-and-tabs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//禁止混用tab和空格<span class="token property">"linebreak-style"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"windows"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//换行风格<span class="token property">"no-multi-spaces"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//不能用多余的空格<span class="token property">"no-multi-str"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//字符串不能用\换行<span class="token property">"no-multiple-empty-lines"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"max"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//空行最多不能超过<span class="token number">2</span>行<span class="token property">"no-native-reassign"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//不能重写native对象<span class="token property">"no-negated-in-lhs"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//in 操作符的左边不能有!<span class="token property">"no-nested-ternary"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用嵌套的三目运算<span class="token property">"no-new"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//禁止在使用new构造一个实例后不赋值<span class="token property">"no-new-func"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//禁止使用new Function<span class="token property">"no-new-object"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用new Object(<span class="token punctuation">)</span><span class="token property">"no-new-require"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用new require<span class="token property">"no-new-wrappers"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用new创建包装实例，new String new Boolean new Number<span class="token property">"no-obj-calls"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//不能调用内置的全局对象，比如Math(<span class="token punctuation">)</span> JSON(<span class="token punctuation">)</span><span class="token property">"no-octal"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用八进制数字<span class="token property">"no-octal-escape"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用八进制转义序列<span class="token property">"no-param-reassign"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止给参数重新赋值<span class="token property">"no-path-concat"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//node中不能使用__dirname或__filename做路径拼接<span class="token property">"no-plusplus"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用++，--<span class="token property">"no-process-env"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用process.env<span class="token property">"no-process-exit"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用process.exit(<span class="token punctuation">)</span><span class="token property">"no-proto"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止使用__proto__属性<span class="token property">"no-redeclare"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止重复声明变量<span class="token property">"no-regex-spaces"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止在正则表达式字面量中使用多个空格 /foo bar/<span class="token property">"no-restricted-modules"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//如果禁用了指定模块，使用就会报错<span class="token property">"no-return-assign"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//return 语句中不能有赋值表达式<span class="token property">"no-script-url"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用javascript<span class="token operator">:</span>void(<span class="token number">0</span><span class="token punctuation">)</span><span class="token property">"no-self-compare"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//不能比较自身<span class="token property">"no-sequences"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用逗号运算符<span class="token property">"no-shadow"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名<span class="token property">"no-shadow-restricted-names"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//严格模式中规定的限制标识符不能作为声明时的变量名使用<span class="token property">"no-spaced-func"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//函数调用时 函数名与(<span class="token punctuation">)</span>之间不能有空格<span class="token property">"no-sparse-arrays"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止稀疏数组， <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token property">"no-sync"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//nodejs 禁止同步方法<span class="token property">"no-ternary"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁止使用三目运算符<span class="token property">"no-trailing-spaces"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//一行结束后面不要有空格<span class="token property">"no-this-before-super"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//在调用super(<span class="token punctuation">)</span>之前不能使用this或super<span class="token property">"no-throw-literal"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止抛出字面量错误 throw <span class="token string">"error"</span><span class="token punctuation">;</span><span class="token property">"no-undef"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//不能有未定义的变量<span class="token property">"no-undef-init"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//变量初始化时不能直接给它赋值为undefined<span class="token property">"no-undefined"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//不能使用undefined<span class="token property">"no-unexpected-multiline"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//避免多行表达式<span class="token property">"no-underscore-dangle"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//标识符不能以_开头或结尾<span class="token property">"no-unneeded-ternary"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止不必要的嵌套 var isYes = answer === <span class="token number">1</span> ? <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token property">"no-unreachable"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//不能有无法执行的代码<span class="token property">"no-unused-expressions"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止无用的表达式<span class="token property">"no-unused-vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"vars"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span> <span class="token property">"args"</span><span class="token operator">:</span> <span class="token string">"after-used"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//不能有声明后未被使用的变量或参数<span class="token property">"no-use-before-define"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//未定义前不能使用<span class="token property">"no-useless-call"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止不必要的call和apply<span class="token property">"no-void"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁用void操作符<span class="token property">"no-var"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//禁用var，用let和const代替<span class="token property">"no-warning-comments"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"todo"</span><span class="token punctuation">,</span> <span class="token string">"fixme"</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"start"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//不能有警告备注<span class="token property">"no-with"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁用with<span class="token property">"array-bracket-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//是否允许非空数组里面有多余的空格<span class="token property">"arrow-parens"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//箭头函数用小括号括起来<span class="token property">"arrow-spacing"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//=>的前/后括号<span class="token property">"accessor-pairs"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//在对象中使用getter/setter<span class="token property">"block-scoped-var"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//块语句中使用var<span class="token property">"brace-style"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1tbs"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//大括号风格<span class="token property">"callback-return"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//避免多次调用回调什么的<span class="token property">"camelcase"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//强制驼峰法命名<span class="token property">"comma-dangle"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//对象字面量项尾不能有逗号<span class="token property">"comma-spacing"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//逗号前后的空格<span class="token property">"comma-style"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"last"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//逗号风格，换行时在行首还是行尾<span class="token property">"complexity"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//循环复杂度<span class="token property">"computed-property-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//是否允许计算后的键名什么的<span class="token property">"consistent-return"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//return 后面是否允许省略<span class="token property">"consistent-this"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"that"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//this别名<span class="token property">"constructor-super"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//非派生类不能调用super，派生类必须调用super<span class="token property">"curly"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//必须使用 if(<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 中的<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token property">"default-case"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//switch语句最后必须有default<span class="token property">"dot-location"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//对象访问符的位置，换行的时候在行首还是行尾<span class="token property">"dot-notation"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"allowKeywords"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//避免不必要的方括号<span class="token property">"eol-last"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//文件以单一的换行符结束<span class="token property">"eqeqeq"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//必须使用全等<span class="token property">"func-names"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//函数表达式必须有名字<span class="token property">"func-style"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"declaration"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//函数风格，规定只能使用函数声明/函数表达式<span class="token property">"generator-star-spacing"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//生成器函数*的前后空格<span class="token property">"guard-for-in"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//for in循环要用if语句过滤<span class="token property">"handle-callback-err"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//nodejs 处理错误<span class="token property">"id-length"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//变量名长度<span class="token property">"indent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//缩进风格<span class="token property">"init-declarations"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//声明时必须赋初值<span class="token property">"key-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"beforeColon"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token property">"afterColon"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//对象字面量中冒号的前后空格<span class="token property">"lines-around-comment"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//行前/行后备注<span class="token property">"max-depth"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//嵌套块深度<span class="token property">"max-len"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//字符串最大长度<span class="token property">"max-nested-callbacks"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//回调嵌套深度<span class="token property">"max-params"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//函数最多只能有<span class="token number">3</span>个参数<span class="token property">"max-statements"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//函数内最多有几个声明<span class="token property">"new-cap"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用<span class="token property">"new-parens"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//new时必须加小括号<span class="token property">"newline-after-var"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//变量声明后是否需要空一行<span class="token property">"object-curly-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//大括号内是否允许不必要的空格<span class="token property">"object-shorthand"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//强制对象字面量缩写语法<span class="token property">"one-var"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>//连续声明<span class="token property">"operator-assignment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//赋值运算符 += -=什么的<span class="token property">"operator-linebreak"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"after"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//换行时运算符在行尾还是行首<span class="token property">"padded-blocks"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//块语句内行首行尾是否要空行<span class="token property">"prefer-const"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//首选const<span class="token property">"prefer-spread"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//首选展开运算<span class="token property">"prefer-reflect"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//首选Reflect的方法<span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"single"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//引号类型 `` <span class="token string">""</span> ''<span class="token property">"quote-props"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//对象字面量中的属性名是否强制双引号<span class="token property">"radix"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//parseInt必须指定第二个参数<span class="token property">"id-match"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//命名检测<span class="token property">"require-yield"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//生成器函数必须有yield<span class="token property">"semi"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//语句强制分号结尾<span class="token property">"semi-spacing"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"before"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token property">"after"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//分号前后空格<span class="token property">"sort-vars"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//变量声明时排序<span class="token property">"space-after-keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//关键字后面是否要空一格<span class="token property">"space-before-blocks"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//不以新行开始的块<span class="token punctuation">{</span>前面要不要有空格<span class="token property">"space-before-function-paren"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//函数定义时括号前面要不要有空格<span class="token property">"space-in-parens"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//小括号里面要不要有空格<span class="token property">"space-infix-ops"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//中缀操作符周围要不要有空格<span class="token property">"space-return-throw-case"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//return throw case后面要不要加空格<span class="token property">"space-unary-ops"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"words"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">"nonwords"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//一元运算符的前/后要不要加空格<span class="token property">"spaced-comment"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//注释风格不要有空格什么的<span class="token property">"strict"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//使用严格模式<span class="token property">"use-isnan"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//禁止比较时使用NaN，只能用isNaN(<span class="token punctuation">)</span><span class="token property">"valid-jsdoc"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//jsdoc规则<span class="token property">"valid-typeof"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//必须使用合法的typeof的值<span class="token property">"vars-on-top"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>//var必须放在作用域顶部<span class="token property">"wrap-iife"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"inside"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>//立即执行函数表达式的小括号风格<span class="token property">"wrap-regex"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>//正则表达式字面量用小括号包起来<span class="token property">"yoda"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span>//禁止尤达条件  <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;ESLint 主要有以下特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移；&lt;/li&gt;
&lt;li&gt;规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Eslint" scheme="http://coder.liusixin.cn/tags/Eslint/"/>
    
  </entry>
  
  <entry>
    <title>跨浏览器的HTML5表单验证</title>
    <link href="http://coder.liusixin.cn/posts/ffc0eab3/"/>
    <id>http://coder.liusixin.cn/posts/ffc0eab3/</id>
    <published>2018-03-15T06:52:46.000Z</published>
    <updated>2018-03-15T06:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>表单验证通常采用的方法是用策略模式的思想， 把一个个验证规则封装成一个函数，如非空规则，最大长度规则等，不同的输入框选择某一个或者某几个规则进行验证。这样有它的好处，也有它的坏处。好处是每个规则是独立的，包括它的检验规则和出错提示信息，可以把它们封装在一起。坏处是当你写一个表单里面有 10 个 input, 每个 input 都有 3~4 个验证规则， 那你的 JS 至少得写 30 行代码用来添加验证规则， 这样代码看起来就有点冗长了。</p><p>其实 HTML5 增加了很多种类型的 input, 每个 input 还支持 <code>pattern/minlength/maxlength</code> 等规则的验证， 可以说几乎不用自己去写验证规则。使用 HTML5 的表单验证能够更加的方便快捷。但是每个浏览器在某些行为不一致， 再加上兼容性的原因， 大家都不太想用。其实这两个缺点是可以克服的。</p><p>使用 HTML5 的 input 有一个很大的优点， 就是手机上会根据不同的类型弹不同的键盘， 方便用户输入， 这一点你用什么策略模式都是无法做到的。</p><p>但是由于不同的浏览器对不合法输入提示文案不一致，样式也不一样，并且老的浏览器不兼容 (IE9 及以下），在生产环境中比较少看到有人用。</p><p>具体来说存在三个问题：</p><ul><li>输入框 blur 的时候不会触发检查，只有在点提交时才触发， 但是有一种场景是希望用户一旦离开这个输入框就对其输入进行检查；</li><li>提示控件的 UI 差异很大，safari 还不会触发提示控件，一些浏览器如 IE 会给非法的输入框添加一个红色的边框；</li><li>文案是写死的，并且不同浏览器的文案不一致，其中应该以 Chrome 的提示最好。</li></ul><h2 id="实现跨浏览器插件"><a href="#实现跨浏览器插件" class="headerlink" title="实现跨浏览器插件"></a>实现跨浏览器插件</h2><p>为解决这些问题，网上有一些插件，如 HTML5 Form, 做了跨浏览器的处理， 但是使用起来效果并不是十分让人满意， HTML5 Form 在 Safari 下面就失效了。 接下来我们就自己封装一个插件。</p><p>为了实现跨浏览器的一致性和使用的方便，达到了以下特点：</p><ol><li>统一 UI 和文案</li><li>支待异步验证</li><li>支持多重类型规则验证</li><li>能够中英文切换</li></ol><p>先来说一下怎么用这个插件，然后再分析怎么实现一个这样的插件。</p><h2 id="插件使用方法"><a href="#插件使用方法" class="headerlink" title="插件使用方法"></a>插件使用方法</h2><p><strong>1. 最简单的使用方法</strong></p><p>所有的 input 要写在 form 里面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sign-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>邮箱地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">data-t</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.{6,20}<span class="token punctuation">"</span></span> <span class="token attr-name">data-pm</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码要在6到20位之间<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>确认密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-pwd<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm-sign<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>定义了 input 的 <code>type=&quot;email&quot;</code> , 还要再写多 一个`data­-t=”email” 主要是因为 IE10 以下的浏览器会把不认识的 type 强制改成 text。</p><p>上面总共用到了类型、必填、正则、长度检验，出错信息放在了 <code>data-pm</code> 属性里面。 这比你手动一个个去添加规则要方便多了。有了上面的 HTML 结构之后， 只需要初始化插件就可以了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Form</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementByid</span><span class="token punctuation">(</span><span class="token string">'sign-up-form'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    errorMsgClass<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 错误提示桯的类名， 用于自定义样式</span>    errorinputClass<span class="token punctuation">:</span> <span class="token string">'invalid'</span> <span class="token comment" spellcheck="true">//input无教的类名， 用于自定义样式</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  submit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'表单验证成功， 准备提交'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 提交操作</span><span class="token punctuation">}</span></code></pre><p>执行 <code>new From</code> 的时候传了 3 个参数， 第一个是 form 的 DOM 元素， 第二个参数是验证规则的一些配置， 第三是验证成功的回调函数。 第二个参数 <code>checkOpt</code> 有两个属性 <code>errorMsgClass</code>和<code>errorInputClass</code> 用来自定义样式。</p><p><strong>2. 添加自定义检验</strong></p><p>有时候有些检验无法用 HTML5 的属性检验，这个时候需要添加自定义检验， 如上面的密码需要保证两次的输入一致，可以在<code>checkOpt</code>里面添加自定义验证</p><pre class=" language-js"><code class="language-js">checkOpt<span class="token punctuation">.</span>rule <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'confirm-pwd'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    check<span class="token punctuation">:</span> checkPwdIdentity<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 定义检验函数</span>    msg<span class="token punctuation">:</span> <span class="token string">'两次密码输入不一致'</span> <span class="token comment" spellcheck="true">// 出错提示信息</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkPwdIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'confirm-pwd'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>添加了一个 rule 属性，key 值为 input 的 name 属性，value 值包含一个自定义的检验函数和出错信息。</p><p><strong>3. 自定义异步检验</strong></p><p>有些数据需要向服务请求检验，如检验账户是否存在</p><pre class=" language-js"><code class="language-js">checkOpt<span class="token punctuation">.</span>rule<span class="token punctuation">.</span>account <span class="token operator">=</span> <span class="token punctuation">{</span>  check<span class="token punctuation">:</span> checkAccountExist<span class="token punctuation">,</span>  msg<span class="token punctuation">:</span> <span class="token string">'账户已存在！'</span><span class="token punctuation">,</span>  <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAccountExist</span><span class="token punctuation">(</span>failCallback<span class="token punctuation">,</span> successCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  util<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>    <span class="token string">'/register/hasUser'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      account<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果用户存在则调用failCallback, 让插件添加一个错误提示</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>isUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">failCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 成功则调用插件的成功回调函数</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在回调函数里面传进两个参数，如果检验失败则执行第一个参数，成功则执行第二个参数，为插件所用。</p><p><strong>4. 添加自定义类型出错提示</strong></p><p>不同类型的输入框给出不同类型的出错提示</p><pre class=" language-js"><code class="language-js">Form<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>validationMessage_cn <span class="token operator">=</span> <span class="token punctuation">{</span>  email<span class="token punctuation">:</span> <span class="token string">'无效的邮箱格式'</span><span class="token punctuation">,</span>  number<span class="token punctuation">:</span> <span class="token string">'无效的数字格式'</span><span class="token punctuation">,</span>  url<span class="token punctuation">:</span> <span class="token string">'无效的网址格式'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">'格式无效'</span><span class="token punctuation">,</span>  text<span class="token punctuation">:</span> <span class="token string">'格式无效'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>可以取消掉浏览器提供的文案， 用上面的默认文案，显示英文站的时候取消掉中文浏览器的中文提示：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果浏览器的语言不是中文的话， 就不要使用英文的文案了， 双语站时侯适用</span>checkOpt<span class="token punctuation">.</span>disableBrowserMsg <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>  navigator<span class="token punctuation">.</span>language <span class="token operator">||</span> navigator<span class="token punctuation">.</span>userLanguage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/cn/i</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以指定插件使用的语言</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 双语站切换时适用</span>checkOpt<span class="token punctuation">.</span>lang <span class="token operator">=</span> <span class="token string">'en'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者en</span></code></pre><h2 id="插件的实现"><a href="#插件的实现" class="headerlink" title="插件的实现"></a>插件的实现</h2><p>怎么实现这么一个方便快捷的表单验证插件呢？它的实现并不是很复杂，只是需要考虑很多细节。下面分析一些关键点和难点。</p><h3 id="1-为非-HTML5-浏览器添加-checkValidity-函数"><a href="#1-为非-HTML5-浏览器添加-checkValidity-函数" class="headerlink" title="1. 为非 HTML5 浏览器添加 checkValidity 函数"></a>1. 为非 HTML5 浏览器添加 checkValidity 函数</h3><p>如果没有 <code>checkValidity</code> 函数的话就给它添加一个， 相当于自行实现一个 HTML5 的 <code>checkValidity</code> 函数。 因为在后续的验证里面需要用到这个函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input<span class="token punctuation">.</span>checkValidity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  HTMLinputElement<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>checkValidity <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里根据不同的属性规则做检验， 如type/pattern/minlength, 代码略</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-添加错误提示"><a href="#2-添加错误提示" class="headerlink" title="2. 添加错误提示"></a>2. 添加错误提示</h3><p>重点是计算提示显示的位置</p><pre class=" language-js"><code class="language-js">Form<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addErrorMsg <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 根据input计算msg相对input的位置</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-异步检验的实现"><a href="#3-异步检验的实现" class="headerlink" title="3. 异步检验的实现"></a>3. 异步检验的实现</h3><p>异步检验的难点在于，什么时候执行 submit 回调。 解决方案是给每个 input 添加一个 hasCheck 属性，如果检查通过则设置为 true, 一旦 focus 了就设为 false, blur 则触发检查。只有所有的 input 都有了属性 hasCheck 为 true 时才能执行 submit 回调。 下面代码中的 <code>checkAsync</code> 的第二个参数 <code>needSubmit</code>, 点提交时设置成 true, 而 blur 验证则为 false, 用于控制检验成功后是否要提交表单。</p><p><strong>异步检验核心代码</strong></p><pre class=" language-js"><code class="language-js">Form<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>checkAsync <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> needSubmit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> input<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token keyword">var</span> rule <span class="token operator">=</span> input<span class="token punctuation">.</span>form<span class="token punctuation">.</span>Form<span class="token punctuation">.</span>checkOpt<span class="token punctuation">.</span>rule<span class="token punctuation">;</span>  rule<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'check'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>    input<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 检验失败回调函数</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> Form <span class="token operator">=</span> input<span class="token punctuation">.</span>form<span class="token punctuation">.</span>Form<span class="token punctuation">;</span>      Form<span class="token punctuation">.</span><span class="token function">addErrorMsg</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> Form<span class="token punctuation">.</span>checkOpt<span class="token punctuation">.</span>rule<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 检验成功回调函数</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      input<span class="token punctuation">.</span>hasCheck <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>needSubmit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        input<span class="token punctuation">.</span>form<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">tryCallSubmit</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>tryCallSubmit</code> 函数检查除 submit 外所有的 input 是否为 <code>hasCheck</code> 是 true, 如果有则执行 <code>submit callback</code>。</p><p>以上就是整个跨浏览器的 HTML5 表单验证插件的思想。 表单验证的实现可能有多种方式， 但是借助 HTML5 的特性做表单验证无疑会更简单，代码更少，用户体验更好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;表单验证通常采用的方法是用策略模式的思想， 把一个个验证规则封装成一个函数，如非空规则，最大长度规则等，不同的输入框选择某一个或者某几个规则
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="HTML5" scheme="http://coder.liusixin.cn/tags/HTML5/"/>
    
      <category term="插件" scheme="http://coder.liusixin.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Koa2 源码学习(二)</title>
    <link href="http://coder.liusixin.cn/posts/a73cd400/"/>
    <id>http://coder.liusixin.cn/posts/a73cd400/</id>
    <published>2018-03-05T11:42:12.000Z</published>
    <updated>2018-03-08T13:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>上文我们读了 koa 源码中的 application 模块，了解其核心实现原理，其中在</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span><span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码就引出了我们接下来分析的 <strong>context</strong> 模块，同样利用删减法。</p><h2 id="context-js"><a href="#context-js" class="headerlink" title="context.js"></a>context.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> proto <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> createError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> httpAssert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> delegate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'delegates'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> statuses <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'statuses'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token function">delegate</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">'response'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'attachment'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'redirect'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">)</span>  <span class="token operator">...</span><span class="token function">delegate</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'acceptsLanguages'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'acceptsEncodings'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'acceptsCharsets'</span><span class="token punctuation">)</span>  <span class="token operator">...</span></code></pre><p><a href="https://github.com/tj/node-delegates" rel="external nofollow noopener noreferrer" target="_blank">delegate</a> 把 response 和 request 下面的方法和属性都挂载到 proto 上，然后把它暴露给 application，这里的 proto 就是 context。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// delegator</span><span class="token keyword">function</span> <span class="token function">Delegator</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Delegator</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Delegator</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>proto <span class="token operator">=</span> proto<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>setters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>fluents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Delegator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>proto<span class="token punctuation">;</span>  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  proto<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>Delegator 函数传入 proto 和 target 并分别缓存，然后调用 method 方法，把所有的方法名 push 到 methods 数组里，同时对 proto 下每一个传入的方法名配置成一个函数，函数内部是具体目标对象的方法。详细源码请看<a href="https://github.com/tj/node-delegates" rel="external nofollow noopener noreferrer" target="_blank">node-delegates</a></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span><span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>app <span class="token operator">=</span> request<span class="token punctuation">.</span>app <span class="token operator">=</span> response<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把当前实例挂载</span>    context<span class="token punctuation">.</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>req <span class="token operator">=</span> response<span class="token punctuation">.</span>req <span class="token operator">=</span> req<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>res <span class="token operator">=</span> res<span class="token punctuation">;</span>    request<span class="token punctuation">.</span>ctx <span class="token operator">=</span> response<span class="token punctuation">.</span>ctx <span class="token operator">=</span> context<span class="token punctuation">;</span>    request<span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span>    response<span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>originalUrl <span class="token operator">=</span> request<span class="token punctuation">.</span>originalUrl <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>cookies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookies</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">{</span>      keys<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">,</span>      secure<span class="token punctuation">:</span> request<span class="token punctuation">.</span>secure    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span>ip <span class="token operator">=</span> request<span class="token punctuation">.</span>ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remoteAddress <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>accept <span class="token operator">=</span> request<span class="token punctuation">.</span>accept <span class="token operator">=</span> <span class="token function">accepts</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Object.create 传入了 context 暴露出的 proto，proto 作为指定的原型对象在它的原有基础上生成新的对象（context），同时 request 和 response 也利用 Object.create 创建一个新的对象并把它挂载到 context 上。这样，在 context 不仅能访问到 request response 内部的方法属性外还能访问它们自身。</p><p>然后 context，req，res 互相挂载，这样就能很便利的去访问他们内部的方法和属性。</p><blockquote><p>Object.create 解释看这里<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" rel="external nofollow noopener noreferrer" target="_blank">Object.create</a></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>content.js 主要就是提供了对 request 和 response 对象的方法与属性便捷访问能力。</p><h2 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// request.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">header</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">headers</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">url</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">href</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>从代码我们可以看到，request.js 封装了请求相关的属性以及方法，再把对象暴露给 application，通过 application.js 中的 createContext 方法，代理对应的 request 对象。</p><blockquote><p>具体源代码看这里 <a href="https://github.com/koajs/koa/blob/master/lib/request.js" rel="external nofollow noopener noreferrer" target="_blank">request.js</a></p></blockquote><h2 id="response-js"><a href="#response-js" class="headerlink" title="response.js"></a>response.js</h2><p>和 request.js 一样，封装了响应相关的属性以及方法，这里就不贴代码了。</p><blockquote><p>具体源代码看这里 <a href="https://github.com/koajs/koa/blob/master/lib/response.js" rel="external nofollow noopener noreferrer" target="_blank">response.js</a></p></blockquote><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>先来看段代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 koa 中，要应用一个中间件，我们使用 app.use()，我们要理解一个概念，就是在 koa 中，一切皆是中间件。再来一段代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> mid1 <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'Hello '</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>body <span class="token operator">+</span> <span class="token string">'OK'</span><span class="token punctuation">}</span><span class="token keyword">const</span> mid2 <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/html; charset=utf-8'</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> mid3 <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>body <span class="token operator">+</span> <span class="token string">'World '</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mid1<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mid2<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mid3<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8085</span><span class="token punctuation">)</span></code></pre><p>打印出<strong>Hello World OK</strong>，从执行结果来看，首先执行 mid1 中的代码，在遇到 await next()之后会把控制权交给下一个中间件处理，直到所有的中间件都执行完毕，然后再回来继续执行剩下的业务代码。到这里我们就对 koa 的中间件执行特点有所了解了。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application</span><span class="token function">use</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在前面的代码中，我们看到中间件在使用过程中会不断加到堆栈中，执行顺序也会按照先进先出的原则执行。但是 koa 中间件为什么可以依次执行？并在执行过程中可以暂停下来走后面的流程然后再回来继续执行？这里我们就要用到 koa-compose 了。</p><p>compose 这里用到了纯函数，关于纯函数可以去看下函数式编程相关概念，首先纯函数无副作用，既不依赖，也不会改变全局状态。这样函数之间可以达到自由组合的效果。</p><p>我们先用一段 js 代码来模拟下这个执行原理</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">tail</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'修改前'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 修改前 0</span><span class="token comment" spellcheck="true">// 修改前 1</span><span class="token comment" spellcheck="true">// 修改前 2</span><span class="token comment" spellcheck="true">// 修改前 3</span></code></pre><p>通过这种方式在每次调用的时候把这个函数的执行返回，它执行后的结果就是下一次调用的入参，这个返回的函数负责执行下一个流程，一直执行到边界条件为止。</p><p>然后再看 compose 核心代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// koa-compose</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> compose<span class="token keyword">function</span> compose <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 接收中间件函数数组</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Middleware stack must be an array!'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 判断入参middleware是否为数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> fn <span class="token keyword">of</span> middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断数组内每一项是否是function</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Middleware must be composed of functions!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// next可以看成是一个钩子回调函数，能串联到下一个中间件</span>    <span class="token comment" spellcheck="true">// last called middleware #</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true">// 注册初始下标</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 直接执行</span>    <span class="token keyword">function</span> dispatch <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> index<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'next() called multiple times'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 判断next是否多次调用</span>      index <span class="token operator">=</span> i      <span class="token keyword">let</span> fn <span class="token operator">=</span> middleware<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 下表为0，默认第一个中间件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> middleware<span class="token punctuation">.</span>length<span class="token punctuation">)</span> fn <span class="token operator">=</span> next <span class="token comment" spellcheck="true">// 说明已调用到最后一个中间件，这里next为undified</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// next取反为true，直接返回一个代码执行完毕的resolve</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">function</span> next <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//递归调用，next将结果传递给下一个中间件</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到 compose 是一个闭包函数，返回匿名函数再执行的最终结果返回的是一个 promise 对象。</p><blockquote><p>compose 内部存储了所有的中间件，通过递归的方式不断的运行中间件。</p></blockquote><p>再回到 application 来看</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleRequest <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生成上下文对象</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> handleRequest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fnMiddleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> ctx<span class="token punctuation">.</span>res<span class="token punctuation">;</span>  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onerror <span class="token operator">=</span> err <span class="token operator">=</span><span class="token operator">></span> ctx<span class="token punctuation">.</span><span class="token function">onerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">respond</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onFinished</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fnMiddleware</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>onerror<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>fnMiddleware 是通过 handleResponse 传入下来的，然后在 callback 回调执行的时候生成上下文对象 ctx，然后把 ctx 传给了 handleRequest，另一个参数 fn 就是 compose 处理之后返回的匿名函数，对应就是 compose 里<code>return Promise.resolve(fn(context, function next (){}</code> 这里的 context 和 next。</p><p>fnMiddleware 第一次执行的时只传入了 ctx，next 为 undified，对应的就是 compose 里直接<code>return dispatch(0)</code>，这时候还没有执行第一个中间件，在它内部才传入了 next。</p><p>compose 的作用其实就是把每个不相干的中间件串在一起，然后来组合函数，把这些函数串联起来依次执行，上一个函数的输出结果就是下一个函数的入参。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>Compose 是一种基于 Promise 的流程控制方式，可以通过这种方式对异步流程同步化，解决之前的嵌套回调和 Promise 链式耦合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上文我们读了 koa 源码中的 application 模块，了解其核心实现原理，其中在&lt;/p&gt;
&lt;pre class=&quot; language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot; spellche
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Nodejs" scheme="http://coder.liusixin.cn/tags/Nodejs/"/>
    
      <category term="Koa2" scheme="http://coder.liusixin.cn/tags/Koa2/"/>
    
  </entry>
  
  <entry>
    <title>Koa2 源码学习(一)</title>
    <link href="http://coder.liusixin.cn/posts/80d4f62/"/>
    <id>http://coder.liusixin.cn/posts/80d4f62/</id>
    <published>2018-03-02T03:09:27.000Z</published>
    <updated>2018-03-05T07:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近读了一下 Koa2 的源码；在阅读 Koa2 (2.3.0) 的源码的过程中，我的感受是整个代码设计精巧，思路清晰，是一个小而精的 nodejs web 服务框架。</p><h2 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h2><p>作为 web 服务框架，都是要围绕核心服务而展开的。那什么是核心服务呢？其实就是接收客户端的一个 http 的请求，对于这个请求，除了接收以外，还有解析这个请求。所以说会有</p><blockquote><p>HPPT：接收 -&gt; 解析 -&gt; 响应</p></blockquote><p>在响应客户端的时候，也有很多种方式，比如返回一个 html 页面，或者 json 文本。在解析请求和响应请求的中间，会有一些第三方的中间件，比如 日志、表单解析等等来增强 koa 的服务能力，所以 koa 至少要提供 <em>“请求解析”、”响应数据”、”中间件处理”</em> 这三种核心能力的封装，同时还需要有一个串联他们执行环境的上下文（context）</p><ul><li>HTTP</li><li>接收</li><li>解析</li><li>响应</li><li>中间件</li><li>执行上下文</li></ul><p>上下文可以理解为是 http 的请求周期内的作用域环境来托管请求响应和中间件，方便他们之间互相访问。</p><p>以上分析是站在单个 http 请求的角度来看一个 web 服务能力。那么站在整个网站，站在整个后端服务的角度来看的话，能够提供 <em>“请求”、”响应”、”解析”、”中间件”、”http 流程全链路”</em> 这些服务能力的综合体，可以看做是一个应用服务对象。如果把这些全放到 koa 里的话，那么对应的就是：</p><ul><li>Application</li><li>Context</li><li>Request</li><li>Response</li><li>Middlewares</li><li>Session</li><li>Cookie</li></ul><h2 id="Koa-的组成结构"><a href="#Koa-的组成结构" class="headerlink" title="Koa 的组成结构"></a>Koa 的组成结构</h2><p>首先看下 koa 的目录结构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180425-000053-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>application.js：框架入口；负责管理中间件，以及处理请求</li><li>context.js：context 对象的原型，代理 request 与 response 对象上的方法和属性</li><li>request.js：request 对象的原型，提供请求相关的方法和属性</li><li>response.js：response 对象的原型，提供响应相关的方法和属性</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span><span class="token keyword">const</span> isGeneratorFunction <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'is-generator-function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断当前传入的function是否是标准的generator function</span><span class="token keyword">const</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'koa:application'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// js调试工具</span><span class="token keyword">const</span> onFinished <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'on-finished'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 事件监听，当http请求关闭，完成或者出错的时候调用注册好的回调</span><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./response'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 响应请求</span><span class="token keyword">const</span> compose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-compose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 中间件的函数数组</span><span class="token keyword">const</span> isJSON <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-is-json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否为json数据</span><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./context'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运行服务上下文</span><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 客户端的请求</span><span class="token keyword">const</span> statuses <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'statuses'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求状态码</span><span class="token keyword">const</span> Cookies <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookies'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> accepts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'accepts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 约定可被服务端接收的数据，主要是协议和资源的控制</span><span class="token keyword">const</span> Emitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 事件循环</span><span class="token keyword">const</span> assert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 断言</span><span class="token keyword">const</span> Stream <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stream'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> only <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'only'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 白名单选择</span><span class="token keyword">const</span> convert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-convert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 兼容旧版本koa中间件</span><span class="token keyword">const</span> deprecate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'depd'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断当前在运行koa的某些接口或者方法是否过期，如果过期，会给出一个升级的提示</span></code></pre><p>以上是 koa 入口文件的依赖分析。接下来我们进行源码分析，首先我们利用删减法来筛出代码的核心实现即可，不用上来就盯细节！<br>我们只保留 constructor</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否信任 proxy header 参数，默认为 false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存通过app.use(middleware)注册的中间件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subdomainOffset <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子域默认偏移量，默认为 2</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">||</span> <span class="token string">'development'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 环境参数，默认为 NODE_ENV 或 ‘development’</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//context模块，通过context.js创建</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//request模块，通过request.js创建</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//response模块，通过response.js创建</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>我们可以看到，这段代码暴露出一个类，构造函数内预先声明了一些属性，该类继承了 Emitter，也就是说这个类可以直接为自定义事件注册回调函数和触发事件，同时可以捕捉到其他地方触发的事件。</p><p>除了这些基本属性之外，还有一些公用的 api，最重要的两个一个是<strong>listen</strong>，一个是<strong>use</strong>。koa 的每个实例上都会有这些属性和方法。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subdomainOffset <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">||</span> <span class="token string">'development'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> server<span class="token punctuation">.</span>listen<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">use</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>listen 方法内部通过 <code>http.createServer</code> 创建了一个 http 服务的实例，通过这个实例去 listen 要监听的端口号，<code>http.createServer</code> 的参数传入了 <code>this.callback</code> 回调</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把所有middleware进行了组合，使用了koa-compose</span>    <span class="token keyword">const</span> handleRequest <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回了本身的回调函数</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> handleRequest<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，handleRequest 返回了本身的回调，接下来看 handleRequest 。</p><p>handleRequest 方法直接作为监听成功的调用方法。已经拿到了 包含 req res 的 ctx 和可以执行所有中间件函数的 fn。<br>首先一进来默认设置状态码为404 . 然后分别声明了 成功函数执行完成以后的成功 失败回调方法。这两个方法实际上就是再将 ctx 分化成 req res。 分别调这两个对象去客户端执行内容返回。<br><strong>context.js request.js response.js</strong> 分别是封装了一些对 ctx req res 操作相关的属性，我们以后再说。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fnMiddleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> ctx<span class="token punctuation">.</span>res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到context.res</span>    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置默认状态吗404</span>    <span class="token keyword">const</span> onerror <span class="token operator">=</span> err <span class="token operator">=</span><span class="token operator">></span> ctx<span class="token punctuation">.</span><span class="token function">onerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置onerror触发事件</span>    <span class="token keyword">const</span> handleResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">respond</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向客户端返回数据</span>    <span class="token function">onFinished</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fnMiddleware</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>失败执行的回调</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">onerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">assert</span><span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`non-error thrown: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">404</span> <span class="token operator">==</span> err<span class="token punctuation">.</span>status <span class="token operator">||</span> err<span class="token punctuation">.</span>expose<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>silent<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> err<span class="token punctuation">.</span>stack <span class="token operator">||</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^/gm</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>成功执行的回调</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">respond</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p><code>return fnMiddleware(ctx).then(handleResponse).catch(onerror);</code> 我们拆分理解，首先 return fnMiddleware(ctx) 返回了一个中间件数组处理链路，then(handleResponse) 等到整个中间件数组全部完成之后把返回结果通过 then 传递到 handleResponse。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>app <span class="token operator">=</span> request<span class="token punctuation">.</span>app <span class="token operator">=</span> response<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>req <span class="token operator">=</span> response<span class="token punctuation">.</span>req <span class="token operator">=</span> req<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>res <span class="token operator">=</span> res<span class="token punctuation">;</span>    request<span class="token punctuation">.</span>ctx <span class="token operator">=</span> response<span class="token punctuation">.</span>ctx <span class="token operator">=</span> context<span class="token punctuation">;</span>    request<span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span>    response<span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>originalUrl <span class="token operator">=</span> request<span class="token punctuation">.</span>originalUrl <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    context<span class="token punctuation">.</span>cookies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookies</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">{</span>      keys<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">,</span>      secure<span class="token punctuation">:</span> request<span class="token punctuation">.</span>secure    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span>ip <span class="token operator">=</span> request<span class="token punctuation">.</span>ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remoteAddress <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>accept <span class="token operator">=</span> request<span class="token punctuation">.</span>accept <span class="token operator">=</span> <span class="token function">accepts</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们不用去太深入代码，理解原理即可。createContext 创建 context 的时候，还会将 req 和 res 分别挂载到 context 对象上，并对 req 上一些关键的属性进行处理和简化 挂载到该对象本身，简化了对这些属性的调用。我们通过一张图来直观地看到所有这些对象之间的关系。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/1352261008-594a32c87b693_articlex.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>最左边一列表示每个文件的导出对象</li><li>中间一列表示每个 Koa 应用及其维护的属性</li><li>右边两列表示对应每个请求所维护的一些列对象</li><li>黑色的线表示实例化</li><li>红色的线表示原型链</li><li>蓝色的线表示属性</li></ul><p>createContext 简单理解就是挂载上面的对象，方便整个上下游 http 能及时访问到进出请求及特定的行为。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// application.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">Emitter</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">respond</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// allow bypassing koa</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">===</span> ctx<span class="token punctuation">.</span>respond<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> ctx<span class="token punctuation">.</span>res<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>writable<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>body<span class="token punctuation">;</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> ctx<span class="token punctuation">.</span>status<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值服务状态码</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'HEAD'</span> <span class="token operator">==</span> ctx<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求头方法判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>headersSent <span class="token operator">&amp;&amp;</span> <span class="token function">isJSON</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ctx<span class="token punctuation">.</span>length <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">byteLength</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// status body</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token function">String</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>headersSent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>length <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">byteLength</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 通过判断body类型来调用，这里的res.end就是最终向客户端返回数据的动作</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'string'</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> body<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Stream</span><span class="token punctuation">)</span> <span class="token keyword">return</span> body<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回为json数据</span>  body <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>headersSent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>length <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">byteLength</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>respond 函数是 handleRequest 成功处理的回调，内部做了合理性校验，诸如状态码，内容的类型判断，最后向客户端返回数据。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是我们对 application.js 文件的分析，通过上面的分析，我们已经可以大概得知 Koa 处理请求的过程：当请求到来的时候，会通过 req 和 res 来创建一个 context (ctx) ，然后执行中间件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最近读了一下 Koa2 的源码；在阅读 Koa2 (2.3.0) 的源码的过程中，我的感受是整个代码设计精巧，思路清晰，是一个小而精的 no
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Nodejs" scheme="http://coder.liusixin.cn/tags/Nodejs/"/>
    
      <category term="Koa2" scheme="http://coder.liusixin.cn/tags/Koa2/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 高级技巧</title>
    <link href="http://coder.liusixin.cn/posts/4bd5734d/"/>
    <id>http://coder.liusixin.cn/posts/4bd5734d/</id>
    <published>2018-02-28T09:14:32.000Z</published>
    <updated>2018-02-28T09:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>安全的类型检测</li><li>惰性载入函数</li><li>柯里化</li><li>防篡改对象</li><li>冻结对象</li><li>定时器</li><li>函数节流</li></ul><h2 id="安全的类型检测"><a href="#安全的类型检测" class="headerlink" title="安全的类型检测"></a>安全的类型检测</h2><p>是怎么安全地检测一个变量的类型，例如判断一个变量是否为一个数组。一般是使用 <code>instanceof</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>但是这种方式有一个弊端，就是在 iframe 里面判断一个父窗口的变量的时候会不准确。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-144753@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><pre class=" language-js"><code class="language-js">Array <span class="token operator">!==</span> window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>Array<span class="token punctuation">;</span></code></pre><p>这个其实很好解释，它们分别是两个函数（父窗口定义的和子窗口定义的），内存地址不一样，Object 等式判断不成立，而<code>window.parent.arrayData.constructor</code> 返回的<br>是父窗口的 Array, 比较的时候是在子窗口，使用的是子窗口的 Array, 这两个 Array 不相等，所以导致判断不成立。</p><p><strong>使用 <code>Object.prototype.toString</code> 判断</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> toString <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Array]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Object]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Function]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object String]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Number]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Null]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Undefined]</span></code></pre><p>可以用这个函数安全地判断变量是不是数组。</p><p>注意要使用 call, 而不是直接调用，call 的第一个参数是 context 执行上下文，把数组传给它作为执行上下文。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> toString <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Function]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Object]</span></code></pre><p>可以看到 es6 的 class 也是用 function 实现的原型，也就是说 class 和 function 本质上是一样的，只是写法上不一样。</p><h2 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h2><p><strong>UA 判断</strong></p><p>有时候我们需要做一些兼容性判断，比如 UA 的判断。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// UA的类型</span>getUAType<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> ua <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/renren/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> O<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/MicroMessenger/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/weibo/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个函数的作用是判断用户是在哪个环境打开的网页，以便于统计哪个渠道的效果比较好。</p><p>这种类型的判断有一个特点，就是它的结果是固定的，不管执行判断多少次，都会返回相同的结果，用户的 UA 在这个网页不可能会发生变化（除了调试设定的之外）。所以为了优化，我们采用惰性函数优化下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> pageData <span class="token operator">=</span> <span class="token punctuation">{</span>  getUAType<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> ua <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/renren/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pageData<span class="token punctuation">.</span>getUAType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> O<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/MicroMessenger/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pageData<span class="token punctuation">.</span>getUAType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/weibo/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pageData<span class="token punctuation">.</span>getUAType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>每次判断之后把 <code>getUAType</code> 这个函数重新赋值，变成一个新的 function, 而这个 function 直接返回一个确定的变量，这样在下一次获取就可以跳过判断了，这就是惰性函数的作用。</p><p>更简单的实现，直接用变量存起来</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> ua <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span><span class="token keyword">let</span> UAType <span class="token operator">=</span> ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/renren/i</span><span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token number">0</span>  <span class="token punctuation">:</span> ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/MicroMessenger/i</span><span class="token punctuation">)</span>    <span class="token operator">?</span> <span class="token number">1</span>    <span class="token punctuation">:</span> ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/weibo/i</span><span class="token punctuation">)</span>      <span class="token operator">?</span> <span class="token number">2</span>      <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>连函数都不用写了，缺点是即使没有使用到 UAType 这个变量，也会执行一次判断，但是我们认为这个变量被用到的概率还是很高的。</p><p><strong>localStorage 兼容处理</strong></p><p>我们再举一个比较有用的例子，由于 Safari 的无痕浏览会禁掉本地存储，因此需要写一个兼容性判断</p><pre class=" language-js"><code class="language-js">Data<span class="token punctuation">.</span>localStorageEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Safari的无痕浏览会禁用 localStorage</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span>trySetData <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Data<span class="token punctuation">.</span>localStorageEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">setLocalData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>localStorageEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    util<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">'_L_'</span> <span class="token operator">+</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在设置本地数据的时候，需要判断一下是不是支持本地存储，如果是的话就用 localStorage ,否则改用 cookie。 可以用惰性函数改造一下:</p><pre class=" language-js"><code class="language-js">setLocalData<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Data<span class="token punctuation">.</span>localStorageEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>    util<span class="token punctuation">.</span>setLocalData <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    util<span class="token punctuation">.</span>setLocalData <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> util<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">"_L_"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> util<span class="token punctuation">.</span><span class="token function">setLocalData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h2><blockquote><p>有时候要把一个函数当作参数传递给另一个函数执行， 此时函数的执行上下文往往会发生变化</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">DrawTool</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $map<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseClick<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleMouseClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>points<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>latLng<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>click 事件的执行回调里面 this 不是指向了 <code>DrawTool</code> 的实例了，所以里面的 <code>this.points</code> 将会返回 <code>undefined</code>。</p><p>第一种解决方法是使用<strong>闭包</strong>，先把 this 缓存起来</p><pre class=" language-js"><code class="language-js"><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  $map<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> that<span class="token punctuation">.</span>handleMouseClick<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用箭头函数：</p><pre class=" language-js"><code class="language-js">$map<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMouseClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>箭头函数的 this 还是指向父级的上下文，因此这里不用自已创建一个闭包，直接用 this 就可以。</p><p>第二种是 ES5 的 <strong>bind 函数绑定</strong></p><pre class=" language-js"><code class="language-js">$map<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>bind 函数其实实现起来非常简单：</p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><blockquote><p>柯里化就是一个函数的返回结果当成另一个函数的入参执行，就是函数和参数值结合产生一个新的函数。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> add1 <span class="token operator">=</span> add<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>要实现这样一个 curry 的函数，它的重点是要返回一个函数，这个函数有一些闭包的变量记录了创建时的默认参数，然后执行这个返回函数的时候，把新传进来的参数和默认参数拼一下变成完整参数列表去调用原本的函数。来看代码：</p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>curry <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> slice <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">;</span>  <span class="token keyword">let</span> defaultArgs <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> that<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> defaultArgs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在举一下柯里化一个有用的例子，当需要把一个数组降序排序的时候:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [10, 5, 3, 2, 1]</span></code></pre><p>给 sort 传一个函数的参数，但是如果你的降序操作比较多，每次都写－个函数参数还是有点烦的，因此可以用柯里化把这个参数固化起来</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sortDescending <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sort<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">sortDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [10, 5, 3, 2, 1]</span></code></pre><h2 id="防止篡改对象"><a href="#防止篡改对象" class="headerlink" title="防止篡改对象"></a>防止篡改对象</h2><h3 id="1-Object-seal-防止新增和删除属性"><a href="#1-Object-seal-防止新增和删除属性" class="headerlink" title="1. Object.seal 防止新增和删除属性"></a>1. Object.seal 防止新增和删除属性</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能删</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出liusixin</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能加</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出undefined</span></code></pre><p>当把一个对象 seal 之后，将不能添加和删除属性。</p><blockquote><p>注意：当使用严格模式将会抛异常</p></blockquote><h3 id="2-Object-freeze-冻结对象"><a href="#2-Object-freeze-冻结对象" class="headerlink" title="2. Object.freeze 冻结对象"></a>2. Object.freeze 冻结对象</h3><p>这个方法是不能改属性值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lsx'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能修改</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出lsx</span></code></pre><p>同时可以使用 <code>Object.isFrozen</code>、<code>Object.isSealed</code>、<code>Object.isExtensible</code> 判断当前对象的状态。</p><h3 id="3-defineProperty-冻结单个属性"><a href="#3-defineProperty-冻结单个属性" class="headerlink" title="3. defineProperty 冻结单个属性"></a>3. defineProperty 冻结单个属性</h3><p>设置 <code>enumable/writable</code>为 false, 那么这个属性将不可遍历和写。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'grade'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  value<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span></code></pre><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>我们知道在 C/C++/Java 等语言都是有 sleep 函数的，但<br>是 JS 没有。那么怎样实现一个 JS 版的 sleep 函数呢？</p><p>sleep 函数的作用是让线程进入休眠，当到了指定时间后再重新唤起。你不能写个 while 循环然后不断地判断当前时间和开始时间的差值是不是到了指定时间，因为这样会占用 CPU, 就不是休眠了。</p><p><strong>我们可以使用 setTimeout + 回调</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>millionSeconds<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> millionSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// sleep 2秒</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sleep recover'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是回调如果过多的话会造成回调地狱，可读性差，我们用 <strong>Promise</strong> 改写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>millionSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> millionSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// sleep 2秒</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sleep recover'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>async/await 改写</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>millionSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> millionSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sleep recover'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>相对于简单的 Promise 版本，sleep 的实现还是没变。不过在调用 sleep 的前面加一个 await，这样只有 sleep 这个异步完成了，才会接着执行下面的代码。同时需要把代码逻辑包在一个 async 标记的函数里面，这个函数会返回一个 Promise 对象，当里面的异步都执行完了就可以 then 了。</p><pre class=" language-js"><code class="language-js"><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'init finished'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关于定时器还有－个很重要的话题，那就是 <strong>setTimeout 和 setlnterval 的区别</strong>:</p><p>setTimeout 是在当前执行单元都执行完才开始计时，而 setlnterval 是在设定完计时器后就立马计时。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> scriptBegin <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 需要执行20ms的工作单元</span><span class="token keyword">function</span> <span class="token function">act</span><span class="token punctuation">(</span>functionName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>functionName<span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> scriptBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> begin <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> fun3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">act</span><span class="token punctuation">(</span><span class="token string">'fun3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>fun3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">act</span><span class="token punctuation">(</span><span class="token string">'fun1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">act</span><span class="token punctuation">(</span><span class="token string">'fun2 - 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fun4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">act</span><span class="token punctuation">(</span><span class="token string">'fun4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span>fun4<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">act</span><span class="token punctuation">(</span><span class="token string">'fun2 - 2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码的执行模型是这样的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-164004@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>打印结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-164203@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="函数节流-throttling"><a href="#函数节流-throttling" class="headerlink" title="函数节流 throttling"></a>函数节流 throttling</h2><p>节流的目的是为了不想触发执行得太快，比如：</p><ul><li>监听 input 触发搜索；</li><li>监听 resize 做响应式调整；</li><li>监听 mousemove 调整位置。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span>tId<span class="token punctuation">)</span><span class="token punctuation">;</span>  method<span class="token punctuation">.</span>tId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>每次执行都要 setTimeout 一下，如果触发得很快就把上一次的 setTimeout 清掉重新 setTimeout, 这样就不会执行很快了。</p><p>但是这样有个问题，这个回调函数可能永远不会执行，因为它一直在触发，一直在清掉 <code>tId</code>, 这就尴尬了 -_- ，上面代码的本意应该是 1OOms 内最多触发一次，而实际情况是可能永远不会执行。这种实现应该<strong>叫防抖，不是节流</strong>。</p><p>把上面的代码稍微改造一下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>tId<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  method<span class="token punctuation">.</span>tId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    method<span class="token punctuation">.</span>tId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个实现就是正确的，每 1OOms 最多执行一次回调，原理是在 setTimeout 里面把 tId 给置成 0, 这样能让下一次的触发执行。大概每 1OOms 就执行一次，这样就达到我们的目的。</p><p>但是这样有一个小问题，就是每次执行都是要延迟 1OOms, 有时候用户可能就是最大化了窗口，只触发了一次 resize 事件，但是这次还是得延迟 1OOms 才能执行，我们再优化下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果是第一次触发， 立刻执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> method<span class="token punctuation">.</span>tId <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>tId<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  method<span class="token punctuation">.</span>tId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    method<span class="token punctuation">.</span>tId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>先判断是否为第一次触发，如果是的话立刻执行。这样就解决了上面提到的问题，但是这个实现还是有问题，因为它只是全局的第一次，用户最大化之后，隔了一会又取消最大化了就又有延迟了，并且第一次触发会执行两次。继续优化：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>method<span class="token punctuation">.</span>tId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    method<span class="token punctuation">.</span>tId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>tId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>每次触发的时候立刻执行，然后再设定一个计时器，把 tId 置成 0。这个实现比之前的实现还要简洁，并且能够解决延迟的问题。 但还是有一个问题就是最后 1OOms 的信息将会被丢弃，一般应该是希望最后的那次触发能够执行，因为那个才是最终的状态。</p><blockquote><p>防抖是只执行重复操作的最后一次，而节流是每多少单位时间内只执行一次。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安全的类型检测&lt;/li&gt;
&lt;li&gt;惰性载入函数&lt;/li&gt;
&lt;li&gt;柯里化&lt;/li&gt;
&lt;li&gt;防篡改对象&lt;/li&gt;
&lt;li&gt;冻结对
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="函数式编程" scheme="http://coder.liusixin.cn/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>理解移动端click及自定义事件</title>
    <link href="http://coder.liusixin.cn/posts/8a8d16c9/"/>
    <id>http://coder.liusixin.cn/posts/8a8d16c9/</id>
    <published>2018-02-21T13:03:38.000Z</published>
    <updated>2018-02-21T13:03:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家都知道移动端有 300ms 点击延迟，移动端尽量不要使用 click，因为 click 会比较迟钝，尽量使用 touchstart。但是 touchstart 也会有一个问题， 用户在滑动页面的时候要是不小心碰到了相关元素也会触发 touchstart。</p><p>首先为什么移动端的 click 会迟钝呢？因为移动端要判断是否是双击，所以单击之后不能够立刻触发 click, 要等 300ms, 直到确认不是双击了才触发 click。所以就导致了 click 有延迟。</p><h2 id="解决延迟"><a href="#解决延迟" class="headerlink" title="解决延迟"></a>解决延迟</h2><p>在 2014 年的 Chrome32 版本已经把这个延迟去掉了，如果有一个 meta 标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>把 viewport 设置成设备的实际像素，那么就不会有这 300ms 的延迟。</p><p>如果设置 <code>initial-scale=1.0</code>, 在 Chrome 上是可以生效的， 但是 Safari 不会</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>还有第三种办法是设置 css</p><pre class=" language-css"><code class="language-css"><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">touch-action</span><span class="token punctuation">:</span> manipulation<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样也可以取消掉 300ms 的延迟，Chrome 和 Safari 都可以生效。</p><h2 id="click-touch-触发顺序"><a href="#click-touch-触发顺序" class="headerlink" title="click/touch 触发顺序"></a>click/touch 触发顺序</h2><p>要弄明白 click 的延迟原因，我们先要搞清楚 click 是在什么时候触发，并研究下它的触发顺序。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>移动端click及自定义事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello, world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token operator">!</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> touchstartTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"touchstart"</span><span class="token punctuation">)</span> touchstartTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> touchstartTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      target<span class="token punctuation">.</span>onclick <span class="token operator">=</span> log<span class="token punctuation">;</span>      target<span class="token punctuation">.</span>ontouchstart <span class="token operator">=</span> log<span class="token punctuation">;</span>      target<span class="token punctuation">.</span>ontouchend <span class="token operator">=</span> log<span class="token punctuation">;</span>      target<span class="token punctuation">.</span>ontouchmove <span class="token operator">=</span> log<span class="token punctuation">;</span>      target<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> log<span class="token punctuation">;</span>      target<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> log<span class="token punctuation">;</span>      target<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> log<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在浏览器下测试</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-020119@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从结果上看，click 是最后出发的，并且有 300ms 延迟，之所有实际结果会比 300ms 大是因为浏览器内核运行也会消耗时间。</p><p>然后我们加上 <code>viewport</code> 的 <code>meta</code> 标签，再看打印结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-015945@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到， 300ms 的延迟没有了。</p><blockquote><p>这里用加上 css 的 <code>touch-action: manipulation;</code>属性也会有一样的效果。</p></blockquote><h2 id="tap-事件的实现"><a href="#tap-事件的实现" class="headerlink" title="tap 事件的实现"></a>tap 事件的实现</h2><p>知道了 click 是在 touchend 之后触发的， 那么我们来尝试一下实现一个 tap 事件。</p><p>这里有两个库是可以快速实现 tap 无延迟的效果，一个是 zepto, 另一个是 fastclick。其中 zepto 有一个自定义事件 tap, 它是一个没有延迟的 click 事件。而 fastclick 是在 touchend 之后生成一个 click 事件，并立即触发这个 click, 再取消原本的 click 事件。他们原理都是一样的，都是在 touchend 之后触发，一个是触发它自己定义的 tap 事件，一个是触发原生 click。</p><p>还有一个关键的问题是如果用户是上下滑动也会频繁触发 tap 事件。怎么判定用户是单击还是在上下滑呢?</p><ul><li><strong>Zepto</strong>：位移偏差<ul><li>记录下 touchstart 的初始位移， 然后 touchend 的位移减掉初始位移的偏差如果在 30 以内，则认为用户是单击，大于 30 就认为是滑动。</li></ul></li><li><strong>fastclick</strong>：时间偏差<ul><li>分别记录 touchstart 和 touchend 的时间戳， 如果它们的时间差大于 700 毫秒，则认为是滑动操作，否则是单击操作。</li></ul></li></ul><p><strong>现在我们来实现一个按位移偏差判断的 tap。</strong></p><p>要实现一个自定义事件，有两种方式，第一种是像 jQuery/Zepto 一样，自己封装一个事件机制，第二种是调用原生的 <code>document.createEvent</code>, 然后再执行 <code>div.dispatchEvent(event)</code>, 这里我们使用第一种方式</p><p>先写一个选择器</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> $ <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> dom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> selector <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token keyword">instanceof</span> <span class="token class-name">HTMLElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dom <span class="token operator">=</span> selector<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">$Element</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>$ <span class="token operator">=</span> $<span class="token punctuation">;</span></code></pre><p>选择器的名称用＄， 它是一个函数，传进来的参数为选择器或者 DOM 元素，如果是字符串的选择器，则调用 <code>querySelectorAll</code> 去获取 DOM 元素，如果它已经是一个 DOM 则不用处理，最后返回一个 <code>$Element</code> 封装的实例，类似于 jQuery 对象。</p><p>现在来实现这个 <code>$Element</code> 的类</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> $Element <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>_doms<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> doms <span class="token operator">=</span>      _doms<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">||</span> _doms<span class="token punctuation">.</span>constructor <span class="token operator">===</span> NodeList        <span class="token operator">?</span> _doms        <span class="token punctuation">:</span> <span class="token punctuation">[</span>_doms<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>doms <span class="token operator">=</span> doms<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> doms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> doms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把 this 当作一个数组， DOM 元素当作这个数组的元素。 这样就可以通过索引获取 DOM 元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>        doms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>$Element</code> 的构造函数里面，先判断参数的类型，如果它不是一个数组或是用 <code>querySelectorAll</code> 返回的 <code>NodeList</code> 类型，则构造一个 DOM 数组。然后给这些 DOM 对象添加一个 <code>listeners</code> 的属性，用来存放事件的回调函数。</p><blockquote><p>一般不推荐给原生对象添加东西。但是从简单考虑，这里先用这样的方法。</p></blockquote><p>上面 <code>this[i] = doms[i];</code> 这步注释已经写明，然后就可以通过以下方式获取</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span></code></pre><p>它是一个伪数组，是一个 <code>$Element</code> 实例，又有 length, 可以通过 index 获取元素，这部分代码也让我们知道了 arguments 实例、jQuery 对象这种伪数组是怎么来的。</p><p>上面代码还调用了一个 init, 这个 init 函数用来添加 tap 事件。</p><pre class=" language-js"><code class="language-js"><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>doms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initTapEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>doms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>还需要提供事件绑定和触发的 API</p><pre class=" language-js"><code class="language-js"><span class="token function">on</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dom<span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dom<span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    dom<span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>on 函数会给 DOM 的 <code>listeners</code> 属性添加相应事件的回调， 每种事件类型都用一个数组存储。</p><p>触发的代码</p><pre class=" language-js"><code class="language-js"><span class="token function">trigger</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $Element<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>doms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> eventType<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> eventType<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> listeners <span class="token operator">=</span> dom<span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>listeners<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据不同的事件类型去取回调函数的数组，依次执行。</p><p>现在重点来说一下怎么添加一个 tap 事件， 即上面的 <code>initTapEvent</code> 函数</p><pre class=" language-js"><code class="language-js"><span class="token function">initTapEvent</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    y1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    y2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchend"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现的思路是这样的， 在 touchstart 的时候记录 x1 和 y1 的位置</p><pre class=" language-js"><code class="language-js">dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> touch <span class="token operator">=</span> event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  x1 <span class="token operator">=</span> x2 <span class="token operator">=</span> touch<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>  y1 <span class="token operator">=</span> y2 <span class="token operator">=</span> touch<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>如果你用两根手指的话， 那么 <code>event.touches.length</code> 就是 2, 如果是 3 根则为 3, 进而分别获得到每根手指的位置，由于我们是单点，所以就获取第一个手指的位置即可。<code>pageX/pageY</code> 是相对于当前 HTML 页面的位置，而 <code>clientX</code> 和 <code>clientY</code> 是相对于视图窗口的位置。</p></blockquote><p>然后在 touchmove 的时候获取到最新的移动位置</p><pre class=" language-js"><code class="language-js">dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> touch <span class="token operator">=</span> event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  x2 <span class="token operator">=</span> touch<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>  y2 <span class="token operator">=</span> touch<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后 touchend 的时候，比较位移偏差</p><pre class=" language-js"><code class="language-js">dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $Element<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> <span class="token string">'tap'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">$Event</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  y2 <span class="token operator">=</span> x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果两者的位移差小千 10, 则认为是 tap 事件，并触发这个事件。这里封装了定义事件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> $Event <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>pageX<span class="token punctuation">,</span> pageY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pageX <span class="token operator">=</span> pageX<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pageY <span class="token operator">=</span> pageY<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后就可以使用这个 tap 事件</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#target'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'tap'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'tap'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-031110@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当单击目标区域的时候就会执行 tap 回调，而上下滑动的时候则不会触发。</p><p>再比较一下 tap 和原生 click 的触发时间的差别，需要给自定义事件添加一个 click</p><pre class=" language-js"><code class="language-js">dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  $Element<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">$Event</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们用一个 tapTime 记录一下时间</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> tapTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#target'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'tap'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  tapTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'tap'</span><span class="token punctuation">,</span> tapTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#target'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click time diff'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tapTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-032739@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>click 会大概慢 200ms, 可能是因为它前面还要触发 mouse 的事件。</p><p>这样我们就实现了一个自定义 tap 事件，fastclick 是使用原生的 Event, 在 touchend 的回调函数里面执行。</p><pre class=" language-js"><code class="language-js">touch <span class="token operator">=</span> event<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Synthesise a click event, with an extra attribute so it can be tracked</span>clickEvent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">'MouseEvents'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clickEvent<span class="token punctuation">.</span><span class="token function">initMouseEvent</span><span class="token punctuation">(</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">determineEventType</span><span class="token punctuation">(</span>targetElement<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>  window<span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  touch<span class="token punctuation">.</span>screenX<span class="token punctuation">,</span>  touch<span class="token punctuation">.</span>screenY<span class="token punctuation">,</span>  touch<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>  touch<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clickEvent<span class="token punctuation">.</span>forwardedTouchEvent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>targetElement<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>clickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后再调用 <code>event.preventDefault</code> 禁掉原本的 click 事件的触发。它里面还做了其他一些兼容性的处理。</p><p>这个时候如果要做一个放大的事件，可以在 <code>touchstart</code> 里面获取 <code>event.touches</code> 两根手指的初始位置，保存初始化手指的距离，然后在 <code>touchmove</code> 里面再次获取新位置，计算新的距离减掉老的距离，如果是正数则说明是放大，反之缩小，放大和缩小的尺度也是可以取一个相对值。手机 Safari 有一个 <code>gesturestart/gesturechange/gestureend</code> 事件，在 <code>gesturechange</code> 的 event 里面有一个放大比例 scale 的属性。</p><h2 id="摇一摇事件"><a href="#摇一摇事件" class="headerlink" title="摇一摇事件"></a>摇一摇事件</h2><p>HTML5 新增了一个 <code>devicemotion</code> 的事件，可以使用手机的重力感应</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>ondevicemotion <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> gravity <span class="token operator">=</span> event<span class="token punctuation">.</span>accelerationIncludingGravity<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gravity<span class="token punctuation">.</span>x<span class="token punctuation">,</span> gravity<span class="token punctuation">.</span>y<span class="token punctuation">,</span> gravity<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>x, y, z 表示三个方向的重力加速度</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-034305@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>x 是手机短边，y 是长边，z 是和手机屏幕垂直的方向，当把手机平着放的时候，由于 x、y 和地平线平行， 所以 <code>g(x) = g(y) = 0</code>, 而 z 和地平线垂直， 所以 <code>g(z) = 9.8</code> 左右， 同理当把手机竖着放的时候，<code>g(x) = g(z) = 0</code>, 而 <code>g(y) = -9.8</code>。</p><p><code>devicemotion</code> 事件会不断地触发，而且触发得很快。当我们把手机拿起来摇一摇的时候</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-034646@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>y 轴和 x 轴的变化范围从 <code>-45°</code> 到 <code>+45°</code>, 即这个区间是：<code>delta = 9.8 * sin(45°) * 2 = 13.8</code>。即只要 x 轴和 y 轴的 g 值变化超过 13.8, 我们就认为发生了摇一摇事件。</p><p>根据上面的分析，我们就可以写出代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> EMPTY_VALUE <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">const</span> THREAD_HOLD <span class="token operator">=</span> <span class="token number">13.8</span><span class="token punctuation">;</span><span class="token keyword">var</span> minX <span class="token operator">=</span> EMPTY_VALUE<span class="token punctuation">,</span>  minY <span class="token operator">=</span> EMPTY_VALUE<span class="token punctuation">;</span>window<span class="token punctuation">.</span>ondevicemotion <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> gravity <span class="token operator">=</span> event<span class="token punctuation">.</span>accelerationIncludingGravity<span class="token punctuation">,</span>    x <span class="token operator">=</span> gravity<span class="token punctuation">.</span>x<span class="token punctuation">,</span>    y <span class="token operator">=</span> gravity<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> minX<span class="token punctuation">)</span> minX <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> minY<span class="token punctuation">)</span> minY <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> minX<span class="token punctuation">)</span> <span class="token operator">></span> THREAD_HOLD <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> minY<span class="token punctuation">)</span> <span class="token operator">></span> THREAD_HOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'shake'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">'shake'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    minX <span class="token operator">=</span> minY <span class="token operator">=</span> EMPTY_VALUE<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'shake'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'window shake callback was called'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>用一个 minX 和 minY 记录最小的值，每次 devicemotion 触发的时候就判断当前的 g 值与最小值的差值是否超过了阈值，如果是的话就创建一个 <code>CustomEvent</code> 的实例，然后 <code>dispatch</code> 给 window, window 上监听的 onshake 事件就会触发了。</p><p>这样就实现了一个摇一摇 shake 事件。如果太难触发可以把阈值改小一点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文比较了移动端 touch 事件和 click 事件的区别， 以及怎么去掉 click 事件的 300ms 延迟，怎么实现一个快速响应的 tap 事件，怎么封装和触发自定义事件，还有摇一摇的原理是怎么样的， 怎么实现一个摇一摇的 shake 事件。</p><p>上面用一个 <code>$Element</code> 的类，由它负责决定是否触发 tap, 而调用者不需要关心 tap 事件触发的细节，这个 <code>$Element</code> 就相当于一个事件代理，或者也可以把 tap 当作一个门面。所以它是一个代理模式或门面模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家都知道移动端有 300ms 点击延迟，移动端尽量不要使用 click，因为 click 会比较迟钝，尽量使用 touchstart。但是
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="HTML5" scheme="http://coder.liusixin.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>记一次 React SSR 服务端渲染基础搭建过程</title>
    <link href="http://coder.liusixin.cn/posts/7ab5ac9a/"/>
    <id>http://coder.liusixin.cn/posts/7ab5ac9a/</id>
    <published>2018-02-14T17:02:30.000Z</published>
    <updated>2018-02-14T17:02:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章思路来源于 <a href="https://coding.imooc.com/class/161.html" rel="external nofollow noopener noreferrer" target="_blank">慕课网: Webpack+React 全栈工程架构项目实战精讲</a></p></blockquote><h2 id="要做服务端渲染，首先我们要明白为什么做，它的优劣势如何？"><a href="#要做服务端渲染，首先我们要明白为什么做，它的优劣势如何？" class="headerlink" title="要做服务端渲染，首先我们要明白为什么做，它的优劣势如何？"></a>要做服务端渲染，首先我们要明白为什么做，它的优劣势如何？</h2><p>随着前后分离项目普及，单页应用越来越流行，然而一些问题也随之而来：</p><ul><li>单页应用渲染由 js 完成（客户端渲染），浏览器最初获取的是一个空的 html。<ul><li>SEO</li></ul></li><li>由于内容都是 js 生成的，这中间就存在了一个 js 获取数据渲染页面的过程，相较于后端模板渲染完 html 再发送给浏览器，存在首页白屏问题，用户体验差。<ul><li>首屏渲染白屏</li></ul></li></ul><p>所谓 ssr，和之前的传统的多页面网站服务器端渲染不是同一个层次，在现有架构不变的情况下，即后端依旧只是提供 api 服务，前端人员依旧通过 ajax 请求数据，同时要达到传统多页应用的首屏加载速度以及 seo 优化。</p><p>现在最常见的做法是引入一层中间层 node</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/4869616-47c6964ba6154bfd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>难点在于：</p><ul><li>数据同步</li><li>路由跳转</li><li>SEO 信息</li><li>如何在开发时方便的进行服务端渲染的测试（模块热更新）</li></ul><p>最近在接触 React 服务端渲染时看到了慕课上的这堂课，自己也看了一遍，以此总结一下，也发现自己在这部分内容的不足之处。想玩转服务端渲染，门槛相当来说也不低，需要有：</p><ul><li>react 全家桶的一些基础知识(react-router、redux 或 mobx 等)</li><li>webpack 基础</li><li>node 基础</li><li>node 框架使用经验 express 或 koa</li><li>es6 基础</li></ul><p>如果拥有以上技能，配出一个服务端渲染不会很难</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/4869616-74fe294d4032c85a.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="工程开发环境搭建"><a href="#工程开发环境搭建" class="headerlink" title="工程开发环境搭建"></a>工程开发环境搭建</h2><h3 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h3><pre class=" language-shell"><code class="language-shell">- build: webpack配置文件夹（客户端/服务端）  - webpack.config.base.js 公共配置文件  - webpack.config.client.js 客户端webpack配置文件  - webpack.config.server.js 服务端webpack配置文件- client: 源码文件夹  - App.jsx 入口组件  - app.js 客户端入口js文件  - server-entry 服务端入口js文件  - template html模板- node_modules: 依赖模块- server： 服务端文件  - server.js: express启动文件  - util 工具方法类文件    - dev-static 服务端开发环境运行文件- babelrc： babel配置文件- .editorconfig：编辑器配置文件- package.json</code></pre><p><strong>package.json 依赖：</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.17.1"</span><span class="token punctuation">,</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.16.2"</span><span class="token punctuation">,</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.2.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.26.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^7.1.2"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-es2015"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-es2015-loose"</span><span class="token operator">:</span> <span class="token string">"^8.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-react"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token property">"cross-env"</span><span class="token operator">:</span> <span class="token string">"^5.1.3"</span><span class="token punctuation">,</span> //  用于命令行启动webpack设置dev或者prod环境    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.30.1"</span><span class="token punctuation">,</span> //  生成html文件并自动注入jswebpack插件    <span class="token property">"http-proxy-middleware"</span><span class="token operator">:</span> <span class="token string">"^0.17.4"</span><span class="token punctuation">,</span> //  express端口转发中间件    <span class="token property">"memory-fs"</span><span class="token operator">:</span> <span class="token string">"^0.4.1"</span><span class="token punctuation">,</span> //  第三方fs模块<span class="token punctuation">,</span>内存读写<span class="token punctuation">]</span>    <span class="token property">"react-hot-loader"</span><span class="token operator">:</span> <span class="token string">"^4.0.0-beta.13"</span><span class="token punctuation">,</span> // react热替换插件 用于维持react组件开发状态    <span class="token property">"rimraf"</span><span class="token operator">:</span> <span class="token string">"^2.6.2"</span><span class="token punctuation">,</span> // 删除文件夹用的npm包    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^2.11.0"</span><span class="token punctuation">,</span> // 前端开发环境服务webpack插件    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^3.10.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-merge"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>npm scripts：</strong></p><pre class=" language-json"><code class="language-json"><span class="token property">"build:client"</span><span class="token operator">:</span> <span class="token string">"webpack --config build/webpack.config.client.js"</span><span class="token punctuation">,</span><span class="token property">"build:server"</span><span class="token operator">:</span> <span class="token string">"webpack --config build/webpack.config.server.js"</span><span class="token punctuation">,</span><span class="token property">"dev:client"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.client.js"</span><span class="token punctuation">,</span><span class="token property">"dev:server"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=development node server/server.js"</span><span class="token punctuation">,</span><span class="token property">"clear"</span><span class="token operator">:</span> <span class="token string">"rimraf dist"</span><span class="token punctuation">,</span><span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"npm run clear &amp;&amp; npm run build:client &amp;&amp; npm run build:server"</span></code></pre><h2 id="客户端相关"><a href="#客户端相关" class="headerlink" title="客户端相关"></a>客户端相关</h2><p><strong>入口 js 文件</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-hot-loader'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.jsx'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ReactDOM.hydrate(   &lt;App />, document.getElementById('root'));</span><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> Component <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> renderMethod <span class="token operator">=</span> module<span class="token punctuation">.</span>hot <span class="token operator">?</span> ReactDOM<span class="token punctuation">.</span>render <span class="token punctuation">:</span> ReactDOM<span class="token punctuation">.</span>hydrate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ReactDOM.hydrate(</span>  <span class="token function">renderMethod</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>AppContainer<span class="token operator">></span>      <span class="token operator">&lt;</span>Component <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>AppContainer<span class="token operator">></span><span class="token punctuation">,</span>    root  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'./App.jsx'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> NextApp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./App.jsx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ReactDOM.hydrate(   &lt;NextApp />, document.getElementById('root'));</span>    <span class="token function">render</span><span class="token punctuation">(</span>NextApp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>客户端 webpack 配置</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HTMLWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生成html页面，同时可以将生成的js注入该html的插件</span><span class="token keyword">const</span> isDev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断当前环境 根据环境不同采取不同的webpack配置 在命令行中设置当前环境 要通过cross-env这个包来保证linux mac win三个平台配置一致</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../client/index.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径 距离：html中引用js 由 ‘/app.js’ 变为</span>    <span class="token comment" spellcheck="true">// '/public/app.js'</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/public/'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// jsx文件通过babel-loader进行处理 核心库：babel-core 插件：babel-preset-es2015</span>      <span class="token comment" spellcheck="true">// babel-preset-es2015-loose babel-preset-react 配置文件在根目录.babelrc中</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.jsx$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// node_modules下的js代码不可以用babel编译，所以我们js和jsx分开写</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.js$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 根据模板生成html文件</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../client/template.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isDev<span class="token punctuation">)</span> <span class="token punctuation">{</span>  config<span class="token punctuation">.</span>entry <span class="token operator">=</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'react-hot-loader/patch'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../client/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  config<span class="token punctuation">.</span>devServer <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// '0,0,0,0'表示我们可以用任何方式进行访问 如localhost 127.0.0.1 以及外网ip 若配置为'localhost'</span>    <span class="token comment" spellcheck="true">// 或'127.0.0.1'别人无法从外网进行调试</span>    host<span class="token punctuation">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 起服务的端口</span>    port<span class="token punctuation">:</span> <span class="token string">'8888'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 起服务的目录，此处与output一致，此处有坑(要考虑publicPath，还要知晓webpack-dev-server生成的文件在内存中，若项目中已经有</span>    <span class="token comment" spellcheck="true">// 了dist则以项目中的dist为准，所以删掉dist吧)</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 热更新 如果不配置webpack-dev-server会在文件修改后全局刷新而非局部替换</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果打包过程中出现错误在浏览器中渲染一层overlay进行展示</span>      errors<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 在此处设置与output相同的publicPath,把静态资源文件放在public文件夹下</span>    <span class="token comment" spellcheck="true">// 使得output.publicPath得以正常运行，其实这里的publicPath更像是output.path</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/public/'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 解决刷新404问题（服务端没有前端路由指向的文件） 全都返回index.html</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>      index<span class="token punctuation">:</span> <span class="token string">'/public/index.html'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></code></pre><h2 id="服务端相关"><a href="#服务端相关" class="headerlink" title="服务端相关"></a>服务端相关</h2><p>服务端渲染需要两个文件</p><ul><li>html 模板</li><li>js 文件</li></ul><p>将这两部分内容通过 react 服务端渲染方法结合为渲染好的 html 返回给浏览器，便完成了服务端渲染</p><p><strong>入口 js 文件</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.jsx'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><p><strong>服务端 webpack 配置</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 服务端渲染的webpack配置文件</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 打包出来的js代码执行在哪个环境</span>  target<span class="token punctuation">:</span> <span class="token string">'node'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../client/server-entry.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 服务端没有浏览器缓存 hash没必要，同时要自己手动引入js</span>    filename<span class="token punctuation">:</span> <span class="token string">'server-entry.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/public'</span><span class="token punctuation">,</span>    libraryTarget<span class="token punctuation">:</span> <span class="token string">'commonjs2'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.jsx$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/.js$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>express</strong></p><p>有了 js，再去取到硬盘上的 html 我们就实现了一个基础的服务端渲染 demo，暂不考虑开发时的热更新等等</p><p><strong>server/server.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ReactSSR <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react-dom/server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> isDev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDev<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// production环境</span>  <span class="token keyword">const</span> serverEntry <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../dist/server-entry'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'utf8'</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将dist目录下的所有文件都托管在public文件夹下</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 服务端渲染</span>    <span class="token keyword">const</span> appString <span class="token operator">=</span> ReactSSR<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>serverEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 替换模板并返回 为啥是&lt;!-- app --> 因为template.html根节点里面的注释，用来占位的</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;!-- app -->'</span><span class="token punctuation">,</span> appString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// devlopment环境</span>  <span class="token keyword">const</span> devStatic <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./util/dev-static'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">devStatic</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'===================================='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is listenging on 3333'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'===================================='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来，我们只需要：</p><ul><li>webpack 打包（服务端）</li><li>启动 express 服务</li></ul><p>就可以在 localhost:3333 端口访问到服务端渲染好的页面了，但是这里有一个问题没解决：</p><p><strong>每一次进行改动都需要进行打包，无法热更新</strong></p><p>我们知道，和生产环境不一样，开发时，webpack-dev-server 是将打包文件放在内存之中而不是直接写文件在硬盘上，读写内存是比读写硬盘快得多的，这样我们修改源文件，反应速度就大大增加了，所以我们服务端也遵循这样的思路引入了 memory-fs</p><p>客户端开发的环境都搭建好了，我们就依赖客户端环境来进行热更新岂不妙哉？所以我们引入了 http-proxy-middleware 中间件，这样在客户端 webpack-dev-server 启动的条件下，我们的可以实时地获得起更新的内容。</p><p>服务端渲染需要的的 js 通过作为 node 模块的 webpack 的方式来进行监听打包（不能直接 require 进来，需要通过比较 hack 的方式读取为字符串转成 js），那需要的 html 呢，并没有直接写在硬盘上，但是客户端环境是已经启动了的，我们通过 axios 去拿到即可。</p><p><strong>/server/util/dev-static.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 该文件为开发时服务端渲染的配置 可以理解为为了实现 快速 热更新 打包 的目的</span><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在这里使用webpack，作为node的一个模块，而非命令行使用</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第三方fs模块，api同node一致，不过是将内容写进内存 -快速</span><span class="token keyword">const</span> MemoryFs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'memory-fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态文件代理 为了publicPath与热更新</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ReactDomServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react-dom/server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 服务端wenpack配置文件</span><span class="token keyword">const</span> serverConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../build/webpack.config.server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用http请求去读取webpack-dev-server中的模板[所以依赖npm run dev:client 热更新也依赖 :p]</span><span class="token keyword">const</span> getTemplate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8888/public/index.html'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hack 将字符串转为模块 参考：http://www.ruanyifeng.com/blog/2015/05/require.html</span><span class="token comment" spellcheck="true">// 获取module的构造函数</span><span class="token keyword">const</span> Module <span class="token operator">=</span> module<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span><span class="token keyword">let</span> serverBundle<span class="token punctuation">;</span><span class="token keyword">const</span> mfs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryFs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动webpack compiler</span>serverCompiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>serverConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// webpack提供给我们的配置项，此处将其配置为 通过mfs进行读写（内存）</span>serverCompiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> mfs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听entry处的文件是否有变动 若有变动重新打包</span>serverCompiler<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  stats <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印错误和警告信息</span>  stats<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stats<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>warn <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>warn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打包的文件所在路径</span>  <span class="token keyword">const</span> bundlePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>    serverConfig<span class="token punctuation">.</span>output<span class="token punctuation">.</span>path<span class="token punctuation">,</span>    serverConfig<span class="token punctuation">.</span>output<span class="token punctuation">.</span>filename  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取打包完成的js文件（注：文件是在内存中而非硬盘中，类比webpack-dev-server的文件）</span>  <span class="token comment" spellcheck="true">// 此时获得的是字符串，并非可执行的js，我们需要进行转换</span>  <span class="token keyword">const</span> bundle <span class="token operator">=</span> mfs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>bundlePath<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个空模块</span>  <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 编译字符串 要指定名字</span>  m<span class="token punctuation">.</span><span class="token function">_compile</span><span class="token punctuation">(</span>bundle<span class="token punctuation">,</span> <span class="token string">'server-entry.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 暴露出去 .default : require => es6 module</span>  serverBundle <span class="token operator">=</span> m<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将 `/public` 的请求全部代理到webpack-dev-server启动的服务 思考 express.static为啥不能用</span>  <span class="token comment" spellcheck="true">// 我们要借用webpack-dev=server的热更新 热更新就不是服务端渲染了 就第一次是</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8888'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>template <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> content <span class="token operator">=</span> ReactDomServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>serverBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;!-- app -->'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样服务端的一个基础环境就搭建好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章思路来源于 &lt;a href=&quot;https://coding.imooc.com/class/161.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;慕课网: W
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="http://coder.liusixin.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>前端本地文件操作与上传</title>
    <link href="http://coder.liusixin.cn/posts/31d18908/"/>
    <id>http://coder.liusixin.cn/posts/31d18908/</id>
    <published>2018-02-03T16:38:10.000Z</published>
    <updated>2018-02-03T16:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端无法像原生 APP 一样直接操作本地文件，需要通过用户触发， 用户可通过以下三种方式操作触发：</p><ul><li>通过 <code>input type=&quot;file&quot;</code> 选择本地文件</li><li>通过拖拽的方式把文件拖过来</li><li>在编辑框里面复制粘贴</li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="input-type-”file”-方式"><a href="#input-type-”file”-方式" class="headerlink" title="input[type=”file”] 方式"></a>input[type=”file”] 方式</h3><p>第一种是最常用的手段， 通常还会自定义一个按钮，然后盖在它上面，因为 <code>type=&quot;file&quot;</code> 的 input 不容易改变样式。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file-input<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>用 <code>FormData</code> 获取整个表单的内容</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#file-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`file name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'fileName'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>把 input 的 <code>value</code> 和 <code>formData</code> 打印出来是这样的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180729-183529@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到文件路径不是真实的路径，浏览器无法获取到文件的真实存放位置。同时 <code>FormData</code> 打印出来是一个空的 <code>Object</code>, 但并不是说它的内容是空的，只是它对前端是透明的，无法查看、修改、删除里面的内容，只能 <code>append</code> 添加字段。</p><p><code>FormData</code> 无法得到文件的内容， 而使用 <code>FileReader</code> 可以读取整个文件的内容。 用户选择文件之后， <code>input.files</code> 就可以得到用户选中的文件</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#file-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> fileType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>  fileReader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^image/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 读取结果在fileReader.result里面</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印原始File对象</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// base64方式读取</span>  fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180729-184545@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>它是一个 <code>window.File</code> 的实例，包含了文件修改时间、文件名、文件大小、文件的 <code>mime</code> 类型等。如果需要限制上传文件的大小就可以通过判断 <code>size</code> 属性是否超出范围，单位是字节，判断是否为图片文件就可以通过 <code>type</code> 类型是否以 <code>image</code> 开头。上面使用了一个正则判断，但是 Web 不是所有的图片都能通过 img 标签展示出来， 通常是 <code>jpg/jpeg/png/gif</code> 这四种，我们优化一下代码:</p><pre class=" language-js"><code class="language-js"><span class="token regex">/^image\/[jpeg|jpg|png|gif]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后实例化一个 <code>FileReader</code>, 调用它的 <code>readAsDataURL</code>并把 File 对象传给它， 监听它的 onload 事件，load 完读取的结果就在它的 result 属性里了。它是一个 base64 格式的， 可直接赋值给一个 img 的 src。</p><p>使用 FileReader 除了可读取为 base64 之外，还能读取为以下格式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 按base64的方式读取，结果是base64, 任何文件都可转成base64的形式</span>fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以二进制字符串方式读取，结果是二进制内容的utf-8形式，巳被废弃了</span>fileReader<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以原始二进制方式读取，读取结杲可直接转成整数数组</span>fileReader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其他的主要是能读取为 ArrayBuffer, 它是一个原始二进制格式的结果。把 ArrayBuffer 打印出来是这样的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180729-190616@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，它对前端人员也是透明的，不能够直接读取里面的内容， 但可以通过<code>ArrayBuffer.length</code> 得到长度，还能转成整型数组，从而知道文件的原始二进制内容</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> buffer <span class="token operator">=</span> fileReader<span class="token punctuation">.</span>result<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 依次每字节8位读取， 放到一个整数数组</span><span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="通过拖拽的方式"><a href="#通过拖拽的方式" class="headerlink" title="通过拖拽的方式"></a>通过拖拽的方式</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  drop your image here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>然后监听它的拖拽事件</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.img-container'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据在event的dataTransfer对象里</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>originalEvent<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//然后就可以使用FileReader进行操作</span>    fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//或者是添加到一个FormData</span>    <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'fileContent'</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数据在 drop 事件的 <code>event.dataTransfer.files</code> 里面， 拿到这个 File 对象之后就可以和输入框进行一样的操作了，即使用 FileReader 读取，或者是新建一个空的 formData, 然后把它 append 到 formData 里面。</p><h3 id="粘贴的方式"><a href="#粘贴的方式" class="headerlink" title="粘贴的方式"></a>粘贴的方式</h3><p>通常是在一个编辑框里操作，如把 div 的 <code>contenteditable</code>设置为 true</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  hello, paste your image here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>粘贴的数据是在 <code>event.clipboardData.files</code> 里面</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#editor'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'paste'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>originalEvent<span class="token punctuation">.</span>clipboardData<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180729-194458@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是 <strong>Safari</strong> 的粘贴不是通过 event 传递的，而是直接在输入框里面添加一张图片，它新建了一个 img 标签， 并把 img 的 src 指向一个 blob 的本地数据。什么是 blob 呢，如何读取 blob 的内容呢？</p><blockquote><p>blob 是一种类文件的存储格式 (Blob 派生了 File), 它可以存储几乎任何格式的内容</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> hello<span class="token punctuation">:</span> <span class="token string">'world'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了获取本地的 blob 数据，我们可以用 ajax 发个本地的请求：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#editor'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'paste'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 需要setTimeout 0等图片出来了再处理</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[src ^="blob"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用－个xhr获取blob数据</span>    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 改变mime类型</span>    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'blob'</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// response就是一个Blob对象</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样能得到它的大小和类型，但是具体内容也是不可见的，它有一个 slice 的方法，可用千切割大文件。和 File 一样，可以使用 FileReader 读取它的内容</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">readBlob</span><span class="token punctuation">(</span>blobImg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fileReader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  fileReader<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>blobImg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// response就是一个Blob对象</span>  <span class="token function">readBlob</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>除此之外，还能使用 <code>window.URL</code> 读取， 这是一个新的 API, 经常和 Service Worker 配套使用， 因为 Service Worker 里面常常要解析 url。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">readBlob</span><span class="token punctuation">(</span>blobImg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> urlCreator <span class="token operator">=</span> window<span class="token punctuation">.</span>URL <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitURL<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 得到base64结果</span>  <span class="token keyword">let</span> imageUrl <span class="token operator">=</span> urlCreator<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> imageUrl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关于 src 使用的是 blob 链接的，除了上面提到的 img 之外， 另外一个很常见的是 video 标签。</p><p>这种数据不是直接在本地的，而是通过持续请求视频数据，然后再通过 blob 这个容器媒介添加到 video 里面，它也是通过 URL 的 API 创建的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> mediaSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>video<span class="token punctuation">.</span>src <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>mediaSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> sourceBuffer <span class="token operator">=</span> mediaSource<span class="token punctuation">.</span><span class="token function">addSourceBuffer</span><span class="token punctuation">(</span>  <span class="token string">'video/mp4; codecs="avc1.42E01E,mp4a.40.2"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sourceBuffer<span class="token punctuation">.</span><span class="token function">appendBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面， 我们使用了三种方式获取文件内容，最后得到：</p><ul><li>FormData 格式</li><li>FileReader 读取得到的 base64 或者 ArrayBuffer 二进制格式</li></ul><blockquote><p>如果直接就是一个 FormData 了， 那么直接用 AJAX 发出去就行了， 不用做任何处理。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'fileName'</span><span class="token punctuation">,</span> <span class="token string">'photo.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 假设上传文件的接口叫upload</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'/upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果用 jQuery 的话， 要设置两个属性为 false</p><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'/upload'</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> formData<span class="token punctuation">,</span>  processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//不处理数据</span>  contentType<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//不设置内容类型</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为 jQuery 会自动对内容进行转义，并且根据 data 自动设置请求 mime 类型，这里告诉 jQuery 直接用 xhr.send 发出去就行了。</p><p>从请求数据结果可以看到它的编码格式是 <code>multipart/form-data</code>, 就是上传文件 form 表单写的 <code>enctype</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>如果 <code>xhr.send</code> 是 FormData 类型，它会自动设置 <code>enctype</code>, 如果你用默认表单提交上传文件的话就得在 form 上面设置这个属性，因为上传文件只能使用 POST 的这种编码。 常用的 POST 编码是 <code>application/x-www-form-urlencoded</code>, 它和 GET 一样，发送的数据里面，参数和参数之间使用＆连接</p><pre class=" language-js"><code class="language-js">key1<span class="token operator">=</span>value1<span class="token operator">&amp;</span>key2<span class="token operator">=</span>value2</code></pre><p>特殊字符做转义，这个数据 POST 是放在请求 body 里的，而 GET 是拼在 url 上面的，如果用 jq 的话，jq 会帮你拼并做转义。</p><p>而上传文件用的这种 <code>multipart/form-data</code>, 参数和参数之间是一个相同的字符串隔开的，上面的是使用：</p><pre class=" language-shell"><code class="language-shell">-----WebKitFormBoundary72yvM25iSPYZ4a3F</code></pre><p>这个字符通常会取得比较长、而且随机，因为要保证正常的内容里面不会出现这个字符串，这样内容的特殊字符就不用做转义了。</p><p>请求的 <code>contentType</code> 被浏览器设置成：</p><pre class=" language-shell"><code class="language-shell">Content-Type:multipart/form-data; boundary=-----WebKitFormBoundary72yvM25iSPYZ4a3F</code></pre><p>后端服务通过这个就知道怎么解析这么一段数据了（通常是使用框架处理，而具体的接口不需要关心应该怎么解析）。</p><p>如果读取结果是 ArrayBuffer 的话，也是可以直接用 <code>xhr.send</code> 发送出去，但是一般我们不会直接把一个文件的内容发出去，而是用某个字段名等于文件内容的方式。如果你读取为 ArrayBuffer 再上传的话其实作用不是很大，还不如直接用 formData 添加一个 File 对象的内容，因为上面三种方式都可以拿到 File 对象。如果一开始就是一个 ArrayBuffer 了，那么可以转成 blob 然后再 append 到 FormData 里面。</p><p>使用比较多的应该是 base64, 因为前端经常要处理图片，读取为 base64 之后就可以把它画到一个 canvas 里面，然后就可以做一些处理，如压缩、裁剪、旋转等。 最后再用 canvas 导出一个 base64 格式的图片， 那怎么上传 base64 格式的呢？</p><p>第一种是拼一个表单上传的 <code>multipart/form-data</code> 的格式， 再用 <code>xhr.sendAsBinary</code> 发出去</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> base64Data <span class="token operator">=</span> base64Data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^data:image\/[^;]+;base64,/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> boundary <span class="token operator">=</span> <span class="token string">'----------boundaryasoifvlkasldvavoadv'</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">sendAsBinary</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// name=data</span>    boundary<span class="token punctuation">,</span>    <span class="token string">'Content一Disposition: form-data; name="data"; filename="'</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">'"'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type: '</span> <span class="token operator">+</span> <span class="token string">'image/'</span> <span class="token operator">+</span> fileType<span class="token punctuation">,</span>    <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token function">atob</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">,</span>    boundary<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//name=imageType</span>    boundary<span class="token punctuation">,</span>    <span class="token string">'Content-Disposition: forrn-data; name="imageType"'</span><span class="token punctuation">,</span>    <span class="token string">''</span><span class="token punctuation">,</span>    fileType<span class="token punctuation">,</span>    boundary <span class="token operator">+</span> <span class="token string">'--'</span>  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码使用了 <code>window.atob</code> 的 api, 它可以把 base64 还原成原始内容的字符串表示。</p><p>btoa 是把内容转化成 base64 编码，而 atob 是把 base64 还原。在调 atob 之前，需要把表示内容格式的不属千 base64 内容的字符串去掉，即上面代码第一行的 replace 处理。</p><p>这样就和使用 formData 类似了，但是由于 sendAsBinary 巳经被 deprecated 了， 所以新代码不建议再使用这种方式。</p><p>可以把 base64 转化成 blob, 然后再 append 到一个 formData 里面，下面的函数可以把 base64 转成 blob</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">b64toBlob</span><span class="token punctuation">(</span>b64Data<span class="token punctuation">,</span> contentType<span class="token punctuation">,</span> sliceSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>  contentType <span class="token operator">=</span> contentType <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  sliceSize <span class="token operator">=</span> sliceSize <span class="token operator">||</span> <span class="token number">512</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> byteCharacters <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>b64Data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> byteArrays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> offset <span class="token operator">=</span> O<span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> byteCharacters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> offset <span class="token operator">+</span><span class="token operator">=</span> sliceSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> slice <span class="token operator">=</span> byteCharacters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> offset <span class="token operator">+</span> sliceSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> byteNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> O<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slice<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      byteNumbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> byteArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>byteNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>    byteArrays<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>byteArrays<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> contentType <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> blob<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后就可以 append 到 formData 里面</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token function">b64toBlob</span><span class="token punctuation">(</span>b64Data<span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'fileContent'</span><span class="token punctuation">,</span> blob<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就不用自己去拼一个 <code>multipart/form-data</code> 的格式数据了。</p><p>上面处理和上传文件的 API 可以兼容到 IElO+, 如果要兼容老的浏览器应该怎么办呢？</p><p>可以借助一个 iframe, 原理是默认的 form 表单提交会刷新页面， 或者跳到 target 指定的那个 url, 但是如果把 iframe 的 target 指向一个 iframe, 那么刷新的就是 iframe, 返回结果也会显示在 iframe, 然后获取这个 iframe 的内容就可得到上传接口返回的结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'form-iframe'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 改变form的target</span>form<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token string">'form-iframe'</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取iframe的内容 即服务返回的数据</span>  <span class="token keyword">let</span> responseText <span class="token operator">=</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span>textContent <span class="token operator">||</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>form.submit</code> 会触发表单提交，当请求完成（成功或者失败）之后就会触发 iframe 的 onload 事件，然后在 onload 事件获取返回的数据，如果请求失败，则 iframe 里的内容就为空（可以用这个判断请求有没有成功）。</p><p>使用 iframe 没有办法获取上传进度，使用 xhr 可以获取当前上传的进度。</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前上传进度的百分比</span>    <span class="token function">duringCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>loaded <span class="token operator">/</span> event<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> lOO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文列举了 3 种交互方式的读取方式</p><ul><li>通过 input 控件在 <code>input.files</code> 可以得到 File 文件对象</li><li>通过拖拽的是在 drop 事件的 <code>event.dataTransfer.files</code> 里面</li><li>通过粘贴的 paste 事件在 <code>event.clipboardData.files</code> 里面<ul><li>Safari 是在编辑器里面插入一个 src 指向本地的 img 标签，可以通过发送一个请求加载本地的 blob 数据，然后再通过 FileReader 读取，或者直接 append 到 formData 里面。得到的 File 对象就可以直接添加到 FormData 里面，如果需要先读取 base64 格式做处理的，可以把处理后的 base64 转化为 blob 数据再 append 到 formData 里面。对于老浏览器，可以使用一个 iframe 解决表单提交刷新页面或者跳页的问题。</li></ul></li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol><li><p>如果要上传多个文件，只要给 input 加个 <code>multiple</code> 的属性即可。</p></li><li><p>网盘的断点续传是怎么实现的？</p></li></ol><ul><li>使用 blob 分割大文件上传</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`总共发送</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">字节`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ONE_MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token keyword">let</span> sendedBytes <span class="token operator">=</span> O<span class="token punctuation">;</span>fileReader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 发送分割的片段</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  sendedBytes <span class="token operator">+</span><span class="token operator">=</span> ONE_MB<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sendedBytes <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// File的slice方法继承于Blob</span>    <span class="token keyword">let</span> blob <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>sendedBytes<span class="token punctuation">,</span> sendedBytes <span class="token operator">+</span> ONE_MB<span class="token punctuation">)</span><span class="token punctuation">;</span>    fileReader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> blob <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>O<span class="token punctuation">,</span> ONE_MB<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob <span class="token keyword">instanceof</span> <span class="token class-name">Blob</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>fileReader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码把一个文件分割成 1MB 的 blob 片段依次上传，如果上传一半突然断了的话下一次再重新上传的时候，服务端会告知上一次已经接收的数据量，我们可以根据后端告知的这些字节数去换算一下需要从哪个 blob 片段开始上传。这样就实现断点续传了。还有一个问题就是怎么知道用户又选了同一个文件呢？或者怎么知道这个文件有没有被它修改过了？可以通过计算文件内容的哈希值作为一个文件的标志。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前端无法像原生 APP 一样直接操作本地文件，需要通过用户触发， 用户可通过以下三种方式操作触发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;cod
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="HTML5" scheme="http://coder.liusixin.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>搭建jenkins+docker+nodejs项目的持续集成</title>
    <link href="http://coder.liusixin.cn/posts/2429b53d/"/>
    <id>http://coder.liusixin.cn/posts/2429b53d/</id>
    <published>2018-01-24T02:20:27.000Z</published>
    <updated>2018-01-24T02:20:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>“Docker 是一个为开发者和运维管理员搭建的开放平台软件， 可以在这 个平台上创建、 管理和运行生产应用。 Docker Hub 是一个云端服务， 可以用 它共享应用或自动化工作流。 Docker 能够从组件快速开发应用， 并且可以轻松地创建开发环境、 测试环境和生产环境。”</p></blockquote><p>通俗地说， Docker 是一个开源的应用容器引擎， 可以让开发者打包自 己的应用及依赖包到一个可移植的容器中， 然后发布到任何流行的 Linux 机器上， 也可以实现虚拟化。 Docker 容器完全使用沙箱机制， 独立于硬件、语言、框架、 打包系统， 相互之间不会有任何接口， 几乎没有任何性能开销， 便可以很容易地在机器和数据中心中运行。 最重要的是， 它不依赖于任何语言、 框架或系统。</p><h2 id="Docker-的基本命令"><a href="#Docker-的基本命令" class="headerlink" title="Docker 的基本命令"></a>Docker 的基本命令</h2><p>这里 docker 的安装和启动就不介绍了， 网上有很多教程。</p><p>通过 <code>docker images</code> 查看是否安装成功。</p><p><strong>常用命令</strong></p><pre class=" language-shell"><code class="language-shell">$ docker -h</code></pre><h3 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1. 获取镜像"></a>1. 获取镜像</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker pull NAME [:TAG]# 命令示例：$ sudo docker pull centos:latest</code></pre><h3 id="2-启动-Containe-盒子"><a href="#2-启动-Containe-盒子" class="headerlink" title="2. 启动 Containe 盒子"></a>2. 启动 Containe 盒子</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker run [OPTIONS] IMAGE [COMMAND] [ARG...]# 简单示例：$ sudo docker run -t 一i centos /bin/bash</code></pre><h3 id="3-查看镜像列表"><a href="#3-查看镜像列表" class="headerlink" title="3. 查看镜像列表"></a>3. 查看镜像列表</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker images [OPTIONS] [NAME]# 命令示例：$ sudo docker images centos</code></pre><h3 id="4-查看容器列表"><a href="#4-查看容器列表" class="headerlink" title="4. 查看容器列表"></a>4. 查看容器列表</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker ps [OPTIONS]# 查看所有运行中或者停止运行的盒子的命令示例：$ sudo docker ps -a</code></pre><h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5. 删除镜像"></a>5. 删除镜像</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker rmi IMAGE [IMAGE...]# 命令示例：$ sudo docker rmi centos:latest</code></pre><h3 id="6-移除一个或多个容器实例"><a href="#6-移除一个或多个容器实例" class="headerlink" title="6. 移除一个或多个容器实例"></a>6. 移除一个或多个容器实例</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker rm [OPTIONS] CONTAINER [CONTAINER...]# 移除所有未运行的容器的命令示例：$ sudo docker rm sudo docker ps -aq</code></pre><h3 id="7-停止一个正在运行的容器"><a href="#7-停止一个正在运行的容器" class="headerlink" title="7. 停止一个正在运行的容器"></a>7. 停止一个正在运行的容器</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker kill [OPT工ONS] CONTAINER [CONTAINER...]# 命令示例：$ sudo docker kill 026e</code></pre><h3 id="8-重启一个正在运行的容器"><a href="#8-重启一个正在运行的容器" class="headerlink" title="8. 重启一个正在运行的容器"></a>8. 重启一个正在运行的容器</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker restart [OPTIONS] CONTAINER [CONTAINER...]# 命令示例：$ sudo docker restart 026e</code></pre><h3 id="9-启动一个已经停止的容器"><a href="#9-启动一个已经停止的容器" class="headerlink" title="9. 启动一个已经停止的容器"></a>9. 启动一个已经停止的容器</h3><pre class=" language-shell"><code class="language-shell">$ sudo docker start [OPTIONS] CONTAINER [CONTAINER...]# 命令示例：$ sudo docker start 026e</code></pre><h2 id="连接-Container"><a href="#连接-Container" class="headerlink" title="连接 Container"></a>连接 Container</h2><p>nsenter 是一个小的工具， 通过使用 nsenter 可以进入一个已经存在的 Container 中， 尽管这个 Container 没有安装 SSH Server 或者其他类似软件。</p><blockquote><p>nsenter 项目的地址为: <a href="https://github.com/jpetazzo/nsenter" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jpetazzo/nsenter</a></p></blockquote><p><strong>通过命令来安装 nsenter</strong></p><pre class=" language-shell"><code class="language-shell">$ sudo docker run -v /usr/local/bin:/target jpetazzo/nsenter</code></pre><p>我们先要找出需要进入的 Container 的 pid</p><pre class=" language-shell"><code class="language-shell">PID=$(docker inspect --format {{.State.Pid}} <container_name or _ID>)# 命令实例：$ sudo docker inspect --format {{.State.Pid}} bdb6103da9924904</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-172757@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里我们得到了 id 为 9479 的 Container 的 pid 号为 7026, 这句话有点拗口，其实我们只需关心 7026 这个 pid 号就可以了。 我们根据刚才获得的 pid 就能顺利进入 Container 的内部了。</p><pre class=" language-shell"><code class="language-shell">$ sudo nsenter --target $PID --mount --uts --ipc --net --pid# 这里我们把$PID替换为 4904 即可$ sudo nsenter --target 4904 --mount --uts --ipc --net --pid</code></pre><h2 id="发布应用"><a href="#发布应用" class="headerlink" title="发布应用"></a>发布应用</h2><p>我们简单制作一个 Node.js 包含 Express 环境的镜像，通过 pm2 来启动 Web 应用，然后发布到 Docker 云上；我们还会使用 Redis 数据库来暂存用户的访问次数；在 Node.js 应用前端，我们需要放置一个 Nginx 作为反向代理。</p><p>首先，我们把需要用到的 Image 镜像统统下载到本地并启动</p><pre class=" language-shell"><code class="language-shell">$ sudo docker pull redis:latest$ sudo docker pull node:latest</code></pre><p>在本地创建一个部署 Node.js 应用的目录，然后初始化<code>package.json</code></p><pre class=" language-shell"><code class="language-shell">$ mkdir /var/node/docker_node</code></pre><p>在创建我们的应用之前，我们从 node 这个镜像基础上开始制作自己的镜像，这个镜像只是比 node 镜像多了一个 pm2 命令。</p><pre class=" language-shell"><code class="language-shell">$ sudo docker run -i -t node /bin/bash＃ 进入Container的bash$ npm install pm2 -g$ pm2 -v＃考虑国内的网络 再装下cnpm更靠谱些$ npm install cnpm -g --registry=https://registry.npm.taobao.org＃从Container的bash退出$ exit</code></pre><p>这样我们就成功地在 node 这个镜像的基础上安装了 pm2, 然后把这个 Container 保存为镜像，这样以后要用到带 pm2 的 Node.js 镜像时，只需下载它即可。</p><p>首先要登陆下 docker hub，账号自行创建，登录成功之后</p><pre class=" language-shell"><code class="language-shell">＃查看所有Container, 找到刚才的id$ sudo docker ps -a</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-174324@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><pre class=" language-shell"><code class="language-shell">＃登录成功之后 把Container提交为Images$ sudo docker commit bdb6103da992 fordreamxkhl/node_pm2＃然后查看Images列表$ sudo docker images node_pm2</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-175445@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><pre class=" language-shell"><code class="language-shell">＃把镜像提交到云上$ sudo docker push fordreamxkhl/node_pm2</code></pre><p>这样新的镜像就保存到了 Docker 云上，然后我们把本地的<br>fordreamxkhl/node_pm2 删除，试着从云上下载这个镜像。</p><pre class=" language-shell"><code class="language-shell">$ sudo docker rmi fordreamxkhl/node_pm2$ sudo docker images fordreamxkhl/node_pm2＃会发现是空的，然后我们从云上pull$ sudo docker pull fordreamxkhl/node_pm2＃稍等片刻即可下载完毕</code></pre><p>接下来我们通过 Redis 镜像启动一个 Redis 的 Container</p><pre class=" language-shell"><code class="language-shell">$ sudo docker run --name redis-server -d redis redis-server --appendonly yes</code></pre><p>然后编写 Node.js 代码来实现这个计数访问应用的功能。</p><p>在 <code>/var/node/docker_node</code> 目录下创建如下<code>package.json</code>文件(这里对依赖包写上版<br>本号是比较稳妥的方式，可以免去因为依赖包升级而造成的应用不稳定的情况)</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docker_node"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>  <span class="token property">"engines"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">">=0.10.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.10.2"</span><span class="token punctuation">,</span>    <span class="token property">"redis"</span><span class="token operator">:</span> <span class="token string">"^0.12.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们创建 app.js, 启动并监听 8000 端口，同时通过 Redis 记录访问次数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'redis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从环境变量里读取Redis服务器的ip地址</span><span class="token keyword">var</span> redisHost <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">'REDIS_PORT_6379_TCP_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> redisPort <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">'REDIS_PORT_6379_TCP_PORT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> reidsClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span>redisPort<span class="token punctuation">,</span> redisHost<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  reidsClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'access_count'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> countNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'get access count error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>countNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      countNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      countNum <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countNum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    reidsClient<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'access_count'</span><span class="token punctuation">,</span> countNum<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'set access count error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>countNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们先启动一个 Container 把依赖包装一下</p><pre class=" language-shell"><code class="language-shell">$ sudo docker run --rm -i -t -v /var/node/docker_node:/var/node/docker_node -w /var/node/docker_node/ fordreamxkhl/node_pm2 npm install</code></pre><p><code>-w</code> 表示命令执行的当前工作目录，屏幕会打印依赖包的安装过程，等所有 Node.js 的包安装完成后，这个 Container 会自动退出，然后我们进入 <code>/var/node/docker_node/</code> 目录， 就可以看到 <code>node_modules</code> 文件夹，说明我们的依赖包安装完毕了。</p><p>如果出现 EACCESS 的权限错误，那么可以执行如下命令， 许可 SELinux 的工作状态，不过这只是临时修改，重启系统后会恢复。</p><pre class=" language-shell"><code class="language-shell">su -c "setenforce 0"</code></pre><p>代码开发完毕，基于刚才我们提交的 <code>fordreamxkhl/node_pm2</code> 镜像，我们要启动一个运行这个程序的 Container, 要求这个 Container 有端口映射、文件挂<br>载，并同时加载 Redis 的那个 Container</p><pre class=" language-shell"><code class="language-shell">＃ 挂载pm2的日志输出$ mkdir /var/log/pm2＃ 使用pm2启动app应用，但是会有问题$ sudo docker run -d --name "nodeCountAccess" -p 8000:8000 -v /var/node/docker_node:/var/node/docker_node -v /var/log/pm2:/root/.pm2/logs/ --link redis-server:redis -w /var/node/docker_node/ fordreamxkhl/node_pm2 pm2 start app.js</code></pre><p>但是我们在执行<code>docker ps</code>后会发现这个 Container 并没有启动，因为我们利用 pm2 的守护进程方式启动了应用，所以 Container 会认为进程已经运行结束，所以自已退出了，这时我们让 pm2 以非守护进程的方式运行在 Container 里即可</p><pre class=" language-shell"><code class="language-shell">$ sudo docker run -d --name "nodeCountAccess" -p 8000:8000 -v /var/node/docker_node:/var/node/docker_node -v /var/log/pm2:/root/.pm2/logs/ --link redis-server:redis -w /var/node/docker_node/ fordreamxkhl/node_pm2 pm2 start --no-daemon app.js</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-184548@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到<code>nodeCountAccess</code>这个名字的 Container 在运行了， 使用浏览器打开主机的 8000 端口，也能看到访问的计数次数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-184854@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>接下来开始配置 Nginx 的反向代理</strong></p><p>由于使用 Docker 的 Container 的 IP 地址是动态变化的，若我们想 要使用 Nginx 容器来做反向代理，那么配置写起来会比较困难，这里我们就暂不使用 Docker 容器来管理 Nginx 了，而是使用本地 Nginx。</p><p>我们修改 nginx 的配置文件</p><pre class=" language-shell"><code class="language-shell">worker_processes  1;events {  worker_connections  1024;}http {  include  mime.types;  default_type  application/octet-stream;  server_names_hash_bucket_size  64;  access_log  off;  sendfile  on;  keepalive_timeout  65;  server {    listen  3001;    location / {      proxy_pass  http://127.0.0.1:8000;      proxy_redirect  default;      proxy_http_version  1.1;      proxy_set_header  Upgrade $http_upgrade;      proxy_set_header  Connection $http_connection;      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;      proxy_set_header  Host $http_host;    }  }}</code></pre><p>重启 nginx，然后打开浏览器，输入主机 IP:3001 就可以正常访问我们之前启动的 Node.js 访问计数应用。</p><h2 id="Jenkins-的持续集成"><a href="#Jenkins-的持续集成" class="headerlink" title="Jenkins 的持续集成"></a>Jenkins 的持续集成</h2><p>Jeknins 是一款由 Java 开发的开源软件项目， 旨在提供一个开放易用的软件平台，使持续集成变成可能，它的前身就是大名鼎鼎的 Hundson。Hundson 是收费的商用版本，Jenkins 是它的一个免费开源的分支，所以我们选择使用 Jenkins。</p><p>那什么是持续集成呢？以下概念摘自 IBM 团队的定义：</p><blockquote><p>“随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题，持续集成正是针对这类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证的，包括自动编译、发布和测试，从而尽快发现集成错误，让团队能够更快地开发内聚的软件。”</p></blockquote><p>待续集成的核心价值在于如下几点：</p><ol><li><p>持续集成中的任何一个环节都是自动完成的，无须太多的人工干预，有利千减少重复过程，以节省时间、费用和工作量。</p></li><li><p>持续集成保障了每个时间点上团队成员提交的代码是能成功集成 的。也就是说，在任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为可能。</p></li><li><p>持续集成还利于软件本身的发展趋势，这点在需求不明确或者频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队开发产品的信心。</p></li></ol><h3 id="通过-Docker-安装和启动-Jenkins"><a href="#通过-Docker-安装和启动-Jenkins" class="headerlink" title="通过 Docker 安装和启动 Jenkins"></a>通过 Docker 安装和启动 Jenkins</h3><pre class=" language-shell"><code class="language-shell">$ docker pull jenkins:latest</code></pre><p>拉取镜像之后，我们先创建目录，然后就可以启动 Jenkins 的 Container 了，我们要把 Jenkins 的文件存储地址挂载到主机上，以免 Jenkins 服务器重装或者迁移造成数据丢失。另外，Jenkins 会搭建在内网的服务器上，而非生产服务器，如果外网能直接访问， 那么可能会造成一定的风险。</p><pre class=" language-shell"><code class="language-shell">＃ 创建本地的Jenkins配置文件目录$ mkdir /var/jenkins_home$ sudo docker run -d --name myjenkins -p 39001:8080 -v /var/jenkins_home:/var/jenkins_home jenkins</code></pre><p>这样我们就顺利启动了 Jenkins 的服务，8080 端口是 Jenkins 的默认监听端口，我们把它映射到了本地主机的 39001 端口，要注意把搭建 Jenkins 服务器的 iptables 关闭，一切顺利的话，我们就可以看到 Jenkins 的欢迎页面了。</p><h3 id="配置-Jenkins-并自动化部署-Node-js-项目"><a href="#配置-Jenkins-并自动化部署-Node-js-项目" class="headerlink" title="配置 Jenkins 并自动化部署 Node.js 项目"></a>配置 Jenkins 并自动化部署 Node.js 项目</h3><p>我们需要对 Jenkins 进行一些简单的配置，才能让它自动化地部署应用。</p><p>进入系统管理一&gt;管理插件一&gt;可选插件，安装这些插件</p><ul><li>Git Plugin (This plugin integrates GIT with Jenkins)</li><li>Publish Over SSH (Send build artifacts over SSH)</li></ul><p>安装完成后重启 Jenkins, 一般安装完毕后会自动重启，如果自动重启失败，那么可以进入 Jenkins 的目录/restart 下手动重启。</p><pre class=" language-shell"><code class="language-shell">＃ 进入目录手动重启http://39.104.124.220:39001/restart</code></pre><p>如果可选插件列表为空，那么进入 ＂高级” 选项卡，单击 “立即获取“ 按钮，就可以获取可选插件列表了。</p><p>重启完成之后，进入系统管理一&gt;系统设置 来对插件进行简单的设置，增加远程的服务器配置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-230814@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>填入我们待发布的生产服务器的 IP 地址、SSH 端口及用户名、密码等信息。如果远程服务器是通过 key 来登录的，那么还需要把 key 的存放路径写上。</p><p>配置完成之后，我们开始创建一个新的项目。</p><p>创建项目名 <code>node_access_count</code>, 选择创建一个自由风格的软件项目，单击”ok”按钮，就进入了此项目的创建页面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-231218@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在配置页，我们找到＂源码管理”选项，然后填入 GitHub 上的源码地址。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180801-232153@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>单击 Add 按钮，添加 GitHub 账号，我们就是通过这个账号来拉取源代码的。</p><p>把配置页向下滚动，在 “构建“ 一栏处，单击下拉莱单，选择<code>Execute shell</code>。</p><p>发布一个 Node.js 程序由于不需要编译， 所以大致的流程如下。</p><ol><li>Jenkins 从代码库(SYN 或 Git)获取最新代码。</li><li>本地将所需的代码打包，需要排除一些文件，比如.git 文件等。</li><li>把代码包通过 SSH 发送到远程的服务器上。</li><li>停止远程服务器的服务，删除远程服务器上的代码，解压缩新的代码包。</li><li>通过新的<code>package.json</code>安装依赖包，然后重新启动服务。</li></ol><p>从代码库获取最新代码是 Jenkins 自动执行的，每次构建都会去做，所以我们不必去配置，接着我们开始第一步：打包最新代码。我们在文本框中输入如下命令，先删除之前的 tar 包，然后重新打包代码。</p><pre class=" language-shell"><code class="language-shell">  rm -rf /var/jenkins_home/jobs/node_access_count/node_access_count.tar.gz  tar -zcvf /tmp/node_access_count.tar.gz -C /var/jenkins_home/jobs/node_access_count/workspace/docker—node . --exclude="*.git"  mv /tmp/node_access_count.tar.gz /var/jenkins_home/jobs/node_access_count/workspace/</code></pre><p>然后我们需要把代码包发送到远程的生产服务器上，这时需要选择 Send files.. 选项。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180802-095536@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在<code>Source files</code>一行中，填写我们要发送到远程服务器的文件，我们把刚才打包的文件名<code>node_access_count.tar.gz</code>填入，这里的工作路径是本项目下的 workspace, 在这里是 <code>/var/jenkins_home/jobs/node_access_count/workspace/</code>。</p><p>在<code>Remote directory</code>一行中， 填写发送代码包的远程保存地址，我们在这里写入 <code>var/</code>, 我们创建这台服务器时填入的远程默认地址是 <code>&quot;/&quot;</code>, 所以我们发送到这台服务器上的代码包<code>node_access_count.tar.gz</code>会被保存在<code>/var/node_access_count.tar.gz</code>路径下。</p><p>接下来先把旧的代码删除，然后解压缩新的代码，并安装依赖包和重启服务，我们在<code>Exec command</code>一栏中填入如下命令。</p><pre class=" language-shell"><code class="language-shell">docker rm -f nodeCountAccessmkdir /var/nodemkdir /var/node/docker_nodemkdir /var/log/pm2rm -rf /var/node/docker_node/app.jsrm -rf /var/node/docker_node/package.jsontar -xvf /var/node_access_count.tar.gz -C /var/node/docker_nodedocker run --rm -v /var/node/docker_node:/var/node/docker_node-w /var/node/docker_node/ fordreamxkhl/node_pm2 npm installdocker run -d --name "nodeCountAccess" -p 8000:8000 -v /var/node/docker_node:/var/node/docker_node -v /var/log/pm2:/root/.pm2/logs/ --link redis-server:redis -w /var/node/docker_node/fordreamxkhl/node_pm2 pm2 start --no-daemon app.jsrm -rf /var/node_access_count.tar.gz</code></pre><ol><li><code>docker rm -f nodeCountAccess</code>: 我们会强制删除之前运行的一个 Container, 第一次发布时会触发一个<code>“没有这个Container&quot;</code>的错误，不用管它。</li><li>两个<code>rm</code>操作则是删除原来项目的源代码，但是保留<code>node_modules</code>文件夹，免去了我们只改代码，重复去获取依赖包而导致发布程序时间过长的问题。</li><li><code>mkdir /var/node/docker_node</code>, 第一次启动会自动创建目录，如果已经存在，则不用管。</li><li><code>tar</code> 表示把源码解压缩到指定目录。</li><li>两个<code>docker run...</code> 先是执行 npm install 安装依赖包，然后将整个应用启动起来，注意这里我们启动的这个命令不要带上 <code>-i -t</code>参数，否则 Jenkins 命令是无法退出的，直到超时报错。</li><li>最后执行删除发送过来的代码包的操作。</li></ol><p>如果服务器在国内，那么我们需要将<code>Exec timeout (ms)</code>设置得长一些，这样在 Git 操作和 npm 操作时便不会因为超时而报错。</p><p>至此，我们的项目配置完毕，这时我们可以点击 <code>“立即构建”</code> 按钮，就可以看到构建历史中小球在闪烁并构建进度条。如果构建出错，那么构建历史中就会有红色小球出现，成功的话就是蓝色小球，黄色小球表示构建时虽然有错误，但最终还是成功的，不过这也是我们需要注意的。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.docker.com/whatisdocker" rel="external nofollow noopener noreferrer" target="_blank">https://www.docker.com/whatisdocker</a></li><li><a href="http://www.cbinews.com/software/news/2015-01-20/228094.htm" rel="external nofollow noopener noreferrer" target="_blank">http://www.cbinews.com/software/news/2015-01-20/228094.htm</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/" rel="external nofollow noopener noreferrer" target="_blank">https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“Docker 是一个为开发者和运维管理员搭建的开放平台软件， 可以在这 个平台上创建、 管理和运行生产应用。 D
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="工程化" scheme="http://coder.liusixin.cn/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="Nodejs" scheme="http://coder.liusixin.cn/tags/Nodejs/"/>
    
      <category term="Docker" scheme="http://coder.liusixin.cn/tags/Docker/"/>
    
      <category term="持续集成" scheme="http://coder.liusixin.cn/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 原型与原型链浅析</title>
    <link href="http://coder.liusixin.cn/posts/84b9f49b/"/>
    <id>http://coder.liusixin.cn/posts/84b9f49b/</id>
    <published>2018-01-17T11:06:18.000Z</published>
    <updated>2018-01-17T11:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于这个知识点以前也有写过，这次拿出来专门写一篇加深下记忆</p></blockquote><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p>原型其实就是一个对象，其他的对象可以通过它来实现属性的继承。而且，任何一个对象，都可以成为原型。而且所有的对象，默认情况下都有一个原型。 毕竟原型本身也就是对象，所以每一个原型自身也有其自身的原型。出了一个例外，那就是原型链的顶端–null。</p><p>一个对象的真正原型是被对象内部<code>[[Prototype]]</code>所持有，ECMA 引入了标准对象原型访问器，<code>Object.getPropertyOf(object)</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> proto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>当然，我们也可以通过非标准的访问器<code>__proto__</code>来获取实例的原型。</p><p>原型的真正魅力在于多个实例之间公用一个通用原型的时候，原型对象的属性一旦被定义，就可以被多个引用他的实例所继承。这种操作在性能和维护方面的意义也是不言而喻的。</p><h3 id="不使用原型的例子"><a href="#不使用原型的例子" class="headerlink" title="不使用原型的例子"></a>不使用原型的例子</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> decimalDigits <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  tax <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//alert(add(1, 3));</span></code></pre><h3 id="原型使用方式一"><a href="#原型使用方式一" class="headerlink" title="原型使用方式一"></a>原型使用方式一</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Calculator <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>decimalDigits<span class="token punctuation">,</span> tax<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>decimalDigits <span class="token operator">=</span> decimalDigits<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tax <span class="token operator">=</span> tax<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Calculator<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  subtract<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//alert((new Calculator()).add(1, 3));</span></code></pre><h3 id="原型使用方式二"><a href="#原型使用方式二" class="headerlink" title="原型使用方式二"></a>原型使用方式二</h3><pre class=" language-js"><code class="language-js">Calculator<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  subtract <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    add<span class="token punctuation">:</span> add<span class="token punctuation">,</span>    subtract<span class="token punctuation">:</span> subtract  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//alert((new Calculator()).add(11, 3));</span></code></pre><p>很明显方式二的写法更好一点，因为它封装了 function，通过 return 形式暴露出简单的使用名称，达到了 private/public 的效果</p><p>当然，我们也可以分步声明,可以像给对象添加属性的方式那样来添加原型上的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> BaseCalculator <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//为每个实例都声明一个小数位数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>decimalDigits <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用原型给BaseCalculator扩展2个对象方法</span>BaseCalculator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>BaseCalculator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>subtract <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="重写原型"><a href="#重写原型" class="headerlink" title="重写原型"></a>重写原型</h3><p>在使用第三方 JS 类库的时候，往往有时候他们定义的原型方法是不能满足我们的需要，但是又离不开这个类库，所以这时候我们就需要重写他们的原型中的一个或者多个属性或 function，我们可以通过继续声明的同样的 add 代码的形式来达到覆盖重写前面的 add 功能，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//覆盖前面Calculator的add() function</span>Calculator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tax<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是有一点需要注意：那就是重写的代码需要放在最后，这样才能覆盖前面的代码。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 设置Bar的prototype属性为Foo的实例对象</span>Bar<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Bar<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修正Bar.prototype.constructor为Bar本身</span>Bar<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bar<span class="token punctuation">;</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建Bar的一个新实例</span><span class="token comment" spellcheck="true">// 原型链</span>test<span class="token punctuation">[</span>Bar的实例<span class="token punctuation">]</span>Bar<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Foo的实例<span class="token punctuation">]</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>prototype <span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype <span class="token punctuation">{</span>  toString<span class="token punctuation">:</span> <span class="token operator">...</span> <span class="token comment" spellcheck="true">/* etc. */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面的例子中，test 对象从 Bar.prototype 和 Foo.prototype 继承下来；因此，它能访问 Foo 的原型方法 method。同时，它也能够访问那个定义在原型上的 Foo 实例属性 value。需要注意的是 new Bar() 不会创造出一个新的 Foo 实例，而是重复使用它原型上的那个实例；因此，所有的 Bar 实例都会共享相同的 value 属性。</p><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><p>hasOwnProperty 是 Object.prototype 的一个方法，它能判断一个对象是否包含自定义属性而不是原型链上的属性，因为 hasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 修改Object.prototype</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>  goo<span class="token punctuation">:</span> undefined<span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token string">'bar'</span> <span class="token keyword">in</span> foo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>foo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>foo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'goo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>只有 hasOwnProperty 可以给出正确和期望的结果，这在遍历对象的属性时会很有用。 没有其它方法可以用来排除原型链上的属性，而不是定义在对象自身上的属性。</p><p>但有个恶心的地方是：JavaScript 不会保护 hasOwnProperty 被非法占用，因此如果一个对象碰巧存在这个属性，就需要使用外部的 hasOwnProperty 函数来获取正确的结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>  hasOwnProperty<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token string">'Here be dragons'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 总是返回 false</span><span class="token comment" spellcheck="true">// 使用{}对象的 hasOwnProperty，并将其上下为设置为foo</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>当检查对象上某个属性是否存在时，hasOwnProperty 是唯一可用的方法。同时在使用 for in loop 遍历对象时，推荐总是使用 hasOwnProperty 方法，这将会避免原型对象扩展带来的干扰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关于这个知识点以前也有写过，这次拿出来专门写一篇加深下记忆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;原型与原型链&quot;&gt;&lt;a href=&quot;#原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;原型与原型链&quot;&gt;&lt;/a&gt;原型与原
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的Javascript--this指针</title>
    <link href="http://coder.liusixin.cn/posts/9853017/"/>
    <id>http://coder.liusixin.cn/posts/9853017/</id>
    <published>2018-01-10T13:50:04.000Z</published>
    <updated>2018-01-10T13:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阅读 你不知道的 JavaScript 上卷 整理的关于 this 问题的总结</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>this 关键字是 JavaScript 中最复杂的机制之一，它不是一个特殊的关键字，被自动定义在所有的函数作用域中。</p><p>来看一个例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> gretting <span class="token operator">=</span> <span class="token string">'Hello I am '</span> <span class="token operator">+</span> identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gretting<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Liusixin'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> you <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'xinxin'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>identify<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span><span class="token punctuation">;</span>speak<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>speak<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>you<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180722-152634@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="关于-this-的误解"><a href="#关于-this-的误解" class="headerlink" title="关于 this 的误解"></a>关于 this 的误解</h2><h3 id="this-值得是它自己"><a href="#this-值得是它自己" class="headerlink" title="this 值得是它自己"></a>this 值得是它自己</h3><p>通常人们都会认为 this 就是指向函数本身，至于为什么在函数中引用他自己呢，可能就是因为递归这种情况的存在吧。但是这里，我想说，this 并不是指向函数本身的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo:'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">foo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180722-153046@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>通过运行上面的代码我们可以看到，foo 函数的确是被调用了十次，但是 this.count 似乎并没有加到 foo.count 上。也就是说，函数中的 this.count 并不是 foo.count。</p><p>所以，这里我们一定要记住一个，就是函数中的 this 并不是指向函数本身的。上面的代码修改如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo:'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180722-153249@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>运行如上代码，此时我们就可以看到 foo 函数中的 count 的确已经变成 10 了</p><h3 id="this-值得是他的作用域"><a href="#this-值得是他的作用域" class="headerlink" title="this 值得是他的作用域"></a>this 值得是他的作用域</h3><p>另一种对 this 的误解是它不知怎么指向函数的作用域，其实从某种意义上来说他是正确的，但是从另一种意义上来说，这的确是一种误解。</p><p>明确的说，this 不会以任何方式指向函数的词法作用域，作用域好像是一个将所有可用标识符作为属性的对象，这从内部来说他是对的，但是 JavaScript 代码不能访问这个作用域“对象”，因为它是引擎内部的实现。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>首先，<code>this.bar()</code>访问 bar 函数，的确他做到了。虽然只是碰巧而已。然而，写下这段代码的开发者试图使用 this 在 foo 和 bar 的词法作用域中建立一座桥，是的 bar 可以访问 foo 内部变量作用域 a。当然，这是不可能的，不可能使用 this 引用在词法作用域中查找东西。</p><h2 id="什么是-this"><a href="#什么是-this" class="headerlink" title="什么是 this"></a>什么是 this</h2><p>记住，this 不是在编写时候绑定的，而是在运行时绑定的上下文执行环境。this 绑定和函数声明无关，反而和函数被调用的方式有关系。</p><p>当一个函数被调用的时候，会建立一个活动记录，也成为执行环境。这个记录包含函数是从何处（call-stack）被调用的，函数是 如何 被调用的，被传递了什么参数等信息。这个记录的属性之一，就是在函数执行期间将被使用的 this 引用。</p><h2 id="彻底明白-this-到底指向谁"><a href="#彻底明白-this-到底指向谁" class="headerlink" title="彻底明白 this 到底指向谁"></a>彻底明白 this 到底指向谁</h2><h3 id="调用点"><a href="#调用点" class="headerlink" title="调用点"></a>调用点</h3><p>为了彻底弄明白 this 的指向问题，我们还必须明白什么是调用点，即一个函数被调用的位置。考虑调用栈（即使我们到达当前执行位置而被调用的所有方法堆栈）是非常重要的，我们关心的调用点就是当前执行函数的之前的调用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用栈是: `baz`</span>  <span class="token comment" spellcheck="true">// 我们的调用点是global scope（全局作用域）</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- `bar`的调用点</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用栈是: `baz` -> `bar`</span>  <span class="token comment" spellcheck="true">// 我们的调用点位于`baz`</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- `foo`的call-site</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用栈是: `baz` -> `bar` -> `foo`</span>  <span class="token comment" spellcheck="true">// 我们的调用点位于`bar`</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- `baz`的调用点</span></code></pre><h3 id="来点规则，有规可寻"><a href="#来点规则，有规可寻" class="headerlink" title="来点规则，有规可寻"></a>来点规则，有规可寻</h3><p>我们必须考察调用点，来判断下面即将要说的四中规则哪一种适用。先独立解释下四中规则的每一种，然后再来说明下如果多种规则适用调用点时他们的优先级。</p><p><strong>默认绑定</strong></p><p>所谓的默认绑定，就是独立函数的调用形式。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>为什么会是 2 呢，因为在调用 foo 的时候，JavaScript 对 this 实施了默认绑定，所以 this 就指向了全局对象。</p><p>我们怎么知道这里适用 默认绑定 ？我们考察调用点来看看 foo()是如何被调用的。在我们的代码段中，foo()是被一个直白的，毫无修饰的函数引用调用的。没有其他的我们将要展示的规则适用于这里，所以 默认绑定 在这里适用。</p><p>需要注意的是，对于严格模式来说，默认绑定全局对象是不合法的，this 被置为 undefined。但是一个很微妙的事情是，即便是所有的 this 绑定规则都是基于调用点的，如果 foo 的内容没有严格模式下，默认绑定也是合法的。</p><p><strong>隐含绑定</strong></p><p>调用点是否有一个环境对象，也成为拥有者和容器对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>foo 被声明，然后被 obj 添加到其属性上，无论<code>foo()</code>是否一开始就在 obj 上被声明，还是后来作为引用添加（如上面代码所示），都是这个 函数 被 obj 所“拥有”或“包含”。</p><p>这里需要注意的是，只有对象属性引用链的最后一层才影响调用点</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  obj2<span class="token punctuation">:</span> obj2<span class="token punctuation">}</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>obj2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 42</span></code></pre><p><strong>隐含绑定丢死</strong></p><p>this 绑定最让人头疼的地方就是隐含绑定丢失了他的绑定，其实明确了调用位置，这个也不是难点。直接看代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数引用！</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'oops, global'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `a`也是一个全局对象的属性</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "oops, global"</span></code></pre><p>所以如上的调用模式，我们又退回到了默认绑定模式。</p><p>接着看</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">doFoo</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// `fn` 只不过`foo`的另一个引用</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- 调用点!</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'oops, global'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `a`也是一个全局对象的属性</span><span class="token function">doFoo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "oops, global"</span></code></pre><p>参数传递，仅仅是一种隐含的赋值，而且因为我们是传递一个函数，他是一个隐含的引用赋值，所以最终结果和我们前一段代码一样。</p><p>所以，在回调函数中丢失 this 绑定是一件很常见的事情，但是还有另一种情况，接受我们回调的函数故意改变 this 的值。那些很受欢迎的事件处理 JavaScript 包就十分喜欢强制你的回调的 this 指向触发事件的 DOM 元素。</p><p>不管哪一种意外改变 this 的方式，你都不能真正地控制你的回调函数引用将如何被执行，所以你（还）没有办法控制调用点给你一个故意的绑定。我们很快就会看到一个方法，通过 固定 this 来解决这个问题。</p><p><strong>如上，我们一定要清除的是引用和调用。记住，找 this，我们只看调用，别被引用所迷惑</strong></p><p><strong>明确绑定</strong></p><p>在 JavaScript 中，我们可以强制制定一个函数在运行时候的 this 值。是的，call 和 apply，他们的作用就是扩充函数赖以生存的作用域。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>上面代码，我们使用 foo，强制将 foo 的 this 指定为 obj</p><p>如果你传递一个简单原始类型值（string，boolean，或 number 类型）作为 this 绑定，那么这个原始类型值会被包装在它的对象类型中（分别是 new String(..)，new Boolean(..)，或 new Number(..)）。这通常称为“boxing（封箱）”。</p><p>但是，单独的依靠明确绑定仍然不能为我们先前提到的问题，提供很好的解决方案，也就是函数丢失自己原本的 this 绑定。</p><p><strong>硬性绑定</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// `bar`将`foo`的`this`硬绑定到`obj`</span><span class="token comment" spellcheck="true">// 所以它不可以被覆盖</span>bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>我们创建了一个函数<code>bar()</code>，在它的内部手动调用<code>foo.call(obj)</code>，由此强制 this 绑定到 obj 并调用 foo。无论你过后怎样调用函数 bar，它总是手动使用 obj 调用 foo。这种绑定即明确又坚定，所以我们称之为 硬绑定（hard binding）</p><p><strong>new 绑定</strong></p><p>这个比较简单，当函数前面加入 new 关键字调用的时候，其实就是当做构造函数调用的。其内部其实完成了如下事情：</p><ul><li>一个新的对象会被创建</li><li>这个新创建的对象会被接入原型链</li><li>这个新创建的对象会被设置为函数调用的 this 绑定</li><li>除非函数返回一个他自己的其他对象，这个被 new 调用的函数将自动返回一个新创建的对象</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>函数是否在 new 中调用，如果是的话 this 绑定的是新创建的对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>函数是否通过 call、apply 或者其他硬性调用，如果是的话，this 绑定的是指定的对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>函数是否在某一个上下文对象中调用,如果是的话，this 绑定的是那个上下文对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>如果都不是的话，使用默认绑定，如果在严格模式下，就绑定到 undefined，注意这里是方法里面的严格声明。否则绑定到全局对象</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="绑定例外"><a href="#绑定例外" class="headerlink" title="绑定例外"></a>绑定例外</h2><p>第一种情况就是将 null 和 undefined 传给 call、apply、bind 等函数，然后此时 this 采用的绑定规则是默认绑定</p><p>第二种情况这里举个例子，也是面试中常常会出现的例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>foo <span class="token operator">=</span> o<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>如上调用，其实 foo 采用的也是默认绑定，这里我们需要知道的是，p.foo = o.foo 的返回值是目标函数的引用，所以最后一句其实就是 foo()</p><h3 id="es6-中的箭头函数"><a href="#es6-中的箭头函数" class="headerlink" title="es6 中的箭头函数"></a>es6 中的箭头函数</h3><p>es6 中的箭头函数比较简单，由于箭头函数并不是 function 关键字定义的，所以箭头函数不适用 this 的这四中规则，而是根据外层函数或者全局作用域来决定 this</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 返回一个arrow function</span>  <span class="token keyword">return</span> a <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里的`this`是词法上从`foo()`采用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>这里 foo 内部创建的箭头函数会自动获取 foo 的 this。</p><h2 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h2><p>如果能把这两个题搞清楚的话，可以说所有的关于 this 指向的问题都难不倒你了，go on！</p><ul><li>第一题</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">,</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个题的答案是怎么分析的呢:</p><ul><li>第一个不多说了</li><li>第二个也不多做解释，引用没有变</li><li>第三个需要解释一下，经过赋值，运算符运算后，都是纯粹的函数，不是对象方法的引用。所以函数指向的 this 都是 windows 的</li><li>第四个，首先要清楚逗号表示什么，一张图说明一切<br><img src="http://cdn-blog.liusixin.cn/WX20180722-172731@2x.png" alt=""></li></ul><p><strong>答案：20 20 10 10</strong></p><ul><li>第二题</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  number<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/*匿名函数自调*/</span>  fn1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> number<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    number <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>      number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  db2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn1<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个题目有点长，解释这个题，我们需要分步骤去理解它，我们先给题目做个标注</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  number<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  fn1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名函数1</span>    <span class="token keyword">var</span> number<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (1)</span>    number <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (2)</span>    number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 匿名函数(2)</span>      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>      number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  db2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (3)</span><span class="token function">alert</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (4)</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (5)</span>obj<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (6)</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>当定义<code>obj</code>的时候执行了<code>匿名函数1</code>，此时处于全局作用域内，因此上下文 this 是 window。执行完语句<code>(1)</code>导致<code>全局变量number</code>的值变为 4；执行语句<code>(2)</code>时<code>临时变量number</code>还没有被赋值，所以是 NaN，但下一句会将其赋值为 3；最后，<code>匿名函数1</code>返回了<code>匿名函数2</code>，因此<code>obj.fn1=匿名函数2</code>。（注意匿名函数 2 里面会用到<code>临时变量number</code>）</li><li>来到语句<code>(3)</code>，这句会把<code>fn1</code>这个变量赋值为<code>obj.fn1</code>，也就是<code>匿名函数2</code></li><li>由于<code>全局变量number</code>已经在语句<code>(1)</code>中变为了 4，所以语句<code>(4)</code>弹出的对话框结果为 4</li><li>语句<code>(5)</code>执行的是<code>fn1()</code>，它与执行<code>obj.fn1()</code>的区别是两者 this 不一样。前者为 null，而后者 this 为 obj。但是又由于 JS 规定，this 为 null 时相当于全局对象 window，所以这句代码执行时函数的 this 为 window。在<code>匿名函数2</code>里会将<code>全局变量number</code>更新为 8，同时将匿名函数 1 中被闭包的<code>临时变量number</code>更新为 9</li><li>语句<code>(6)</code>的效果在上面已经分析过了，this 是 obj，所以<code>obj.number</code>更新为 8，<code>闭包的number</code>更新为 27</li></ul><p><strong>答案：弹出 4 9 27 8 8</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;阅读 你不知道的 JavaScript 上卷 整理的关于 this 问题的总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用canvas制作粒子效果全屏背景</title>
    <link href="http://coder.liusixin.cn/posts/efd83ca1/"/>
    <id>http://coder.liusixin.cn/posts/efd83ca1/</id>
    <published>2018-01-05T13:38:18.000Z</published>
    <updated>2018-01-05T13:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要制作一个可以作为背景的特效，那么首要的条件就是这是全屏的背景，充满整个屏幕。</p><p>为了使背景贴合好看，一般来说都是纯色或者渐变的。</p><blockquote><p>渐变背景网站 <a href="https://link.juejin.im/?target=https%3A%2F%2Fuigradients.com%2F%23MangoPulp" rel="external nofollow noopener noreferrer" target="_blank">uigradients</a></p></blockquote><p>这个网站可以自己生成渐变色，你的配色也可以跟大家分享，可以保存为图片，也可以导出为 CSS 样式。</p><h2 id="实现随机粒子"><a href="#实现随机粒子" class="headerlink" title="实现随机粒子"></a>实现随机粒子</h2><p>粒子特效的特点</p><ul><li>数量多</li><li>运动</li><li>随机</li></ul><p>我们来使用 Canvas 实现随机粒子效果。各项参数都是随机生成的。</p><h3 id="创建全屏-Canvas"><a href="#创建全屏-Canvas" class="headerlink" title="创建全屏 Canvas"></a>创建全屏 Canvas</h3><p>首先，我们需要一个全屏的 Canvas 画布。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">html,    body </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        content <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        round <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        WIDTH<span class="token punctuation">,</span>        HEIGHT<span class="token punctuation">;</span>    WIDTH <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>    HEIGHT <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>width <span class="token operator">=</span> WIDTH<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>height <span class="token operator">=</span> HEIGHT<span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>我们使用 <code>WIDTH</code>、<code>HEIGHT</code> 两个常量储存屏幕宽度和高度。</p><h3 id="设置-Round-item-类"><a href="#设置-Round-item-类" class="headerlink" title="设置 Round_item 类"></a>设置 Round_item 类</h3><p>在创建了一个全屏的 Canvas 之后，再来创建单个的 <code>Round_item</code> 类。</p><p>首先我们 <code>Round_item</code> 类需要有什么参数呢？</p><ul><li>位置随机</li><li>透明度随机</li><li>半径随机的圆</li><li>为了区分不同的圆，我们还应该设置一个唯一的 <code>index</code> 参数。</li></ul><p>所以我们需要的参数有：</p><ul><li>x 坐标</li><li>y 坐标</li><li>半径</li><li>透明度</li><li>index</li></ul><p>根据上面这些可以得出我们的 <code>Round_item</code> 类：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Round_item</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> alpha <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'rgba(255,255,255,'</span> <span class="token operator">+</span> alpha <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里我们使用了构造函数的方式来创建单个的圆，我们还需要一个变量 <code>initRoundPopulation</code> 来设置 <code>round</code> 的个数，然后我们便可以通过 <code>for</code> 循环创建出 <code>initRoundPopulation</code> 个圆。</p><h3 id="设置-draw-方法"><a href="#设置-draw-方法" class="headerlink" title="设置 draw() 方法"></a>设置 <code>draw()</code> 方法</h3><p>在设置了单个的 <code>Round_item</code> 类之后，我们还要给每一个 <code>round</code> 设置 <code>draw()</code> 方法，所以我们需要将 <code>draw()</code> 方法设置在 <code>Round_item</code> 的原型中，这样我们创建出来的每一个 <code>Round_item</code> 实例对象都拥有了 <code>draw()</code> 方法。</p><pre class=" language-js"><code class="language-js">Round_item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  content<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>  content<span class="token punctuation">.</span>shadowBlur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  content<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  content<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  content<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  content<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="设置初始化-init-函数"><a href="#设置初始化-init-函数" class="headerlink" title="设置初始化 init() 函数"></a>设置初始化 <code>init()</code> 函数</h3><p>然后我们就需要设置初始化 <code>init()</code> 函数了，在 <code>init()</code> 函数中，我们的主要任务是创建单个的 <code>round</code>，然后使用其 <code>draw()</code> 方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> initRoundPopulation<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    round<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Round_item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> WIDTH<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>    round<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至此，我们已经完成了随机粒子的实现，完整的代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">html,    body </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        content <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        round <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        WIDTH<span class="token punctuation">,</span>        HEIGHT<span class="token punctuation">,</span>        initRoundPopulation <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    WIDTH <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>    HEIGHT <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>width <span class="token operator">=</span> WIDTH<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>height <span class="token operator">=</span> HEIGHT<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">Round_item</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> alpha <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"rgba(255,255,255,"</span> <span class="token operator">+</span> alpha <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Round_item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      content<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>      content<span class="token punctuation">.</span>shadowBlur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> initRoundPopulation<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        round<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Round_item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> WIDTH<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>        round<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="让随机粒子运动"><a href="#让随机粒子运动" class="headerlink" title="让随机粒子运动"></a>让随机粒子运动</h2><h3 id="animate-函数"><a href="#animate-函数" class="headerlink" title="animate() 函数"></a><code>animate()</code> 函数</h3><p>Canvas 制作动画是一个不断擦除再重绘的过程，我们需要一个 <code>animate()</code> 函数，这个函数的作用是帮助我们形成动画，我们在这个函数中首先需要清除当前屏幕，这里的清除函数用到的是 <code>content.clearRect()</code> 方法。</p><p><code>context.clearRect(x,y,width,height);</code></p><ul><li>x：要清除的矩形左上角的 x 坐标</li><li>y：要清除的矩形左上角的 y 坐标</li><li>width：要清除的矩形的宽度</li><li>height：要清除的矩形的高度</li></ul><p>需要清除的区域是整个屏幕，所以 <code>content.clearRect()</code> 的参数就是 <code>content.clearRect(0, 0, WIDTH, HEIGHT);</code>，这里我们就用到了之前获取的屏幕宽度和高度的常量：<code>WIDTH</code> 和 <code>HEIGHT</code>。这样我们就将屏幕上的所有内容都清除了。</p><p>清除之后需要重新绘制，重新绘制的图形是需要和原图形之间有一定的关系，先让粒子匀速上升，也就是 y 坐标在不断地变化，既然是匀速的，那么也就是在相同的时间位移是相同的。</p><p>将粒子位移的变化函数 <code>move()</code> 写在 <code>Round_item</code> 的原型上。</p><p>重绘完图形之后，还需要不断地进行清除再重绘。</p><p> 首先想到的是的 <code>setTimeout()</code> 方法，但是 <code>setTimeout</code> 和 <code>setInterval</code> 有个问题，了解 js 运行机制的应该明白，它们的时间间隔参数实际上只是指定了把动画添加到线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。</p><p>我们需要使用另外一个函数 —— <code>requestAnimationFrame()</code> 。</p><blockquote><p><code>window.requestAnimationFrame()</code> 方法告诉浏览器，你希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p></blockquote><p><code>requestAnimationFrame</code> 采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。</p><p>所以我们就使用 <code>requestAnimationFrame()</code> 函数递归的调用 <code>animate()</code> 函数来实现动画的效果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  content<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> WIDTH<span class="token punctuation">,</span> HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> round<span class="token punctuation">)</span> <span class="token punctuation">{</span>    round<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="创建-move-函数"><a href="#创建-move-函数" class="headerlink" title="创建 move() 函数"></a>创建 <code>move()</code> 函数</h3><p>将 <code>move()</code> 方法写在 <code>Round_item</code> 的原型上，这样我们创建的每一个 round 都具有了 <code>move()</code> 方法。</p><p>在 <code>move()</code> 方法中，我们只需要改变 round 的 y 坐标即可，并且设置边界条件，当 y 坐标的值小于 -10（也可以是其他负值），代表该 round 已经超出了屏幕，这个时候我们要将其移动到屏幕的最底端，这样才能保证我们创建的粒子数不变，一直是 <code>initRoundPopulation</code> 的值。</p><p>这样就是一个粒子在不断地上升，上升到了最顶端再移动到最底端的循环过程，看起来像是有源源不断的粒子，但其实总数是不变的。</p><p>在 y 坐标的变化之后，我们还需要使用新的 y 坐标再来重新绘制一下该 round。</p><pre class=" language-js"><code class="language-js">Round_item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>move <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">0.15</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> HEIGHT <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="在-init-中加入-animate"><a href="#在-init-中加入-animate" class="headerlink" title="在 init() 中加入 animate()"></a>在 <code>init()</code> 中加入 <code>animate()</code></h3><p>我们想要实现动画的效果，还需要在 init() 中加入 animate() 函数。</p><p>完整实现代码:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">html,    body </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        content <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        round <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        WIDTH<span class="token punctuation">,</span>        HEIGHT<span class="token punctuation">,</span>        initRoundPopulation <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    WIDTH <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>    HEIGHT <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>width <span class="token operator">=</span> WIDTH<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>height <span class="token operator">=</span> HEIGHT<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">Round_item</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> alpha <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"rgba(255,255,255,"</span> <span class="token operator">+</span> alpha <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Round_item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      content<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>      content<span class="token punctuation">.</span>shadowBlur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      content<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      content<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> WIDTH<span class="token punctuation">,</span> HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> round<span class="token punctuation">)</span> <span class="token punctuation">{</span>        round<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Round_item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>move <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">0.15</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> HEIGHT <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> initRoundPopulation<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        round<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Round_item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> WIDTH<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>        round<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;要制作一个可以作为背景的特效，那么首要的条件就是这是全屏的背景，充满整个屏幕。&lt;/p&gt;
&lt;p&gt;为了使背景贴合好看，一般来说都是纯色或者渐变的
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="canvas" scheme="http://coder.liusixin.cn/tags/canvas/"/>
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>canvas 特效整理</title>
    <link href="http://coder.liusixin.cn/posts/3fe3d9b9/"/>
    <id>http://coder.liusixin.cn/posts/3fe3d9b9/</id>
    <published>2017-12-28T16:17:34.000Z</published>
    <updated>2017-12-28T16:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>特效网站： <a href="https://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">https://codepen.io</a></p></blockquote><h2 id="烟花效果-1"><a href="#烟花效果-1" class="headerlink" title="烟花效果 1"></a>烟花效果 1</h2><blockquote><p>源码网址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%881" rel="external nofollow noopener noreferrer" target="_blank">烟花效果 1</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-0daeff3a3da25cad.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="烟花效果-2"><a href="#烟花效果-2" class="headerlink" title="烟花效果 2"></a>烟花效果 2</h2><blockquote><p>出处：京东一活动源码</p></blockquote><blockquote><p>源码地址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%882" rel="external nofollow noopener noreferrer" target="_blank">烟花效果 1</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-8fe8bfc34c1cf0b3-2.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="烟花效果-3"><a href="#烟花效果-3" class="headerlink" title="烟花效果 3"></a>烟花效果 3</h2><blockquote><p>源码网址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%883" rel="external nofollow noopener noreferrer" target="_blank">烟花效果 3</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-20f33652627b3f67.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="烟花效果-4"><a href="#烟花效果-4" class="headerlink" title="烟花效果 4"></a>烟花效果 4</h2><blockquote><p>源码网址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%884" rel="external nofollow noopener noreferrer" target="_blank">烟花效果 4</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-1e863d49f89c38cd.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="烟花效果-5"><a href="#烟花效果-5" class="headerlink" title="烟花效果 5"></a>烟花效果 5</h2><blockquote><p>源码网址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%885" rel="external nofollow noopener noreferrer" target="_blank">烟花效果 5</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-d2080b304a4a53e7.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="烟花效果-6"><a href="#烟花效果-6" class="headerlink" title="烟花效果 6"></a>烟花效果 6</h2><blockquote><p>源码网址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%886" rel="external nofollow noopener noreferrer" target="_blank">烟花效果 6</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-df2acedc77c6e4ca.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="烟花效果-7"><a href="#烟花效果-7" class="headerlink" title="烟花效果 7"></a>烟花效果 7</h2><blockquote><p>源码网址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%887" rel="external nofollow noopener noreferrer" target="_blank">烟花效果 7</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-e30fad4ed5cef03d.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="粒子效果-1"><a href="#粒子效果-1" class="headerlink" title="粒子效果 1"></a>粒子效果 1</h2><blockquote><p>源码网址：<a href="https://github.com/lsxlsxxslxsl/canvas/tree/master/Canvas%E7%B2%92%E5%AD%90%E5%8F%8A%E7%83%9F%E8%8A%B1%E7%89%B9%E6%95%88/%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C1" rel="external nofollow noopener noreferrer" target="_blank">粒子效果 1</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-72eca331c35fff9a.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;特效网站： &lt;a href=&quot;https://codepen.io&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://codepen.io&lt;/a&gt;&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="canvas" scheme="http://coder.liusixin.cn/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>关于闭包及变量回收问题</title>
    <link href="http://coder.liusixin.cn/posts/b709886a/"/>
    <id>http://coder.liusixin.cn/posts/b709886a/</id>
    <published>2017-12-20T08:38:00.000Z</published>
    <updated>2017-12-20T08:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章转自 otakustay 的<a href="http://www.otakustay.com/about-closure-and-gc/" rel="external nofollow noopener noreferrer" target="_blank">关于闭包及变量回收问题</a></p></blockquote><p>本文的诞生，源自近期打算做的一个关于 javascript 中的闭包的专题，由于需要解析闭包对垃圾回收的影响，特此针对不同的 javascript 引擎，做了相关的测试。</p><p>为了能从本文中得到需要的知识，看本文前，请明确自己知道闭包的概念，并对垃圾回收的常用算法有一定的了解。</p><h2 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h2><p>假设有如下的代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这一段代码中，<code>outer</code>函数和<code>inner</code>函数间会形成一个闭包，致使<code>inner</code>函数能够访问到<code>largeObject</code>，但是显然<code>inner</code>并没有访问<code>largeObject</code>，那么在闭包中的<code>largeObject</code>对象是否能被回收呢？</p><p>如果引入更复杂的情况：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> anotherLargeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    largeObject<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>首先一个显然的概念是 <strong><code>largeObject</code>肯定不能被回收</strong> ，因为<code>inner</code>确实地需要使用它。但是<code>anotherLargeObject</code>又能不能被回收呢？它将跟随<code>largeObject</code>一起始终存在，还是和<code>largeObject</code>分离，独立地被回收呢？</p><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>带着这个疑问，对现有的几款现代 javascript 引擎分别进行了测试，参与测试的有：</p><ul><li>IE8 自带的 JScript.dll</li><li>IE9 自带的 Chakra</li><li>Opera 11.60 自带的 Carakan</li><li>Chrome 16.0.912.63 自带的 V8（3.6.6.11）</li><li>Firefox 9.0.1 自带的 SpiderMonkey</li></ul><p>测试的基本方案是，使用类似以下的代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过各浏览器的开发者工具（Developer Tools、Firebug、Dragonfly 等），在断点处停止 javascript 的执行，并通过控制台或本地变量查看功能检查<code>largeObject</code>的值，如果其值存在，则认为 GC 并没有回收该对象。</p><p>对于部分浏览器（特别是 IE），考虑到对脚本执行有 2 种模式（执行模式和调试模式，IE 通过开发者工具的 Script 面板中的“Start Debugging”按钮切换），在调试模式下才会命中断点，但是调试模式下可能存在不同的引擎优化方案，因此采用内存比对的方式进行测试。即打开资源浏览器，在<code>var inner = outer();</code>一行后强制执行一次垃圾回收（IE 使用<code>window.CollectGarbage()</code>；Opera 使用<code>window.opera.collect()</code>;），查看内存的变化。如果内存始终有 100MB 的占用，没有明显的下降现象，则认为 GC 并没有回收该对象。</p><p>对于用例的设计，由于从 ECMAScript 标准中可以得知，所有的变量访问是通过一个 LexicalEnvironment 对象进行的，因此目标在于在不同的 LexicalEnvironment 结构下进行测试。从标准中，搜索<strong>LexicalEnvironment</strong>不难得出能够改变 LexicalEnvironment 结构的情况有以下几种：</p><ol><li>进入一个函数。</li><li>进入一段 eval 代码。</li><li>使用 with 语句。</li><li>使用 catch 语句。</li></ol><p>因此以下将针对这 4 种情况，进行多用例的测试。</p><h2 id="测试过程级结果"><a href="#测试过程级结果" class="headerlink" title="测试过程级结果"></a>测试过程级结果</h2><h3 id="基本测试"><a href="#基本测试" class="headerlink" title="基本测试"></a>基本测试</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll - 不回收，内存无下降趋势。</li><li>Chakra - 回收，内存会恢复到<code>outer</code>函数执行前的状态。</li><li>Carakan - 不回收，内存无下降趋势。</li><li>V8 - 回收，访问<code>largeObject</code>抛出 ReferenceError。</li><li>SpiderMonkey - 回收，访问<code>largeObject</code>得到<code>undefined</code>。</li></ul><p><strong>结论</strong></p><p>当一个函数<code>outer</code>返回另一个函数<code>inner</code>时，Chakra、V8 和 SpiderMonkey 会对<code>outer</code>中声明，但<code>inner</code>中不使用的变量进行回收，其中 V8 直接将变量从 LexicalEnvironment 上解除绑定，而 SpiderMonkey 仅仅将变量的值设为<code>undefined</code>，并不解除绑定。</p><h3 id="多个变量的情况"><a href="#多个变量的情况" class="headerlink" title="多个变量的情况"></a>多个变量的情况</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> anotherLargeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    largeObject<span class="token punctuation">;</span>    <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll - 不回收，内存无下降趋势。</li><li>Chakra - 回收<code>anotherLargeObject</code>，内存会回到<code>outer</code>调用前并增加 100MB 左右。</li><li>Carakan - 不回收，内存无下降趋势。</li><li>V8 - 回收，访问<code>largeObject</code>能得到正确的值，访问<code>anotherLargeObject</code>抛出 ReferenceError。</li><li>SpiderMonkey - 回收，访问<code>largeObject</code>能得到正确的值，访问<code>anotherLargeObject</code>得到<code>undefined</code>。</li></ul><p><strong>结论</strong></p><p>当一个 LexicalEnvironment 上存在多个变量绑定时，Chakra、V8 和 SpiderMonkey 会针对不同的变量判断是否有被使用，该判断方法是扫描返回的函数<code>inner</code>的源码来实现的，随后会将没有被<code>inner</code>使用的变量从 LexicalEnvironment 中解除绑定（同样的，SpiderMonkey 不解除绑定，仅赋值为<code>undefined</code>），而剩下的变量继续保留。</p><h3 id="eval-的影响"><a href="#eval-的影响" class="headerlink" title="eval 的影响"></a>eval 的影响</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll - 不回收，内存无下降趋势。</li><li>Chakra - 不回收，内存无下降趋势。</li><li>Carakan - 不回收，内存无下降趋势。</li><li>V8 - 不回收，访问<code>largeObject</code>可得到正确的值。</li><li>SpiderMonkey - 不回收，访问<code>largeObject</code>可得到正确的值。</li></ul><p><strong>结论</strong></p><p>如果返回的<code>inner</code>函数中有使用<code>eval</code>函数，则不 LexicalEnvironment 中的任何变量进行解除绑定的操作，保留所有变量的绑定，以避免产生不可预期的结果。</p><h3 id="间接调用-eval"><a href="#间接调用-eval" class="headerlink" title="间接调用 eval"></a>间接调用 eval</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll - 不回收，内存无下降趋势。</li><li>Chakra - 回收，内存会恢复到<code>outer</code>函数执行前的状态。</li><li>Carakan - 不回收，内存无下降趋势。</li><li>V8 - 回收，访问<code>largeObject</code>抛出 ReferenceError。</li><li>SpiderMonkey - 回收，访问<code>largeObject</code>得到<code>undefined</code>。</li></ul><p><strong>结论</strong></p><p>由于 ECMAScript 规定间接调用<code>eval</code>时，代码将在全局作用域下执行，是无法访问到<code>largeObject</code>变量的。因此对于间接调用<code>eval</code>的情况，各 javascript 引擎将按标准的方式进行处理，无视该间接调用<code>eval</code>的存在。</p><p>同样的，对于<code>new Function(&#39;return largeObject;&#39;)</code>这种情形，由于标准规定<code>new Function</code>创建的函数的<code>[[Scope]]</code>是全局的 LexicalEnvironment，因此也无法访问到<code>largeObject</code>，所有引擎都参照间接调用<code>eval</code>的方式，选择无视<code>Function</code>构造函数的调用。</p><h3 id="多个嵌套函数"><a href="#多个嵌套函数" class="headerlink" title="多个嵌套函数"></a>多个嵌套函数</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    largeObject<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// eval('');</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll - 不回收，内存无下降趋势。</li><li>Chakra - 不回收，内存无下降趋势。</li><li>Carakan - 不回收，内存无下降趋势。</li><li>V8 - 不回收，访问<code>largeObject</code>可得到正确的值。</li><li>SpiderMonkey - 不回收，访问<code>largeObject</code>可得到正确的值。</li></ul><p><strong>结论</strong></p><p>不仅仅是被返回的<code>inner</code>函数，如果在<code>outer</code>函数中定义的嵌套的<code>help</code>函数中使用了<code>largeObject</code>变量（或直接调用<code>eval</code>），也同样会造成<code>largeObject</code>变量无法回收。因此 javascript 引擎扫描的不仅仅是<code>inner</code>函数的源码，同样扫描了其他所有嵌套函数的源码，以判断是否可以解除某个特定变量的绑定。</p><h3 id="使用with表达式"><a href="#使用with表达式" class="headerlink" title="使用with表达式"></a>使用<code>with</code>表达式</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token punctuation">{</span> o<span class="token punctuation">:</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">with</span> <span class="token punctuation">(</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">debugger</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll - 不回收，内存无下降趋势。</li><li>Chakra - 回收<code>largeObject</code>，但不回收<code>scope.o</code>，内存恢复至 outer 函数被调用前并增加 100MB 左右（无法得知<code>scope</code>是否被回收）。</li><li>Carakan - 不回收，内存无下降趋势。</li><li>V8 - 不回收，访问<code>largeObject</code>和<code>scope</code>以及 o 均可得到正确的值。</li><li>SpiderMonkey - 回收<code>largeObject</code>和<code>scope</code>，访问该 2 个变量均得到<code>undefined</code>，不回收<code>o</code>，可得到正确的值。</li></ul><p><strong>结论</strong></p><p>当有<code>with</code>表达式时，V8 将会放弃所有变量的回收，保留 LexicalEnvironment 中所有变量的绑定。而 SpiderMonkey 则会保留由<code>with</code>表达式生成的新的 LexicalEnvironment 中的所有变量的绑定，而对于<code>outer</code>函数生成的 LexicalEnvironment，按标准的方式进行处理，尽可能解除其中的变量绑定。</p><h3 id="使用-catch-表达式"><a href="#使用-catch-表达式" class="headerlink" title="使用 catch 表达式"></a>使用 catch 表达式</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token punctuation">{</span> o<span class="token punctuation">:</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">debugger</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll – 不回收，内存无下降趋势。</li><li>Chakra – 回收<code>largeObject</code>和<code>ex</code>，内存会恢复到<code>outer</code>函数被调用前的状态。</li><li>Carakan – 不回收，内存无下降趋势。</li><li>V8 – 仅回收<code>largeObject</code>，访问<code>largeObject</code>抛出 ReferenceError，但仍可访问到<code>ex</code>。</li><li>SpiderMonkey – 仅回收<code>largeObject</code>，访问<code>largeObject</code>得到<code>undefined</code>，但仍可访问到<code>ex</code>。</li></ul><p><strong>结论</strong></p><p><code>catch</code>表达式虽然会增加一个 LexicalEnvironment，但对闭包内变量的绑定解除算法几乎没有影响，这源于<code>catch</code>生成的 LexicalEnvironment 仅仅是追加了被 catch 的 Error 对象一个绑定，是可控的（相对的<code>with</code>则不可控），因此对变量回收的影响也可以控制和优化。但对于新生成并添加了 Error 对象的 LexicalEnvironment，V8 和 SpiderMonkey 均不会进一步优化回收，而 Chakra 则会对该 LexicalEnvironment 进行处理，如果其中的 Error 对象可以回收，则会解除其绑定。</p><h3 id="嵌套函数中声明的同名变量"><a href="#嵌套函数中声明的同名变量" class="headerlink" title="嵌套函数中声明的同名变量"></a>嵌套函数中声明的同名变量</h3><p><strong>使用代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> largeObject <span class="token operator">=</span> LargeObject<span class="token punctuation">.</span><span class="token function">fromSize</span><span class="token punctuation">(</span><span class="token string">'100MB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>largeObject <span class="token comment" spellcheck="true">/* 或在函数体内声明 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// var largeObject;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>测试结果</strong></p><ul><li>JScript.dll – 不回收，内存无下降趋势。</li><li>Chakra – 回收，内存会恢复到<code>outer</code>函数被调用前的状态。</li><li>Carakan – 不回收，内存无下降趋势。</li><li>V8 – 回收，内存会恢复到<code>outer</code>函数被调用前的状态。</li><li>SpiderMonkey – 回收，内存会恢复到<code>outer</code>函数被调用前的状态。</li></ul><p><strong>结论</strong></p><p>嵌套函数中有与外层函数同名的变量或参数时，不会影响到外层函数中该变量的回收优化。即 javascript 引擎会排除<strong>FormalParameterList</strong>和所有<strong>VariableDeclaration</strong>表达式中的<strong>Identifier</strong>，再扫描所有<strong>Identifier</strong>来分析变量的可回收性。</p><h2 id="总体结论"><a href="#总体结论" class="headerlink" title="总体结论"></a>总体结论</h2><p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p><ul><li>嵌套的函数中是否有使用该变量。</li><li>嵌套的函数中是否有直接调用<code>eval</code>。</li><li>是否使用了<code>with</code>表达式。</li></ul><p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而 JScript.dll 和 Carakan 则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p><p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数<code>fn</code>时：</p><ol><li>如果<code>fn</code>的<code>[[Scope]]</code>是 ObjectEnvironment（<code>with</code>表达式生成 ObjectEnvironment，函数和<code>catch</code>表达式生成 DeclarativeEnvironment），则：</li><li>如果是 V8 引擎，则退出全过程。</li><li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li><li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：</li><li>如果 FunctionBody 中含有<strong>直接调用 eval</strong>，则退出全过程。</li><li>否则得到所有的 Identifier。</li><li>对于每一个 Identifier，设其为<code>name</code>，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为<code>name</code>的绑定<code>binding</code>。</li><li>对<code>binding</code>添加<code>notSwap</code>属性，其值为<code>true</code>。</li><li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有<code>notSwap</code>属性且值为<code>true</code>，则：</li><li>如果是 V8 引擎，删除该绑定。</li><li>如果是 SpiderMonkey，将该绑定的值设为<code>undefined</code>，将删除<code>notSwap</code>属性。</li><li>对于<strong>Chakra</strong>引擎，暂无法得知是按<strong>V8</strong>的模式还是按<strong>SpiderMonkey</strong>的模式进行。</li></ol><p>从以上测试及结论来看，V8 确实是一个优秀的 javascript 引擎，在这一方面的优化相当到位。而 SpiderMonkey 则采取一种更为友好的方式，不直接删除变量的绑定，而是将值赋为<code>undefined</code>，也许是 SpiderMonkey 团队考虑到有一些<strong>极端特殊</strong>的情况，依旧有可能导致使用到该变量，因此保证至少不会抛出 ReferenceError 打断代码的执行。而 IE9 的 Chakra 相比 IE8 的 JScript.dll 进步非常大，细节上的处理也很优秀。Opera 的 Carakan 在这一方面则相对落后，完全没有对闭包内的变量回收进行优化，选择了最为稳妥但略显浪费的方式。</p><p>此外，所有带有优化策略的浏览器，都在内在开销和速度之间选择了一个平衡点，这也正是为什么“多个嵌套函数”这一测试用例中，虽然<code>inner</code>没有再使用<code>largeObject</code>对象，甚至在<code>inner</code>中的断点处，连<code>help</code>函数对象也已经解除绑定，却没有解除<code>largeObject</code>的绑定。基于这种现象，可以推测各引擎均只选择检查一层的关联性，即不去处理<code>inner -&gt; help -&gt; largeObject</code>这样深度的引用关系，只找<code>inner -&gt; largeObject</code>和<code>help -&gt; largeObject</code>并做一个合集来处理，以提高效率。也许这种方式依旧存在内存开销的浪费，但同时 CPU 资源也是非常贵重的，如何掌握这之间的平衡，便是 javascript 引擎的选择。</p><p>此外，根据部分开发者的测试，Chakra 甚至有资格被称为现有<strong>最快速的 javascript 引擎</strong>，微软也一直在努力，而开发者更不应该一味地谩骂和嘲笑 IE。<br>我们可以嘲笑 IE6 的落后，可以看不到低版本的 IE 曾经为互联网的发展做过的贡献，可以在这些历史产品已经没落的今天无情地给予打击，却最最不应该将整个 IE 系列一视同仁，挂上“垃圾”的名号。客观地去看待，去评价，正是一个技术人员应该具备的最基本的准则和素养。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章转自 otakustay 的&lt;a href=&quot;http://www.otakustay.com/about-closure-and-gc/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="技术杂谈" scheme="http://coder.liusixin.cn/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
      <category term="V8" scheme="http://coder.liusixin.cn/tags/V8/"/>
    
  </entry>
  
  <entry>
    <title>前端单元测试与自动化测试实践</title>
    <link href="http://coder.liusixin.cn/posts/609ebfab/"/>
    <id>http://coder.liusixin.cn/posts/609ebfab/</id>
    <published>2017-12-17T14:42:04.000Z</published>
    <updated>2017-12-17T16:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>常用的测试框架有 Karma、mocha, 其中 Karma 是一个以浏览器为引擎的测试，而 mocha 用的是 Node.js, 淘宝推出了一个类 Karma 的开源框架叫 Totoro。</p><p>由于 Karma 是使用真实的浏览器环境，并且可以测试兼容性，我们采用 Karma 作为框架。</p><p>常用的断言库：</p><ul><li>Node.js 的 assert</li><li>Jasmine</li><li>expect</li><li>Chai</li></ul><p>和 Karma 比较配套的是 Jasmine。</p><h2 id="安装-Karma-Jasmine"><a href="#安装-Karma-Jasmine" class="headerlink" title="安装 Karma + Jasmine"></a>安装 Karma + Jasmine</h2><pre class=" language-shell"><code class="language-shell">npm i karma jasmine-core karma-jasmine karma-chrome-launcher -Dnpm i karma -g</code></pre><p>安装一个全局的 karma 命令，然后执行 karma init 生成 karrna.config.js</p><pre class=" language-shell"><code class="language-shell">karma init</code></pre><p>一路回车就好</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-221830@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后新建一个 src 目录写源文件（src/util.js)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>然后写测试文件(test/util-test.js)</p><pre class=" language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'reverse word'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">'cba'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来把文件添加到 karma.config.js 里面</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">// list of files / patterns to load in the browser</span>    files<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'test/*.js'</span><span class="token punctuation">,</span>      <span class="token string">'src/*.js'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>告诉它要在浏览器加载哪些文件，然后运行 <code>karma start</code> 执行测试，如果遇到报 karma 的模块找不到的情况，则可以把找不到的模块安装成全局的。</p><p>成功运行后，终端将会输出测试结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-223210@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>浏览器也会打出结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-223325@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们修改下代码再看下不通过的情况</p><pre class=" language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'reverse word'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-223542@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这样就实现了一个最基本的单元测试，现在来看一下测试的覆盖率。</p><h3 id="测试覆盖率报告"><a href="#测试覆盖率报告" class="headerlink" title="测试覆盖率报告"></a>测试覆盖率报告</h3><p>一般测试的覆盖率要越高越好，Karma 支持查看测试代码的覆盖率， 安装一个包：</p><pre class=" language-shell"><code class="language-shell">npm install karma-coverage -D</code></pre><p>然后在 karma.config.js 里面添加配置</p><pre class=" language-js"><code class="language-js">preprocessors<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'src/*.js'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'coverage'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// add</span>coverageReporter<span class="token punctuation">:</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'html'</span><span class="token punctuation">,</span>  dir<span class="token punctuation">:</span> <span class="token string">'coverage/'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>reporters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'progress'</span><span class="token punctuation">,</span> <span class="token string">'coverage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p>添加一个预处理，告诉它 src 下的源文件需要用 coverage 预处理一下，然后生成的 report 放在 coverage 目录下面，用 HTML 的形式。</p><p>重新运行 <code>karma start</code>, 将会生成 HTML 文件，打开这个 HTML 文件就可以看到覆盖率报告。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-231232@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>覆蓝率为 100%, 我们给源 util 添加一个逻辑分支</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">return</span> str      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>然后再看覆盖率报告</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-231651@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，分支变成了 50%</p><p>再添加一个分支:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span>      <span class="token keyword">throw</span> <span class="token string">'util.reverse should pass a string argument'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">return</span> str        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-232038@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点进 util 也可以看到哪些代码没有覆盖到:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-232144@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在 util-test.js 里面添加测试代码</p><pre class=" language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'reverse word'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">'cba'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'reverse字符串长度为1时返回自已'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'reverse传值不是字符串时会抛异常'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      util<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-232616@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时候看到覆盖率就成 100%了。</p><h3 id="覆盖率实现原理"><a href="#覆盖率实现原理" class="headerlink" title="覆盖率实现原理"></a>覆盖率实现原理</h3><p>从浏览器加载的 util.js 中可以看到一段代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180731-233924@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到总共被改成了 4 个分支，每个分支如果有执行就会顺带着执行 ＋＋ 操作。这样它就可以统计到有多少代码被执行到了。</p><p><strong>Jasmine</strong> 提供的断言 API 除了上面 <code>toEqual/toBe/toThrow</code> 之外， 具体还有</p><pre class=" language-js"><code class="language-js"><span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span>substring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">'my string'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex">/^my/</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><p>自动化测试一般用 E2E 测试，即端到端测试。它的工具也有几种</p><ul><li>PhontomJS<ul><li>无界面浏览器</li></ul></li><li>Senlenium<ul><li>打开电脑的浏览器运行，支持多语言操控</li></ul></li><li>Protractor<ul><li>是 <code>Senlenium</code> 的一个 JS 容器</li></ul></li></ul><p>我们使用 Protractor, 因为它提供了－些方便的操控浏览器的 API 以及断言库。</p><p>首先安装 protractor:</p><pre class=" language-shell"><code class="language-shell">npm i protractor -gwebdriver-manager updatewebdriver-manager start</code></pre><p>然后写一个 conf.js</p><pre class=" language-js"><code class="language-js">exports<span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>  seleniumAddress<span class="token punctuation">:</span> <span class="token string">'http://localhost:4444/wd/hub'</span><span class="token punctuation">,</span>  specs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'test-spec.js'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>test-spec.js</p><pre class=" language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'site'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'登录框正常使用'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">.</span><span class="token function">waitForAngularEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    browser<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://test.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">'Search Listings in Las Vegas - tes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'nav .sign-icon + li.sign-in'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'.sign-log'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'.sign-log input[name=account]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendKeys</span><span class="token punctuation">(</span><span class="token string">'yin@abc.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'.sign-log input[name=password]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendKeys</span><span class="token punctuation">(</span><span class="token string">'3345983893'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'.sign-log input[type=submit]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    browser<span class="token punctuation">.</span>driver<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">$$</span><span class="token punctuation">(</span><span class="token string">'.sign-log'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们测试登录框能否正常使用，先调 <code>browser.get</code> 打开一个网页，在 load 完成之后会继续执行下面的逻辑：先单击导航的 sign-in 弹出登录框，然后往两个输入框填入账号密码，再点提交按钮，让浏览器等待 1s, 最后检测弹框是否消失了。因为注册完会刷新页面。</p><p>然后运行 <code>protractor start</code>, 它就会打开浏览器，自动打开网页，按照我们的设定执行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先看一下工程目录</p><pre class=" language-shell"><code class="language-shell">- website  - karma.config.js  - unit-test    - index.js    - mock      - middleware.js      - home.js    - test      - sign-log-test.js      - util-test.js    - coverage      - html/index.html  - e2e-test    - conf.js    - spec      - test-login.js</code></pre><p>要尽可能地提高覆盖率，并且测试要尽可能稳定，理想状态是多个版本迭代还能待续使用，每次上线前或者改完代码后都可以跑一下单元测试。对一些复杂、关键的操作使用自动化测试。</p><p>自动化测试写起来比较简单，就是比较烦琐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;常用的测试框架有 Karma、mocha, 其中 Karma 是一个以浏览器为引擎的测试，而 mocha 用的是 Node.js, 淘宝推出
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="测试" scheme="http://coder.liusixin.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="工程化" scheme="http://coder.liusixin.cn/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>用评论消息框讲解状态模式</title>
    <link href="http://coder.liusixin.cn/posts/1bc12c23/"/>
    <id>http://coder.liusixin.cn/posts/1bc12c23/</id>
    <published>2017-12-16T03:57:00.000Z</published>
    <updated>2017-12-16T03:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>要实现一个评论的消息框， 要求是当字数为 0 或者超过 120 的时候，评论按钮不可单击，并且剩余字数会跟着变。</p></blockquote><p>以微博评论框为例:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180728-113400@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ul><li>用一个 state 来保存当前的状态，然后当用户输入的时候，这个 state 的数据会跟着变，同时更新评论按钮的状态。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> commentBox <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化一个state</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    commentBox<span class="token punctuation">.</span><span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setState</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">changeSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过获取当前state</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#submit"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> commentBox<span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> commentBox<span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">120</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">showLeftTextCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#text-count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">120</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".cmt-textarea"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 改变当前state</span>      commentBox<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      commentBox<span class="token punctuation">.</span><span class="token function">changeSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      commentBox<span class="token punctuation">.</span><span class="token function">showLeftTextCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们再稍加修改，在在上面 setState 的时候， 自动去更新 DOM。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> commentBox <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">setState</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    commentBox<span class="token punctuation">.</span><span class="token function">changeSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commentBox<span class="token punctuation">.</span><span class="token function">showLeftTextCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token operator">...</span>  <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".cmt-textarea"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 改变当前state</span>      commentBox<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>还可以再做得更智能，状态变的时候自动去比较当前状态所渲染的虚拟 DOM 和真实 DOM 的区别，自动去改变真实 DOM:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> commentBox <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">setState</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token function">renderDom</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.comment'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">renderDom</span><span class="token punctuation">(</span>$currentDom<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">diffAndChange</span><span class="token punctuation">(</span>$currentDom<span class="token punctuation">,</span> <span class="token function">renderVirtualDom</span><span class="token punctuation">(</span>commentBox<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token string">'&lt;input type="submit" disabled={{this.state.text.length === 0 || this.state.text.length > 140}} />'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里其实就是 React 的设计原型，不同的状态有不同的表现行为，所以可以认为是一个状态模式，并且通过状态去驱动 DOM 的更改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;要实现一个评论的消息框， 要求是当字数为 0 或者超过 120 的时候，评论按钮不可单击，并且剩余字数会跟着变。&lt;
      
    
    </summary>
    
      <category term="Javascript设计模式系列" scheme="http://coder.liusixin.cn/categories/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://coder.liusixin.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式--行为型设计模式</title>
    <link href="http://coder.liusixin.cn/posts/ac9a6cb1/"/>
    <id>http://coder.liusixin.cn/posts/ac9a6cb1/</id>
    <published>2017-12-10T14:58:42.000Z</published>
    <updated>2017-12-10T14:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该系列参考自 《JavaScript 设计模式》</p></blockquote><blockquote><p>以及 汤姆大叔的博文 <a href="https://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" rel="external nofollow noopener noreferrer" target="_blank">深入理解 JavaScript 系列</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>模板方法模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>职责链模式</li><li>命令模式</li><li>访问者模式</li><li>中介者模式</li><li>备忘录模式</li><li>迭代器模式</li><li>解释器模式</li></ul><h1 id="一-模板方法模式"><a href="#一-模板方法模式" class="headerlink" title="一. 模板方法模式"></a>一. 模板方法模式</h1><blockquote><p>父类中定义一组算法操作骨架，而将一些实现步骤延伸到子类中，使得子类在不改变父类算法结构的同时可重新定义算法某些实现步骤。</p></blockquote><p>模板方法模式主要由两部分组成：</p><ul><li>抽象父类</li><li>具体实现子类</li></ul><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>这里我们直接拿网上最常用的例子来举例说明</p><p>Coffee or Tea</p><ul><li>把水煮沸</li><li>用沸水浸泡茶叶</li><li>把茶水倒进杯子</li><li>加柠檬</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 抽象父类：饮料 */</span><span class="token keyword">var</span> Beverage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (1) 把水煮沸</span>Beverage<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>boilWater <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'把水煮沸'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (2) 沸水浸泡</span>Beverage<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>brew <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'子类必须重写brew方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (3) 倒进杯子</span>Beverage<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pourInCup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'子类必须重写pourInCup方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (4) 加调料</span>Beverage<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addCondiments <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'子类必须重写addCondiments方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 模板方法 */</span>Beverage<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 实现子类 Coffee*/</span><span class="token keyword">var</span> Coffee <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Coffee<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Beverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重写非公有方法</span>Coffee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>brew <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用沸水冲泡咖啡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Coffee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pourInCup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'把咖啡倒进杯子'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Coffee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addCondiments <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'加牛奶'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coffee<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过模板方法模式，在父类中封装了子类的算法框架。这些算法框架在正常状态下是适用大多数子类的，但也会出现“个性”子类。</p><p>如上述流程，加调料是可选的。</p><p>钩子方法可以解决这个问题，放置钩子是隔离变化的一种常见手段。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 添加钩子方法 */</span>Beverage<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>customerWantsCondiments <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Beverage<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 实现子类 Tea*/</span><span class="token keyword">var</span> Tea <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Tea<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Beverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重写非公有方法</span>Tea<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>brew <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用沸水冲泡茶'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Tea<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pourInCup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'把茶倒进杯子'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Tea<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addCondiments <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'加牛奶'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Tea<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>customerWantsCondiments <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'需要添加调料吗？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> tea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tea<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="二-观察者模式"><a href="#二-观察者模式" class="headerlink" title="二. 观察者模式"></a>二. 观察者模式</h1><blockquote><p>又被称为发布订阅模式，或者消息机制。定义了一种依赖关系，解决了主体对象和观察者之间功能的耦合</p></blockquote><p>其实他就是定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象，这个主体对象的状态发生变化时，就会通知所有的观察者对象，使得他们能够自动更新自己。</p><p>观察者对象的好处：</p><ul><li>支持简单的广播通信，自动通知所有已经订阅过的对象。</li><li>页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。</li><li>目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。</li></ul><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><p>js 通过对观察者模式的实现是通过回调函数的方式</p><p>我们来先定义一个 pubsub 对象，其内部包含了 3 个方法：订阅、退订、发布</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建一个观察者</span><span class="token keyword">var</span> Observe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    register<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//注册信息接口</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    fire<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//发布消息接口</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//消息信息</span>      <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> type<span class="token punctuation">,</span>          args<span class="token punctuation">:</span> args <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        len <span class="token operator">=</span> _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一次执行注册过的方法</span>        _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    remove<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//移除消息接口</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_message<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> fn <span class="token operator">&amp;&amp;</span> _message<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observe<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">,</span> e<span class="token punctuation">.</span>args<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observe<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token string">'Liusixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observe<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  msg<span class="token punctuation">:</span> <span class="token string">'test test'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="三-状态模式"><a href="#三-状态模式" class="headerlink" title="三. 状态模式"></a>三. 状态模式</h1><blockquote><p>当一个对象内部状态发生变化的时候，会导致起行为变化，看起来就像改变了对象</p></blockquote><p>状态模式定义了一个对象，这个对象可以通过管理其内部状态从而是其行为发生变化。状态模式是一个非常出色的设计模式，主要由两个角色构成</p><ul><li>环境类：拥有一个状态成员，可以修改其状态并做出反应</li><li>状态类：表示一种状态，包含相应的处理方法</li></ul><h3 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h3><p>一个简单的例子，我们可以将不同的判断结构封装在一个状态对象内，然后该状态对象返回一个可被调用的状态方法，用于调用对象内部某个方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ResultState <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> States <span class="token operator">=</span> <span class="token punctuation">{</span>    state0<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第一种结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    state1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第二种结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    state2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第三种结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    state3<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第四种结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取某一种状态并执行相应的方法</span>  <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    States<span class="token punctuation">[</span><span class="token string">'state'</span> <span class="token operator">+</span> result<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> States<span class="token punctuation">[</span><span class="token string">'state'</span> <span class="token operator">+</span> result<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    show<span class="token punctuation">:</span> show  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ResultState<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码只是一个雏形，对于状态模式主要目的就是将条件判断的不同结构，转化为状态对象的内部状态，既然是状态对象的内部状态，所以一般是作为状态对象的私有变量，然后提供一个能够调用状态对象内部状态的接口方法对象</p><h1 id="四-策略模式"><a href="#四-策略模式" class="headerlink" title="四. 策略模式"></a>四. 策略模式</h1><blockquote><p>将定义的一组算法封装起来，使其相互之间可以替代。封装的算法具有一定的独立性，不会随着客户端变化而变化</p></blockquote><p>从结构上看，他和状态模式非常的相似，也是在内部封装一个对象，然后通过返回的借口对象实现对内部对象的调用，不同的是，策略模式不需要管理状态，状态之间没有依赖关系，策略之间可以相互替换，在策略对象内部保存的是一些相对独立的一些算法。</p><h1 id="五-职责链模式"><a href="#五-职责链模式" class="headerlink" title="五. 职责链模式"></a>五. 职责链模式</h1><blockquote><p>解决请求发送者和接受者之间的耦合，通过职责链上多个对象分解请求流程，实现请求在多个对象之间的传递，直到最后一个对象完成请求的处理。</p></blockquote><p>职责链模式的优点是：请求发送者只需要直到链中的第一个节点，从而解耦了发送者和一组接收者之间的强联系。此外，使用了职责链模式之后，链中的节点对象可以灵活地拆分重组，增加或者删除 一个节点，以及改变节点在链中的位置都是轻而易举的。</p><p>职责链模式的缺点是：首先不能保证某个请求一定会被链中的某个节点处理，这种情况系下可以在链尾增加一个保底的接受者节点来处理这种即将离开链尾的请求。其次，职责链模式使得程序中多了一些节点对象，可能在某一次的请求传递过程中，大部分的节点并没有起到实质性的作用，从性能的角度考虑，应当避免过长的职责链带来的性能损耗。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>假设有这么一种场景：一个售卖手机的电商网站，经过分别交纳 500 元定金和 200 元定金的两轮预订之后（订单在此时已经生成），现在进入了正式购买阶段。</p><p>公司针对支付过定金的客户有一定的优惠，正式购买之后，已经支付过 500 元定金的用户会收到 100 元优惠券，200 元定金的用户可以收到 50 元优惠券，没有支付过定金的只能进入普通购买方式，也就是没有优惠券。相关的字段有这么几种：</p><ul><li><code>oederType</code>: 订单类型，为 1 代表 500 元定金用户，2 代表 200 元定金用户，3 为普通购买用户；</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//职责链模式</span><span class="token keyword">var</span> order500 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span> pay<span class="token punctuation">,</span> stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> pay <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'500元定金预约，得到100元优惠券'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> order200 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span> pay<span class="token punctuation">,</span> stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> pay <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'200元定金预约，得到50优惠券'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> orderNormal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span> pay<span class="token punctuation">,</span> stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通购买，无优惠券'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>接下来需要把函数包装进职责链节点：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//职责链包装</span><span class="token keyword">var</span> Chain <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>nextSuccessor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Chain<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setNextSuccessor <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextSuccessor <span class="token operator">=</span> successor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Chain<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>passRequest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//console.log(this.nextSuccessor.fn.name);</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextSuccessor <span class="token operator">&amp;&amp;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextSuccessor<span class="token punctuation">.</span>passRequest<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextSuccessor<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//启动这一步启动递归了</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">var</span> chainOrder500 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>order500<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chainOrder200 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>order200<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chainOrderNormal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>orderNormal<span class="token punctuation">)</span><span class="token punctuation">;</span>chainOrder500<span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>chainOrder200<span class="token punctuation">)</span><span class="token punctuation">;</span>chainOrder200<span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>chainOrderNormal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将请求传递给第一个节点即可</span>chainOrder500<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 500元定金，得到100元优惠券</span>chainOrder500<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出200元定金，得到50元优惠券</span>chainOrder500<span class="token punctuation">.</span><span class="token function">passRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 手机库存不足</span></code></pre><h1 id="六-命令模式"><a href="#六-命令模式" class="headerlink" title="六. 命令模式"></a>六. 命令模式</h1><blockquote><p>用来对方法调用进行参数化处理和传送，经过这样处理过的方法调用可以在任何需要的时候执行。也就是说该模式旨在将函数的调用、请求和操作封装成一个单一的对象，然后对这个对象进行一些列的处理。他也可以用来消除调用操作的对象和实现操作的对象之间的耦合。这为各种具体的类的更换带来了极大的灵活性。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.一个连有炮兵和步兵，司令可以下命令调动军队打仗</span><span class="token keyword">var</span> lian <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>lian<span class="token punctuation">.</span>paobing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>pao_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pao_num <span class="token operator">+</span> <span class="token string">'门炮准备战斗'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>lian<span class="token punctuation">.</span>bubing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>bubing_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bubing_num <span class="token operator">+</span> <span class="token string">'人准备战斗'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>lian<span class="token punctuation">.</span>lianzhang <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mingling<span class="token punctuation">)</span> <span class="token punctuation">{</span>  lian<span class="token punctuation">[</span>mingling<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>mingling<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//司令下命令</span>lian<span class="token punctuation">.</span><span class="token function">lianzhang</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'paobing'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lian<span class="token punctuation">.</span><span class="token function">lianzhang</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'bubing'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="七-访问者模式"><a href="#七-访问者模式" class="headerlink" title="七. 访问者模式"></a>七. 访问者模式</h1><blockquote><p>针对于对象结构中的元素，定义在不改变对象的前提下访问结构中元素的方法</p></blockquote><p>在访问者模式中，主要包括下面几个角色</p><ol><li>抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是 visit 方法中的参数定义哪些对象是可以被访问的。</li><li>访问者：实现抽象访问者所声明的方法，它影响到访问者访问到一个类后该干什么，要做什么事情。</li><li>抽象元素类：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过 accept 方法中的参数来定义的。抽象元素一般有两类方法，一部分是本身的业务逻辑，另外就是允许接收哪类访问者来访问。</li><li>元素类：实现抽象元素类所声明的 accept 方法，通常都是<code>visitor.visit(this)</code>，基本上已经形成一种定式了。</li><li>结构对象：一个元素的容器，一般包含一个容纳多个不同类、不同接口的容器，如 List、Set、Map 等，在项目中一般很少抽象出这个角色。</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 访问者</span><span class="token keyword">function</span> <span class="token function">Visitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>visit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>concreteElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    concreteElement<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 元素类</span><span class="token keyword">function</span> <span class="token function">ConceteElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>doSomething <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个具体元素'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>accept <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Client</span><span class="token keyword">var</span> ele <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConceteElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Visitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ele<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;该系列参考自 《JavaScript 设计模式》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以及 汤姆大叔的博文 &lt;a href=&quot;https://www.cnblogs.com/TomXu/archive/2011/12
      
    
    </summary>
    
      <category term="Javascript设计模式系列" scheme="http://coder.liusixin.cn/categories/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="http://coder.liusixin.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS你所不知道的奇淫技巧</title>
    <link href="http://coder.liusixin.cn/posts/336c09e/"/>
    <id>http://coder.liusixin.cn/posts/336c09e/</id>
    <published>2017-11-27T13:49:27.000Z</published>
    <updated>2017-11-27T13:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结下 js 在日常使用中更简洁，更易读的写法</strong> </p><h2 id="操作符的妙用"><a href="#操作符的妙用" class="headerlink" title="操作符的妙用"></a>操作符的妙用</h2><h3 id="1-利用按位与“-amp-”判断奇偶数"><a href="#1-利用按位与“-amp-”判断奇偶数" class="headerlink" title="1.利用按位与“&amp;”判断奇偶数"></a>1.利用按位与“&amp;”判断奇偶数</h3><p>按位与运算的逻辑是这样： 0001 &amp; 0011 = 0001，也就是两个位都是 1，才是 1，其它位都是 0。<br>我们经常要做一个条件，判断一个数的奇偶性，会这样写：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//奇数</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//偶数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-利用按位与运算，则可以简写为这样："><a href="#2-利用按位与运算，则可以简写为这样：" class="headerlink" title="2.利用按位与运算，则可以简写为这样："></a>2.利用按位与运算，则可以简写为这样：</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//奇数</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//偶数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-利用按位或“-”取整"><a href="#3-利用按位或“-”取整" class="headerlink" title="3.利用按位或“|”取整"></a>3.利用按位或“|”取整</h3><p>按位或运算的逻辑是这样： 0001 | 0011 = 0011，也就是两个位都是 0，才是 0，其它位都 1。</p><pre class=" language-js"><code class="language-js"><span class="token number">0</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//0</span><span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//1</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//1</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//1</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">//7 即 0000 0011 | 0000 0101 = 0000 0111   因此，3|5的值得7</span></code></pre><p>按位或|有一个作用，通过搭配 0 进行运算可以用来实现数字取整。</p><pre class=" language-js"><code class="language-js"><span class="token number">1.1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//1</span><span class="token operator">-</span><span class="token number">2.0</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//-2</span><span class="token comment" spellcheck="true">//非数字，则根据值强转为 0 或者 1 再取整，不过这种没啥意义</span><span class="token keyword">null</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//0</span><span class="token boolean">true</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//1</span></code></pre><blockquote><p>Tips: 其实浮点数是不支持位运算的，所以会先把 1.1 转成整数 1 再进行位运算，就好像是对浮点数向下求整。所以 1 | 0 的结果就是 1。</p></blockquote><p>还有一个就是在设计 vue 组件的时候，也常用到的地方如下：（具体为啥这么用，我也说不清楚，没研究过原理，知道的同学可以告诉我）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//... 其它参数</span>    props <span class="token punctuation">{</span>        params<span class="token punctuation">:</span> Object <span class="token operator">|</span> Array <span class="token comment" spellcheck="true">//只要其中任意一个满足条件即可</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-利用按位非“-”简化表达式"><a href="#4-利用按位非“-”简化表达式" class="headerlink" title="4.利用按位非“~”简化表达式"></a>4.利用按位非“~”简化表达式</h3><p>普及一下~运算符，这个符号学名叫“按位非”，它是一个一元运算符。按位非操作符由一个波浪线（~）表示，按位非就是求二进制的反码。不管什么值使用了这个运算符，结果总是一个数字。按位非运算符，简单的理解就是改变运算数的符号并减去 1。</p><pre class=" language-js"><code class="language-js"><span class="token operator">~</span><span class="token number">5</span> <span class="token comment" spellcheck="true">//-6</span><span class="token operator">~</span><span class="token number">0</span> <span class="token comment" spellcheck="true">//-1</span><span class="token operator">~</span><span class="token operator">-</span><span class="token number">2</span> <span class="token comment" spellcheck="true">//1</span><span class="token operator">~</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">//-2 这里true被强转为1</span><span class="token operator">~</span><span class="token keyword">null</span> <span class="token comment" spellcheck="true">//-1 这里null被强转为0</span><span class="token operator">~</span>undefined <span class="token comment" spellcheck="true">//-1 这里undefined被强转为0</span></code></pre><p>利用这个原理，我们可以在实际工作中这样应用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello world!'</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*...*/</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*...*/</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据str.indexOf('w')的值，无外乎两种情况： -1, 0及正整数，</span><span class="token comment" spellcheck="true">//则，从-1到正整数中，经过按位运算~之后，则为：0或者任意负数，</span><span class="token comment" spellcheck="true">//实际表示为：false与true</span><span class="token comment" spellcheck="true">//上面的条件语句，可以改为：</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">~</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*...*/</span> <span class="token punctuation">}</span></code></pre><blockquote><p>Tips: 按位运算，简单的地方，可以使用。但一些比较复杂的、难理解的，我觉得应该尽量少用，因为会给阅读者带来困难，也会给自己带来麻烦。</p></blockquote><h3 id="5-左移-lt-lt-求-2-的-n-次方"><a href="#5-左移-lt-lt-求-2-的-n-次方" class="headerlink" title="5.左移&lt;&lt;求 2 的 n 次方"></a>5.左移&lt;&lt;求 2 的 n 次方</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//二进制运算：</span><span class="token number">01</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//0100，十进制为4</span><span class="token comment" spellcheck="true">//实际运用可以这样：</span><span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//4 即2的平方</span><span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">//8 即2的立方</span><span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">//16 即2的4次方</span></code></pre><h3 id="6-无符号右移-gt-gt-gt-判断数的正负"><a href="#6-无符号右移-gt-gt-gt-判断数的正负" class="headerlink" title="6.无符号右移&gt;&gt;&gt;判断数的正负"></a>6.无符号右移&gt;&gt;&gt;判断数的正负</h3><p>正数的无符号右移与有符号右移结果是一样的。负数的无符号右移会把符号位也一起移动，而且无符号右移会把负数的二进制码当成正数的二进制码。即：</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//1</span><span class="token number">2</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//2</span><span class="token number">4</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//4</span><span class="token number">4</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//2</span><span class="token number">4</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">2</span> <span class="token comment" spellcheck="true">//1</span><span class="token operator">-</span><span class="token number">4</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//4294967292</span><span class="token operator">-</span><span class="token number">4</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//2147483646</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//4294967294</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//4294967295</span></code></pre><p>观察上面的例子，我们得出一个结论，正数右移 0 位，值不变，而负数右移 0 位，值已经变化了。即可以通过这种关系判断一个数的正负：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPos</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">===</span> n <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token function">isPos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">isPos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h3 id="7-利用-amp-amp-连结条件与表达式"><a href="#7-利用-amp-amp-连结条件与表达式" class="headerlink" title="7.利用&amp;&amp;连结条件与表达式"></a>7.利用&amp;&amp;连结条件与表达式</h3><p>通常，我们为了给一个变量赋值，正常的逻辑是：if 语句判断，通过 if 逻辑控制语句，则赋值成功。利用&amp;&amp;符号，则可以直接在前面写上条件语句，后面写上执行语句。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//也可以写成</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这种情况尽量不要使用，因为如果条件不成立，则会给a赋上一个false值。</span><span class="token comment" spellcheck="true">//常见使用：</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> d<span class="token punctuation">;</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//10</span></code></pre><blockquote><p>Tips: 对于&amp;&amp;，需要注意以下几点：</p></blockquote><ul><li>对于布尔值，逻辑与是非常简单的，只要有一个 false，就返回 false；</li><li>对于不是布尔值的情况则：<br>如果第一个操作数是对象，则返回第二个数<br>如果第二个操作数是对象，则只有在第一个操作数的求值结果为 true 的情况下才会返回该对象；<br>如果第两个操作数都是对象，则返回第二个数操作数<br>如果有一个操作数是 null，则返回 null<br>如果有一个操作数是 NaN，则返回第 NaN<br>如果第一个操作数是 undefined，则返回 undefined</li></ul><h3 id="8-利用-取值（设置默认值）"><a href="#8-利用-取值（设置默认值）" class="headerlink" title="8.利用||取值（设置默认值）"></a>8.利用||取值（设置默认值）</h3><p>通常，我们声明一个变量，可能要根据条件进行赋值。正常的逻辑是：if … else if … else 或者使用 switch 这两种语句块。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果直接使用||或运算符，则按从左到右，取第一个非空的一个值，否则直接使用 false 作为值使用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">//常用到的或运算取值方式一般是在函数里面。</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//如果obj不存在，则使用默认值</span>    <span class="token keyword">var</span> oo<span class="token punctuation">;</span>    o <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>oo <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结合与运算，作变判断的前置条件</span><span class="token punctuation">}</span></code></pre><blockquote><p>Tips: 关于||，需要注意以下几点：</p></blockquote><ul><li>对于布尔值，逻辑或是非常简单的，只要有一个 true，就返回 true；</li><li>对于不是布尔值的情况则：<br>如果第一个操作数是对象，则返第一个操作数<br>如果第一个操作数的求值结果为 false，则返回第二个操作数<br>如果两个操作数都是对象，则返回第一个操作数<br>如果两个操作数是 null，则返回 null<br>如果两个操作数是 NaN，则返回 NaN<br>如果两个操作数是 undefined，则返回 undefined</li></ul><h3 id="9-利用-取整"><a href="#9-利用-取整" class="headerlink" title="9.利用~ ~取整"></a>9.利用~ ~取整</h3><p>如果要将一个小数取整数部分，正常的逻辑是：parseInt()强转为整数方法，或者 Math.floor()向下取整。其实，使用~ ~操作符可以更快速的取整。</p><pre class=" language-js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">12.55</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//12</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">12.55</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//12</span><span class="token operator">~</span> <span class="token operator">~</span><span class="token number">12.55</span> <span class="token comment" spellcheck="true">//12</span></code></pre><p>其实，除了取整的作用，它还可以达到强转数字的作用，比如：</p><pre class=" language-js"><code class="language-js"><span class="token operator">~</span> <span class="token operator">~</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">//1</span><span class="token operator">~</span> <span class="token operator">~</span><span class="token boolean">false</span> <span class="token comment" spellcheck="true">//0</span><span class="token operator">~</span> <span class="token operator">~</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//0</span><span class="token operator">~</span> <span class="token operator">~</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//0</span><span class="token operator">~</span> <span class="token operator">~</span>undefined <span class="token comment" spellcheck="true">//0</span><span class="token operator">~</span> <span class="token operator">~</span><span class="token operator">!</span>undefined <span class="token comment" spellcheck="true">//1</span><span class="token operator">~</span> <span class="token operator">~</span><span class="token keyword">null</span> <span class="token comment" spellcheck="true">//0</span><span class="token operator">~</span> <span class="token operator">~</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token comment" spellcheck="true">//1</span></code></pre><blockquote><p>Tips: 虽然~ ~用起来比较骚气，但是为了可读性，本人还是建议使用 Math.floor()更为稳妥，谁知道领导 review 代码的时候，会不会说你过于装逼，要被喷死。</p></blockquote><h3 id="10-利用-将字符串转为数字"><a href="#10-利用-将字符串转为数字" class="headerlink" title="10.利用+将字符串转为数字"></a>10.利用+将字符串转为数字</h3><p>如果要将一个表现字符串的数字转化为真正的数字，正常逻辑是：Number()或者 parseInt()、parseFloat()实现转化。实际上，我们还可以更简捷，只需要在前面添加一个+就可以了。当然，你也可以用-来实现，只不过，这样子，则值就成了负数。</p><pre class=" language-js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123.0'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123.0'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123.1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//123.1</span><span class="token comment" spellcheck="true">//只要使用+，则可以实现数字的转化</span><span class="token operator">+</span><span class="token string">'123'</span> <span class="token comment" spellcheck="true">//123</span><span class="token operator">+</span><span class="token string">'12.22'</span> <span class="token comment" spellcheck="true">//12</span><span class="token operator">-</span><span class="token string">'12.1'</span> <span class="token comment" spellcheck="true">//-12.1</span><span class="token comment" spellcheck="true">//如果要取整并且转数字的话，使用~~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token string">'123.33'</span> <span class="token comment" spellcheck="true">//123</span></code></pre><p>实际上，+也适用于 Date 对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token comment" spellcheck="true">//Fri Oct 27 2017 14:38:49 GMT+0800 (中国标准时间)</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1509086332914</span><span class="token comment" spellcheck="true">//使用+直接输出时间缀</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token comment" spellcheck="true">//1509086332914</span></code></pre><h3 id="11-利用-逻辑非强转布尔值"><a href="#11-利用-逻辑非强转布尔值" class="headerlink" title="11.利用!逻辑非强转布尔值"></a>11.利用!逻辑非强转布尔值</h3><p>逻辑非会将所有值，转为布尔值：</p><pre class=" language-js"><code class="language-js"><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//false 一个空对象，实际上是一个引用，属于存在的引用地址值</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//false 存在引用地址值</span><span class="token operator">!</span><span class="token string">''</span> <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token number">0</span> <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token string">'hello'</span> <span class="token comment" spellcheck="true">//false</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token number">NaN</span> <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span>undefined <span class="token comment" spellcheck="true">//true</span></code></pre><p>利用逻辑非运算符，可以省去一些多余的判断。比如经常要判断一个值非空：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实际上，如果像这面这种判断，只需要一个逻辑非。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token operator">!</span>a <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="12-利用-实现变量检测"><a href="#12-利用-实现变量检测" class="headerlink" title="12.利用!!实现变量检测"></a>12.利用!!实现变量检测</h3><p>如果要将一个值强转为布尔类型，正常的逻辑是：Boolean()强转为布尔值。</p><pre class=" language-js"><code class="language-js"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>然而，通过!!两个非逻辑符，则可以将一个值强转为布尔值。</p><pre class=" language-js"><code class="language-js"><span class="token operator">!</span><span class="token operator">!</span><span class="token number">123</span> <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">'hello'</span> <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">'false'</span> <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token comment" spellcheck="true">//false</span><span class="token operator">!</span><span class="token operator">!</span>undefined <span class="token comment" spellcheck="true">//false</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span> <span class="token comment" spellcheck="true">//false 注意，0也会转为false，在数字中，只有0会转为false，其它非0值，都会转为true</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">''</span> <span class="token comment" spellcheck="true">//false</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">NaN</span> <span class="token comment" spellcheck="true">//false</span></code></pre><blockquote><p>Tips: 任意的 javascript 的值都可以转换成布尔值。这些值会被转换成 false：undefined,null,0,-0,NaN,””，而其它都变强转为 true。通常，利用!!符号来检测一个变量是否存在。 ###表达式的妙用</p></blockquote><h3 id="1-自执行函数"><a href="#1-自执行函数" class="headerlink" title="1.自执行函数"></a>1.自执行函数</h3><p>函数，只是声明，并不能直接执行，需要调用才会执行。而如果，变成了表达式，则会自动执行。自执行函数，则是利用了表达式的这种特性。那些匿名函数附近使用括号或一些一元运算符来引导解析器，指明运算符附近是一个表达式。<br>按照这个理解，可以举出五类，超过十几种的让匿名函数表达式立即调用的写法：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">~</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">!</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token operator">^</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>Tips：另外值得再次注意的是，括号的含混使用——它可以用来执行一个函数，还可以做为分组运算符来对表达式求值。比如使用圆括号或方括号的话，可以在行首加一个分号，避免被用做函数执行或下标运算：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-isNaN-判断是否为合法数字"><a href="#2-isNaN-判断是否为合法数字" class="headerlink" title="2.isNaN 判断是否为合法数字"></a>2.isNaN 判断是否为合法数字</h3><p>isNaN(x) 函数用于检查其参数是否是非数字值。如果 x 是特殊的非数字值 NaN（或者能被转换为这样的值），返回的值就是 true。如果 x 是其他值,则返回 false。<br>经常，我们在页面功能模块开发过程中，拿到的交互数据，有很大可能是字符串形式的“数字”。这时，我们如果要做计算，就得先判断是否合法的数字。</p><pre class=" language-js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">12.2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'12.2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'aa11'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true 一切非数字，返回都是true</span></code></pre><blockquote><p>Tips: 我们可以这样总结，只要是表现得像数字（字符串形式，或者真正数字）的都可以检测出是属于“数字”,否则属于不合法数字。</p></blockquote><h3 id="3-缓存-Array-length"><a href="#3-缓存-Array-length" class="headerlink" title="3.缓存 Array.length"></a>3.缓存 Array.length</h3><p>写 for 循环的时候，经常是这样：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**/</span><span class="token punctuation">}</span></code></pre><p>在处理一个很大的数组循环时，对性能的影响将是非常大的。为了提升运行性能，需要将数组使用一个变量缓存起来使用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**/</span><span class="token punctuation">}</span></code></pre><h3 id="4-判断属于是否存在于对象中"><a href="#4-判断属于是否存在于对象中" class="headerlink" title="4.判断属于是否存在于对象中"></a>4.判断属于是否存在于对象中</h3><p><strong>a、使用 in 运算符</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">11</span> <span class="token punctuation">}</span><span class="token string">'a'</span> <span class="token keyword">in</span> obj <span class="token comment" spellcheck="true">//true</span><span class="token string">'b'</span> <span class="token keyword">in</span> obj <span class="token comment" spellcheck="true">//false</span></code></pre><p><strong>b、使用!!</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">11</span> <span class="token punctuation">}</span><span class="token operator">!</span><span class="token operator">!</span>obj<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">//true</span><span class="token operator">!</span><span class="token operator">!</span>obj<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//或者使用undefined来判断，但是可能也会属于值本身就是undefined，这样子就判断不出来了。</span>obj<span class="token punctuation">.</span>a <span class="token operator">!==</span> undefined <span class="token comment" spellcheck="true">//true</span>obj<span class="token punctuation">.</span>b <span class="token operator">!==</span> undefined <span class="token comment" spellcheck="true">//false</span></code></pre><p><strong>c、hasOwnProperty()方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">11</span> <span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//该方法只能判断自有属性是否存在，对于继承属性会返回false。</span></code></pre><h3 id="5-获取数组最后一个元素"><a href="#5-获取数组最后一个元素" class="headerlink" title="5.获取数组最后一个元素"></a>5.获取数组最后一个元素</h3><p>获取数组最后一个元素的方式有多种，常用的有 array.pop 或者 array[array.length - 1]方式。实际上，还可使用 Array.slice(-1)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5 此方法会改变数组的结构，不推荐</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//5</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//5 不需要计算数组的长度，直接拿到最后一个元素</span></code></pre><h3 id="6-数组截断"><a href="#6-数组截断" class="headerlink" title="6.数组截断"></a>6.数组截断</h3><p>数组有时候需要设置一个上限，或者删除数组中的一些元素，使用 array.length = [长度值] 这种方式非常有用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3]</span>arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//splice方法会改变数组结构</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3]</span><span class="token comment" spellcheck="true">//直接设置长度值</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3]</span><span class="token comment" spellcheck="true">//还可以实现数组的清空操作</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr => []</span></code></pre><h3 id="7-数组合并"><a href="#7-数组合并" class="headerlink" title="7.数组合并"></a>7.数组合并</h3><p>合并数组常用的方法是：concat。不过现有一种更快速的合并方式：Array.push.apply(arr1,arr2)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//常规方式</span><span class="token comment" spellcheck="true">//或者</span>arr1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//装逼方式，但运行速度更快！</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3,4,5] 两种方式都可以达到合并的结果</span></code></pre><h3 id="8-类数组利用数组的方法"><a href="#8-类数组利用数组的方法" class="headerlink" title="8.类数组利用数组的方法"></a>8.类数组利用数组的方法</h3><p>类数组拥有 length 属性，但不具有数组所具有的方法。为了方便操作，常需要将其转化为数组结构。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下标为 '0' '1'才符合数组的数据结构</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a-b 模拟数组的join()方法,使用-分隔。</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['a','b'] //模拟数组slice方法，返回一个新的数组</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取所有参数的列表</span><span class="token punctuation">}</span></code></pre><h3 id="9-利用-arguments-callee-实现递归"><a href="#9-利用-arguments-callee-实现递归" class="headerlink" title="9.利用 arguments.callee 实现递归"></a>9.利用 arguments.callee 实现递归</h3><p>普通的递归方法是这样写的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是当这个函数变成了一个匿名函数时，我们就可以利用 callee 来递归这个函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Tips: 这个方法虽然好用，但是有一点值得注意，ECMAScript4 中为了限制 js 的灵活度，让 js 变得严格，新增了严格模式，在严格模式中我们被禁止不使用 var 来直接声明一个全局变量，当然这不是重点，重点是 arguments.callee 这个属性也被禁止了。</p></blockquote><h3 id="10-给回调函数传递参数"><a href="#10-给回调函数传递参数" class="headerlink" title="10.给回调函数传递参数"></a>10.给回调函数传递参数</h3><p>经常，函数一般是可以当作参数来使用。但是有时候，一些函数自身需要带参，这时候，把函数当参数使用的话，就显得比较麻烦。一般的处理方法是，通过附加的传参的办法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">callback</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>但是有些时候，函数的参数限定了，只能传一个回调函数，这时，这种附加传参的显得无力了。采用闭包的方式可以解决此问题。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行callback('hello')，则返回的是一个函数</span></code></pre><h3 id="11-利用正则表达式处理实际问题"><a href="#11-利用正则表达式处理实际问题" class="headerlink" title="11.利用正则表达式处理实际问题"></a>11.利用正则表达式处理实际问题</h3><p><strong>a、获取有价值部分</strong></p><p>经常，在项目中，可能会获取到一些带有带有各种干扰因素的值。而我们需要提取相应的数字部分，可以使用正则表达式获取。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token string">"98.8元/斤"</span><span class="token punctuation">;</span>val<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^(0-9).]/ig</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//98.8</span></code></pre><p><strong>2、获取 URL 中的 value 值</strong></p><p>经常，我们会从 url 中获取到 location.search，但却是一个字符串，然后还需要将这个字符串进行分拆才能得到想要的值，而使用正则，则快速方便得多。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//假设当前url为：https://www.baidu.com?name=jawil&amp;age=23</span><span class="token comment" spellcheck="true">//普通实现：</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> searchStr <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//jawil</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//23</span><span class="token comment" spellcheck="true">//使用正则实现：</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span><span class="token operator">+</span> key <span class="token operator">+</span><span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//url正则表达式</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> flag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">unescape</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//jawil</span></code></pre><p><strong>3、格式化数字</strong></p><p>通常，我们需要将一个大的数字 19456212 转化为 19,456,212 这种样子。使用正则表达式可以很好的处理：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">19456212.85</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//19,456,212.85 toLocaleString()会根据你机器的本地环境来返回字符串，它和toString()返回的值在不同的本地环境下使用的符号会有微妙的变化</span><span class="token comment" spellcheck="true">//为了保险起见，可以使用方法实现</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token operator">?</span> n <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\d\.-]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> l <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">+</span><span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> l<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token string">','</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">19456212.85</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//19,456,212.85</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;总结下 js 在日常使用中更简洁，更易读的写法&lt;/strong&gt; &lt;/p&gt;
&lt;h2 id=&quot;操作符的妙用&quot;&gt;&lt;a href=&quot;#操作符的妙用&quot; class=&quot;headerlink&quot; title=&quot;操作符的妙用&quot;&gt;&lt;/a&gt;操作符的妙用&lt;/h2&gt;&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前后端漏洞分析与安全防御总结</title>
    <link href="http://coder.liusixin.cn/posts/a76d942d/"/>
    <id>http://coder.liusixin.cn/posts/a76d942d/</id>
    <published>2017-11-22T05:22:00.000Z</published>
    <updated>2017-11-25T11:42:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>web 安全主要分以下几个层面</strong></p><ul><li>代码层面</li><li>架构层面</li><li>运维层面</li></ul><p>本来主要围绕架构层面进行展开，如何写一个没有漏洞的网站。了解安全问题的原因，避免开发带漏洞的代码，如何开发安全的 web 项目。具体会遇到以下的安全问题，我们以此来研究及如何防御</p><p><strong>安全问题</strong></p><ul><li>用户身份被盗用</li><li>用户密码泄露</li><li>用户资料被盗取</li><li>网站数据库泄露</li><li>其它</li></ul><p>主要<strong>攻击手段</strong>分为以下几种</p><ul><li>跨站脚本攻击 xss（cross site scripting）</li><li>跨站请求伪造攻击 CSRF（cross site request forgy）</li><li>前端 cookie 安全性</li><li>点击劫持攻击</li><li>传输过程安全问题</li><li>用户密码安全问题</li><li>SQL 注入攻击</li><li>信息泄露和社会工程学</li><li>其它安全问题</li></ul><h2 id="1-跨站脚本攻击-xss"><a href="#1-跨站脚本攻击-xss" class="headerlink" title="1. 跨站脚本攻击 xss"></a>1. 跨站脚本攻击 xss</h2><p>跨站脚本（cross site script）为了避免与样式 css 混淆，所以简称为 XSS。</p><p>XSS 是一种经常出现在 web 应用中的计算机安全漏洞，也是 web 中最主流的攻击方式。那么什么是 XSS 呢？</p><p>XSS 是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码，嵌入到 web 页面中去。使别的用户访问都会执行相应的嵌入代码。从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p><p><strong>攻击原理:</strong></p><p>客户端提交的数据本来就是应用所需要的，但是恶意攻击者利用网站对客户端提交数据的信任，在数据中插入一些符号以及 javascript 代码，那么这些数据将会成为应用代码中的一部分了。那么攻击者就可以肆无忌惮地展开攻击。</p><p><strong>攻击危害:</strong></p><ul><li>获取页面数据 - 偷取网站任意数据</li><li>获取 cookies - 偷取用户资料</li><li>劫持前端逻辑 - 偷取用户密码和登录态</li><li>发送请求 - 欺骗用户</li></ul><h3 id="1-1-XSS-攻击分类"><a href="#1-1-XSS-攻击分类" class="headerlink" title="1.1 XSS 攻击分类:"></a>1.1 XSS 攻击分类:</h3><p>主要分为两大类</p><ul><li>反射型（url 参数直接注入）</li><li>存储型（存储到 DB 后读取时注入）</li></ul><blockquote><p>了解即可，不必细究，XSS 根源就是没完全过滤客户端提交的数据</p></blockquote><h4 id="1-1-1-反射型-xss-攻击"><a href="#1-1-1-反射型-xss-攻击" class="headerlink" title="1.1.1 反射型 xss 攻击"></a>1.1.1 反射型 xss 攻击</h4><p>又称为非持久性跨站点脚本攻击，它是最常见的类型的 XSS。漏洞产生的原因是攻击者注入的数据反映在响应中。一个典型的非持久性 XSS 包含一个带 XSS 攻击向量的链接(即每次攻击需要用户的点击)。</p><pre><code>正常发送消息：http://www.test.com/message.php?send=Hello,World！接收者将会接收信息并显示Hello,Word非正常发送消息：http://www.test.com/message.php?send=&lt;script&gt;alert(‘danger!’)&lt;/script&gt;！接收者接收消息显示的时候将会弹出警告窗口</code></pre><h4 id="1-1-2-存贮型-xss-攻击"><a href="#1-1-2-存贮型-xss-攻击" class="headerlink" title="1.1.2 存贮型 xss 攻击"></a>1.1.2 存贮型 xss 攻击</h4><p>又称为持久型跨站点脚本，它一般发生在 XSS 攻击向量(一般指 XSS 攻击代码)存储在网站数据库，当一个页面被用户打开的时候执行。每当用户打开浏览器,脚本执行。持久的 XSS 相比非持久性 XSS 攻击危害性更大,因为每当用户打开页面，查看内容时脚本将自动执行。谷歌的 orkut 曾经就遭受到 XSS。</p><p>从名字就可了解到存储型 XSS 攻击就是将攻击代码存入数据库中，然后客户端打开时就执行这些攻击代码。例如留言板</p><p>留言板表单中的表单域：<code>&lt;input type=“text” name=“content” value=“这里是用户填写的数据”&gt;</code></p><pre><code>正常操作：用户是提交相应留言信息；将数据存储到数据库；其他用户访问留言板，应用去数据并显示。非正常操作：攻击者在value填写&lt;script&gt;alert(‘attach!’)&lt;/script&gt;【或者html其他标签（破坏样式。。。）、一段攻击型代码】；将数据存储到数据库中；其他用户取出数据显示的时候，将会执行这些攻击性代码</code></pre><p><strong>XSS 攻击注入点:</strong></p><ul><li>HTML 节点内容</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ul><li>HTML 属性</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(1)<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li>JavasSript 代码</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> data<span class="token operator">=</span><span class="token string">"##{data}"</span><span class="token punctuation">;</span><span class="token keyword">var</span> data<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">""</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>富文本</li><li>得保留 HTML</li><li>HTML 有 XSS 攻击风险</li></ul><h3 id="1-2-防御-XSS"><a href="#1-2-防御-XSS" class="headerlink" title="1.2 防御 XSS"></a>1.2 防御 XSS</h3><ul><li>浏览器自带防御</li><li>html 转义（针对 html 标签和属性）</li><li>js 脚本转换</li><li>富文本过滤（一般在输入的时候）</li><li>CSP（content security policy）- 最好解决方案</li></ul><h4 id="1-2-1-浏览器自带防御"><a href="#1-2-1-浏览器自带防御" class="headerlink" title="1.2.1 浏览器自带防御"></a>1.2.1 浏览器自带防御</h4><p>只针对反射型（html 内容或 html 属性），并不是所有浏览器都支持</p><h4 id="1-2-2-html-转义"><a href="#1-2-2-html-转义" class="headerlink" title="1.2.2 html 转义"></a>1.2.2 html 转义</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> escapeHtml <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&amp;/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只能在最前面，会对下面做转义</span>  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;>html标签，引号html属性</span>  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/>/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/"/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;quto;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token string">'/g, '</span><span class="token operator">&amp;</span>##<span class="token number">39</span><span class="token punctuation">;</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//str = str.replace(/ /g, '&amp;##32;'); //空格可能有问题，对html属性最好加引号</span>  <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-3-js-脚本转换"><a href="#1-2-3-js-脚本转换" class="headerlink" title="1.2.3 js 脚本转换"></a>1.2.3 js 脚本转换</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> data<span class="token operator">=</span><span class="token string">"##{data}"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> data<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">""</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>var escapeForJs = function(str) {  if(!str) return '';  str = str.replace(/\\/g, '\\\\')  str = str.replace(/"/g, '\\"')}</code></pre><blockquote><p>更好的方式是使用 <code>JSON.stringify</code> 转换</p></blockquote><h4 id="1-2-4-富文本过滤"><a href="#1-2-4-富文本过滤" class="headerlink" title="1.2.4 富文本过滤"></a>1.2.4 富文本过滤</h4><ul><li>按黑名单过滤</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xssFilter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>html<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>  html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;\s*\/?script\s*>/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>javascript<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token string">'"]*/g, '</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>  html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/onerror\s*=\s*['"]?[^'"]*['"]?/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> html<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 标签太多，属性太多，不适合此办法</span></code></pre><ul><li>按白名单保留部分标签和属性</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// cheerio库</span><span class="token keyword">var</span> xssFilter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>html<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 白名单</span>  <span class="token keyword">var</span> whiteList <span class="token operator">=</span> <span class="token punctuation">{</span>    img<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    font<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>whiteList<span class="token punctuation">[</span>elem<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> elem<span class="token punctuation">.</span>attribs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">[</span>elem<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第三方库js-xss(根据白名单过滤HTML)</span><span class="token comment" spellcheck="true">// npm install xss</span><span class="token keyword">var</span> xssFilter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>html<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token function">xss</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-5-CSP-内容安全策略-推荐"><a href="#1-2-5-CSP-内容安全策略-推荐" class="headerlink" title="1.2.5 CSP 内容安全策略(推荐)"></a>1.2.5 CSP 内容安全策略(推荐)</h4><pre class=" language-shell"><code class="language-shell"># 指定哪些内容可执行child-srcconnect-srcdefault-srcfont-srcframe-srcimg-srcmanifest-srcmedia-srcobject-srcscript-srcstyle-srcworker-src</code></pre><pre class=" language-shell"><code class="language-shell"># 指定可信任来源<host-source> # 主机<scheme-source> 'self' # 协议，self指同域                'unsafe-inline' # 直接插入页面的内容                'unsafe-eval' # eval函数                'none' # 不信任任何内容                'nonce-<base64-value>' # 一次凭证，指定内容与页面匹配才信任                <hash-source> # 哈希                'strict-dynamic' # 信任脚本内部引入的脚本</code></pre><pre class=" language-shell"><code class="language-shell"># 格式# 设置头信息Content-Security-Policy: default-src "self" http://www.example.com;                         content-src "none";</code></pre><h2 id="2-跨站请求伪造攻击-CSRF（cross-site-request-forgy）"><a href="#2-跨站请求伪造攻击-CSRF（cross-site-request-forgy）" class="headerlink" title="2. 跨站请求伪造攻击 CSRF（cross site request forgy）"></a>2. 跨站请求伪造攻击 CSRF（cross site request forgy）</h2><p>跟 XSS 攻击一样，存在巨大的危害性，攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作。</p><p><strong>CSRF 攻击原理:</strong></p><p>第三方网站通过访问主网站后端带上 cookie 信息进行用户伪造<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/836049-20160322214747901-1548153978.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><strong>CSRF 危害:</strong></p><ul><li>利用用户登录态</li><li>用户不知情</li><li>完成业务请求</li><li>盗取用户资金</li><li>冒充用户发帖背锅</li><li>损坏网站名誉</li></ul><h3 id="2-1-CSRF-防御"><a href="#2-1-CSRF-防御" class="headerlink" title="2.1 CSRF 防御"></a>2.1 CSRF 防御</h3><ul><li>禁止第三方网站带 Cookies<ul><li>same-site 属性（同一站点）-但是只有 chrome 是完全可以</li></ul></li><li>在前端页面加入验证信息（ccap 模块生成验证码-npm install ccap –save）<ul><li>验证码（攻击者网站不访问前端就没法拿到验证码通不过验证）</li><li>token</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 将token放入表单及cookie中，然后校验两者是否一致</span><span class="token keyword">var</span> csrfToken <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9999999</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'csrfToken'</span><span class="token punctuation">,</span> csrfToken<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>验证 referer</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 禁止来自第三方网站的请求</span><span class="token keyword">var</span> referer <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>referer<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/^https?:\/\/localhost/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'非法请求'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-前端-cookie-安全性"><a href="#3-前端-cookie-安全性" class="headerlink" title="3. 前端 cookie 安全性"></a>3. 前端 cookie 安全性</h2><ul><li>前端数据存储</li><li>后端通过 http 头设置</li><li>请求时通过 http 头传给后端</li><li>前端可读写</li><li>遵守同源策略（协议，域名，端口）</li></ul><p><strong>cookie 特性:</strong></p><ul><li>域名</li><li>有效期</li><li>路径</li><li>http-only</li><li>secure（https）</li><li>samesite</li></ul><p><strong>cookie 作用:</strong></p><ul><li>存储个性化设置</li><li>存储未登录时用户唯一标识</li><li>存储已登录用户的凭证<ul><li>前端提交用户名和密码</li><li>后端验证用户名和密码</li><li>后端通过 http 头设置用户凭证</li><li>后续访问时后盾先验证用户凭证</li></ul></li><li>存储其它业务数据</li></ul><h3 id="3-1-cookie-登录用户凭证"><a href="#3-1-cookie-登录用户凭证" class="headerlink" title="3.1 cookie - 登录用户凭证"></a>3.1 cookie - 登录用户凭证</h3><h4 id="3-1-1-用户-ID（隐患）"><a href="#3-1-1-用户-ID（隐患）" class="headerlink" title="3.1.1 用户 ID（隐患）"></a>3.1.1 用户 ID（隐患）</h4><h4 id="3-1-2-用户-ID-签名"><a href="#3-1-2-用户-ID-签名" class="headerlink" title="3.1.2 用户 ID + 签名"></a>3.1.2 用户 ID + 签名</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// crypt.js</span><span class="token keyword">var</span> crypt <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> KEY <span class="token operator">=</span> <span class="token string">'##ksdfidf312##!@%dj1'</span><span class="token punctuation">;</span>crypt<span class="token punctuation">.</span>cryptUserId <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token punctuation">(</span>crypto<span class="token punctuation">.</span>createHmac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sign<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>userId <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sign<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> crypt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 登录模块</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> crypt<span class="token punctuation">.</span><span class="token function">cryptUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  httpOnly<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  sameSite<span class="token punctuation">:</span> <span class="token string">'strict'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'userId'</span><span class="token punctuation">,</span> crypt<span class="token punctuation">.</span><span class="token function">cryptUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  httpOnly<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  sameSite<span class="token punctuation">:</span> <span class="token string">'strict'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 验证</span><span class="token keyword">const</span> crypt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./crypt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> userId <span class="token operator">=</span> ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'userId'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sign <span class="token operator">=</span> ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> correctSign <span class="token operator">=</span> <span class="token function">cryptUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>correctSign <span class="token operator">!==</span> sign<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-1-3-SessionId-持久化"><a href="#3-1-3-SessionId-持久化" class="headerlink" title="3.1.3 SessionId(持久化)"></a>3.1.3 SessionId(持久化)</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// session.js</span><span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> sessionId <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">[</span>sessionId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">[</span>sessionId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cache<span class="token punctuation">[</span>sessionId<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token keyword">return</span> sessionId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> cache<span class="token punctuation">[</span>sessionId<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> cache<span class="token punctuation">[</span>sessionId<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> session<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// user.js</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sessionId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span>  userId<span class="token punctuation">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'sessionId'</span><span class="token punctuation">,</span> sessionId<span class="token punctuation">,</span> <span class="token punctuation">{</span>  httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  sameSite<span class="token punctuation">:</span> <span class="token string">'strict'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// site.js</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sessionId <span class="token operator">=</span> ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'sessionId'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sessionObj <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sessionObj <span class="token operator">||</span> <span class="token operator">!</span>sessionObj<span class="token punctuation">.</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'session不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> userId <span class="token operator">=</span> sessionObj<span class="token punctuation">.</span>userId<span class="token punctuation">;</span></code></pre><h3 id="3-2-cookies-和-xss-关系"><a href="#3-2-cookies-和-xss-关系" class="headerlink" title="3.2 cookies 和 xss 关系"></a>3.2 cookies 和 xss 关系</h3><ul><li>xss 可能偷取 cookies</li><li>http-only 的 cookie 不会被偷</li></ul><h3 id="3-3-cookies-和-csrf-关系"><a href="#3-3-cookies-和-csrf-关系" class="headerlink" title="3.3 cookies 和 csrf 关系"></a>3.3 cookies 和 csrf 关系</h3><ul><li>csrf 利用了用户 cookies</li><li>攻击站点无法读写 cookies</li><li>最好能阻止第三方使用 cookies</li></ul><h3 id="3-4-cookies-安全策略"><a href="#3-4-cookies-安全策略" class="headerlink" title="3.4 cookies - 安全策略"></a>3.4 cookies - 安全策略</h3><ul><li>签名防篡改</li><li>私有变换（加密）- 信息隐藏</li><li>http-only（防止 xss）</li><li>secure（https）</li><li>same-site（主要 csrf 攻击，兼容性不好）</li></ul><h4 id="3-4-2-私有变换（加密）"><a href="#3-4-2-私有变换（加密）" class="headerlink" title="3.4.2 私有变换（加密）"></a>3.4.2 私有变换（加密）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 加密(node加密模块)</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> KEY <span class="token operator">=</span> <span class="token string">'9851##%*!df1%!'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cipher <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createCipher</span><span class="token punctuation">(</span><span class="token string">'des'</span><span class="token punctuation">,</span> KEY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一边加密一边输出</span>text <span class="token operator">+</span><span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解密</span><span class="token keyword">var</span> decipher <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createDecipher</span><span class="token punctuation">(</span><span class="token string">'des'</span><span class="token punctuation">,</span> KEY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> originalText <span class="token operator">=</span> decipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">'hex'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>originalText <span class="token operator">+</span><span class="token operator">=</span> decipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originalText<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>签名和加密是有区别的。<strong>签名</strong>的文件仍然是明文，内容公开，签名可以验证是否是用户传达的文件。<strong>加密</strong>的文件是密文，用户无法获取。</p></blockquote><h2 id="4-点击劫持攻击"><a href="#4-点击劫持攻击" class="headerlink" title="4. 点击劫持攻击"></a>4. 点击劫持攻击</h2><p><strong>原理：</strong></p><p>通过 iframe 将目标网站放到页面上，将透明度设为 0，直接点击的是 iframe;</p><p><strong>特征：</strong></p><ul><li>用户亲手操作</li><li>用户不知情</li></ul><h3 id="4-1-点击劫持防御"><a href="#4-1-点击劫持防御" class="headerlink" title="4.1 点击劫持防御"></a>4.1 点击劫持防御</h3><ul><li>javascript 禁止内嵌（有局限性）</li><li>X-FRAME-OPTIONS 禁止内嵌（ie8 以上）（推荐）</li><li>其他辅助手段<ul><li>验证码</li></ul></li></ul><h4 id="4-1-1-javascript-禁止内嵌"><a href="#4-1-1-javascript-禁止内嵌" class="headerlink" title="4.1.1 javascript 禁止内嵌"></a>4.1.1 javascript 禁止内嵌</h4><p>html5 新属性<code>sandbox</code>，什么都不加默认会禁用掉很多功能</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 允许表单提交 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xxxx.cn:1211/post/15<span class="token punctuation">"</span></span> <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allow-forms<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- sandbox禁用功能 --></span></code></pre><blockquote><p>这种方式有局限性，sandbox 即使加上有时候也会存在劫持。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>location <span class="token operator">!=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">{</span>    top<span class="token punctuation">.</span>location <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-1-2-X-FRAME-OPTIONS-禁止内嵌"><a href="#4-1-2-X-FRAME-OPTIONS-禁止内嵌" class="headerlink" title="4.1.2 X-FRAME-OPTIONS 禁止内嵌"></a>4.1.2 X-FRAME-OPTIONS 禁止内嵌</h4><pre class=" language-js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'X-Frame-Options'</span><span class="token punctuation">,</span> <span class="token string">'DENY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DENY<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 禁止内嵌</span>SAME <span class="token operator">-</span> ORIGIN<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同一网站</span>SAMEORIGIN<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 嵌入页和被嵌入页在用一个域</span>ALLOW <span class="token operator">-</span> FROM<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 网址</span></code></pre><h2 id="5-传输过程安全问题"><a href="#5-传输过程安全问题" class="headerlink" title="5. 传输过程安全问题"></a>5. 传输过程安全问题</h2><ul><li>传输链路窃听篡改</li><li>https</li></ul><h3 id="5-1-传输链路窃听篡改"><a href="#5-1-传输链路窃听篡改" class="headerlink" title="5.1 传输链路窃听篡改"></a>5.1 传输链路窃听篡改</h3><p>我们可以用 anyproxy 代理软件来模拟攻击<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180604-232214-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ul><li>http 窃听<ul><li>窃听用户密码</li><li>窃听传输敏感信息</li><li>非法获取个人信息</li></ul></li><li>http 篡改<ul><li>插入广告</li><li>重定向网站</li><li>无法防御 xss 和 csrf 攻击</li></ul></li></ul><h3 id="5-2-https-防御"><a href="#5-2-https-防御" class="headerlink" title="5.2 https 防御"></a>5.2 https 防御</h3><p>超文本传输安全协议（ HTTPS ）是一种通过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。 HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180605-151139-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还有一种情况是中间人攻击，看下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180605-151324-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这种情况下要防御就需要引入证书</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180605-151341-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>证书无法伪造</li><li>证书私钥不被泄露</li><li>域名管理权不泄露</li><li>CA 坚守原则</li></ul><blockquote><p>免费证书 <a href="https://www.sslforfree.com" rel="external nofollow noopener noreferrer" target="_blank">www.sslforfree.com</a></p></blockquote><h4 id="5-2-1-https-部署"><a href="#5-2-1-https-部署" class="headerlink" title="5.2.1 https 部署"></a>5.2.1 https 部署</h4><pre class=" language-bash"><code class="language-bash">curl https://get.acme.sh <span class="token operator">|</span> sh/root/.acme.sh // 安装目录<span class="token function">cd</span> /root/./acme.sh --issue -d www.example.com --webroot /data/web/www.example.com/</code></pre><p>然后配置 nginx</p><pre class=" language-shell"><code class="language-shell">server{  listen 80;  listen 443 ssl http2;  server_name www.example.com;  ssl_certificate /root/.acme.sh/www.example.com/fullchain.cer;  ssl_certificate_key /root/.acme.sh/www.example.com/www.example.com.key;  location / {    root /data/web/www.example.com;  }}</code></pre><h2 id="6-密码安全问题"><a href="#6-密码安全问题" class="headerlink" title="6. 密码安全问题"></a>6. 密码安全问题</h2><ul><li>密码作用</li><li>密码存储</li><li>密码传输安全性</li><li>密码的替代方案</li><li>生物特征密码问题</li></ul><p><strong>密码 - 泄露渠道</strong></p><ul><li>数据库被偷</li><li>服务器被入侵</li><li>通讯被窃听</li><li>内部人员泄露</li><li>其他网站（撞库）</li></ul><h3 id="6-1-密码存储"><a href="#6-1-密码存储" class="headerlink" title="6.1 密码存储"></a>6.1 密码存储</h3><ul><li>严禁明文存储(防泄露)</li><li>单向变换(防泄露)</li><li>变换复杂度要求(防猜解) - 变换次数越多越安全<ul><li>加密成本几乎不变（生成密码时速度慢一些）</li><li>彩虹表失效（数量太大，无法建立通用性）</li><li>解密成本增大 N 倍</li></ul></li><li>密码复杂度要求(防猜解)</li><li>加盐(防猜解) - 帮助用户提高复杂度<ul><li><code>md5(sha1(md5(ID+ab83kd+原始密码+81kdso+盐+1lso;$2)))</code></li></ul></li></ul><h4 id="6-1-1-严禁明文存储"><a href="#6-1-1-严禁明文存储" class="headerlink" title="6.1.1 严禁明文存储"></a>6.1.1 严禁明文存储</h4><p>正常在数据库中是需要离线加密明文密码的，这里为了方便，我们在用户登录时做逻辑处理(加密、加盐)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// user.js</span><span class="token keyword">const</span> password <span class="token operator">=</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./password'</span><span class="token punctuation">)</span><span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token string">`select * from user where username = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果用户没有salt</span>  <span class="token comment" spellcheck="true">//需要升级</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>salt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> salt <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newPassword <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">encryptPassword</span><span class="token punctuation">(</span>salt<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`update user set password = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newPassword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', salt = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>salt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' where id = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span>salt <span class="token operator">=</span> salt<span class="token punctuation">;</span>    user<span class="token punctuation">.</span>password <span class="token operator">=</span> newPassword<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> encryptPassword <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">encryptPassword</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>salt<span class="token punctuation">,</span> data<span class="token punctuation">.</span>password<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>encryptPassword <span class="token operator">!==</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'密码不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// password.js</span><span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> md5 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> md5Hash <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  md5Hash<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> md5Hash<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>password<span class="token punctuation">.</span>getSalt <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">999999</span> <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>password<span class="token punctuation">.</span>encryptPassword <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>salt<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span>salt <span class="token operator">+</span> <span class="token string">'af$!##@$14##svc*&amp;sf%'</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> password<span class="token punctuation">;</span></code></pre><h4 id="6-1-2-单向变换"><a href="#6-1-2-单向变换" class="headerlink" title="6.1.2 单向变换"></a>6.1.2 单向变换</h4><ul><li>哈希算法<ul><li>明文-密文 – 对应</li><li>雪崩效应（明文有一点点不一样密文完全不一样）</li><li>密文 - 明文 无法反推</li><li>密文固定长度</li><li>常见哈希算法：md5 sha1 sha256</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180605-160201-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>虽然没有办法反推出原密码，但是可以查表，网上有很多这种彩虹表的查询</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180605-160643-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这种情况下可以组合加密来防止彩虹表的查询</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180605-161009-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="6-2-密码传输安全性"><a href="#6-2-密码传输安全性" class="headerlink" title="6.2 密码传输安全性"></a>6.2 密码传输安全性</h3><ul><li>https 传输</li><li>频率限制</li><li>前端加密意义有限</li></ul><p><strong>前端加密</strong></p><pre class=" language-bash"><code class="language-bash">jspm <span class="token function">install</span> js-md5</code></pre><h2 id="7-SQL-注入攻击"><a href="#7-SQL-注入攻击" class="headerlink" title="7. SQL 注入攻击"></a>7. SQL 注入攻击</h2><p><strong>关系型数据库</strong></p><ul><li>存放结构化数据</li><li>可高效操作大量数据</li><li>方便处理数据之间的关联关系</li><li>常见：access/sqlite/mysql/mssql server</li></ul><p><strong>注入攻击危害</strong></p><ul><li>猜解密码</li><li>获取数据</li><li>删库删表</li><li>拖库</li></ul><p><strong>sql 语句</strong></p><pre class=" language-shell"><code class="language-shell">select * from user where id=1;insert into user(username,password) values('test','123');update user set password='1234' where id=3;delete from user where id=3;</code></pre><h3 id="7-1-sql-注入攻击案例"><a href="#7-1-sql-注入攻击案例" class="headerlink" title="7.1 sql 注入攻击案例"></a>7.1 sql 注入攻击案例</h3><pre class=" language-shell"><code class="language-shell">select * from user where username = 'TooBug' and password = '1' or '1'='1'; # 否定前面语句select * from table where id="10" and mid(version(),1,1)=5 # 截取版本号第一位是否等于5，等于5前面语句生效，否则报错。select id,1,2,3 from table;select * from table union select 1,2,3 from table2; # 联合查询select * from table where mid(username,1,1)="t" # 查询username第一位等于't';</code></pre><h3 id="7-2-sql-注入攻击防御"><a href="#7-2-sql-注入攻击防御" class="headerlink" title="7.2 sql 注入攻击防御"></a>7.2 sql 注入攻击防御</h3><ul><li>关闭错误输出</li><li>检查数据类型</li><li>对数据进行转义</li><li>使用参数化查询(抓包 charles，wireshark)</li><li>使用 ORM(对象关系映射)- 增强安全性，开发效率</li></ul><h3 id="7-3-NoSQL-注入攻击和防御"><a href="#7-3-NoSQL-注入攻击和防御" class="headerlink" title="7.3 NoSQL 注入攻击和防御"></a>7.3 NoSQL 注入攻击和防御</h3><ul><li>检查数据类型</li><li>类型转换</li><li>写完整条件</li></ul><h2 id="8-接入层上传问题"><a href="#8-接入层上传问题" class="headerlink" title="8. 接入层上传问题"></a>8. 接入层上传问题</h2><h3 id="8-1-上传攻击"><a href="#8-1-上传攻击" class="headerlink" title="8.1 上传攻击"></a>8.1 上传攻击</h3><ul><li>上传文件</li><li>再次访问上传的文件</li><li>上传的文件被当成程序解析</li></ul><h3 id="8-2-防御"><a href="#8-2-防御" class="headerlink" title="8.2 防御"></a>8.2 防御</h3><ul><li>限制上传后缀（比如 php 程序禁止上传 php 文件）</li><li>文件类型检查<ul><li>fileType</li></ul></li><li>文件内容检查（开头特征）</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fileBuffer <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>fileBuffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x5b</span><span class="token punctuation">;</span></code></pre><ul><li>程序输出（node 就是如此，但是因为要读到内存中，有读和写，性能受影响。折中办法：访问文件直接输出指令给到前端 nginx 服务器读取，性能损耗会小一些）</li><li>权限控制 - 可写可执行互斥（原则）<ul><li>上传文件可写不可执行</li></ul></li><li>部署应用时用低权限用户，而不用 root 这种高权限用户</li></ul><h2 id="9-信息泄露和社会工程学"><a href="#9-信息泄露和社会工程学" class="headerlink" title="9. 信息泄露和社会工程学"></a>9. 信息泄露和社会工程学</h2><ul><li>信息泄露<ul><li>泄露系统敏感信息</li><li>泄露用户敏感信息</li><li>泄露用户密码</li></ul></li><li>信息泄露途径<ul><li>错误信息失控（mysql）</li><li>sql 注入</li><li>水平权限控制不当</li><li>xss/csrf</li></ul></li><li>社会工程学<ul><li>你的身份由你掌握的资料确定</li><li>别人掌握了你的资料</li><li>别人伪装成你的身份</li><li>利用你的身份干坏事</li></ul></li></ul><p><strong>案例:</strong></p><ul><li>电信诈骗</li><li>伪装公检法</li><li>QQ 视频借钱</li><li>微信伪装好友</li></ul><h3 id="9-1-OAuth-思想"><a href="#9-1-OAuth-思想" class="headerlink" title="9.1 OAuth 思想"></a>9.1 OAuth 思想</h3><ul><li>一切行为由用户授权</li><li>授权行为不泄露敏感信息</li><li>授权会过期</li></ul><h4 id="9-1-1-利用-OAuth-思想防止资料泄露"><a href="#9-1-1-利用-OAuth-思想防止资料泄露" class="headerlink" title="9.1.1 利用 OAuth 思想防止资料泄露"></a>9.1.1 利用 OAuth 思想防止资料泄露</h4><ul><li>用户授权读取资料</li><li>无授权的资料不可读取</li><li>不允许批量获取数据</li><li>数据接口可风控审计</li></ul><h2 id="10-其它安全问题"><a href="#10-其它安全问题" class="headerlink" title="10. 其它安全问题"></a>10. 其它安全问题</h2><ul><li>拒绝服务攻击 DDOS</li><li>重放攻击</li></ul><h3 id="10-1-拒绝服务攻击-DOS"><a href="#10-1-拒绝服务攻击-DOS" class="headerlink" title="10.1 拒绝服务攻击 DOS"></a>10.1 拒绝服务攻击 DOS</h3><p><strong>特征:</strong></p><ul><li>模拟正常用户</li><li>大量占用服务器资源</li><li>无法服务正常用户</li></ul><p><strong>类型:</strong></p><ul><li>TCP 半连接</li><li>HTTP 连接</li><li>DNS（域名解析服务器）</li></ul><h4 id="10-1-1-大规模分布式拒绝服务攻击-DDOS"><a href="#10-1-1-大规模分布式拒绝服务攻击-DDOS" class="headerlink" title="10.1.1 大规模分布式拒绝服务攻击 DDOS"></a>10.1.1 大规模分布式拒绝服务攻击 DDOS</h4><ul><li>流量可达几十到上百 G</li><li>分布式（肉鸡、代理）</li><li>极难防御</li></ul><h4 id="10-1-2-DOS-攻击防御"><a href="#10-1-2-DOS-攻击防御" class="headerlink" title="10.1.2 DOS 攻击防御"></a>10.1.2 DOS 攻击防御</h4><ul><li>防火墙</li><li>交换机、路由器</li><li>流量清洗</li><li>高防 IP</li></ul><h4 id="10-1-3-DOS-攻击预防"><a href="#10-1-3-DOS-攻击预防" class="headerlink" title="10.1.3 DOS 攻击预防"></a>10.1.3 DOS 攻击预防</h4><ul><li>避免重逻辑业务</li><li>快速失败快速返回</li><li>防雪崩机制</li><li>有损服务</li><li>CDN</li></ul><h3 id="10-2-重放攻击"><a href="#10-2-重放攻击" class="headerlink" title="10.2 重放攻击"></a>10.2 重放攻击</h3><p><strong>原理:</strong></p><ul><li>请求被窃听或记录</li><li>再次发起相同的请求</li><li>产生以外的结果</li></ul><p><strong>后果:</strong></p><ul><li>用户被多次消费</li><li>用户登录态被盗取</li><li>多次抽奖</li></ul><h4 id="10-2-1-防御"><a href="#10-2-1-防御" class="headerlink" title="10.2.1 防御"></a>10.2.1 防御</h4><ul><li>加密（https）</li><li>时间戳</li><li>token(session 后端生成)</li><li>nonce</li><li>签名</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="cookies-和-session-关系"><a href="#cookies-和-session-关系" class="headerlink" title="cookies 和 session 关系"></a>cookies 和 session 关系</h3><p>session 是基于 cookies 的存储来实现的（常用）</p><h3 id="cookies-特性"><a href="#cookies-特性" class="headerlink" title="cookies 特性"></a>cookies 特性</h3><p>容量小，跟随 html 发送，通过 http 头设置，通过 js 读取</p><h3 id="cookies-属性"><a href="#cookies-属性" class="headerlink" title="cookies 属性"></a>cookies 属性</h3><ul><li>域名，有域名不能跨域</li><li>路径，同一域名 path 不一样 cookies 读取情况不一样</li><li>有效期</li><li>http-only，没办法通过 js 读取，通过 http 发送后台给后台读取</li><li>same-site</li></ul><h3 id="删除一个-cookis-值？"><a href="#删除一个-cookis-值？" class="headerlink" title="删除一个 cookis 值？"></a>删除一个 cookis 值？</h3><p>设置一个过期时间为过去时间。</p><h3 id="https-如何保证数据不被窃听的"><a href="#https-如何保证数据不被窃听的" class="headerlink" title="https 如何保证数据不被窃听的"></a>https 如何保证数据不被窃听的</h3><p>通过数据加密方式，在客户端和服务端进行通信之前来协商一个加密协议，通过加密协议来传输所有数据。</p><h3 id="https-如何保证不被中间人攻击"><a href="#https-如何保证不被中间人攻击" class="headerlink" title="https 如何保证不被中间人攻击"></a>https 如何保证不被中间人攻击</h3><p>证书机制</p><h3 id="部署-https-的步骤"><a href="#部署-https-的步骤" class="headerlink" title="部署 https 的步骤"></a>部署 https 的步骤</h3><ul><li>确保全栈都可以部署到 https</li><li>找 ca 生成证书</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;web 安全主要分以下几个层面&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码层面&lt;/li&gt;
&lt;li&gt;架构层面&lt;/li&gt;
&lt;li&gt;运维层面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本来主要围绕架构层面进行展开，如何写一个没有漏洞的网站。了解安全问题的原因，避免开发带漏
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="前端安全" scheme="http://coder.liusixin.cn/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs编写静态博客命令行工具</title>
    <link href="http://coder.liusixin.cn/posts/d7a134ad/"/>
    <id>http://coder.liusixin.cn/posts/d7a134ad/</id>
    <published>2017-11-15T05:44:50.000Z</published>
    <updated>2017-12-05T13:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Node.js 除了可以编写服务器端程序， 也可以用来编写一些命令行工具， 本文会如何使用 commander 模块来编写一个命令行工具， 并以一个静态博客系统构建工具作为实例。具体内容包含以下几部分：</p><ul><li>commander 模块</li><li>markdown-it 模块</li><li>将 Markdown 转换成 HTML</li><li>实时监控文件变化</li><li>给 Markdown 内容套用模板</li><li>实时预览</li><li>生成整站静态页面</li></ul><p><strong>所使用到的第三方模块：</strong></p><ul><li>commonder<ul><li>解析命令行参数</li><li><a href="http://tj.github.io/commander.js/" rel="external nofollow noopener noreferrer" target="_blank">http://tj.github.io/commander.js/</a></li></ul></li><li>express<ul><li><a href="http://expressjs.com/" rel="external nofollow noopener noreferrer" target="_blank">http://expressjs.com/</a></li></ul></li><li>serve-static<ul><li>静态文件服务中间件</li><li><a href="bttps://www.npmjs.com/package/serve-static" rel="external nofollow noopener noreferrer" target="_blank">bttps://www.npmjs.com/package/serve-static</a></li></ul></li><li>markdown-it<ul><li>渲染 Markdown 格式的文档</li><li><a href="https://www.npmjs.com/package/markdown-it" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/markdown-it</a></li></ul></li><li>swig<ul><li>swig 语法模板引擎</li><li><a href="http://paularmstrong.github.io/swig/" rel="external nofollow noopener noreferrer" target="_blank">http://paularmstrong.github.io/swig/</a></li></ul></li><li>rd<ul><li>遍历目录下的所有文件，包括子目录</li><li><a href="https://www.npmjs.com/package/rd" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/rd</a></li></ul></li><li>fs-extra<ul><li>扩展了 fs 模块的一些方法</li><li><a href="https://www.npmjs.com/package/fs-extra" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/fs-extra</a></li></ul></li><li>open<ul><li>使用系统程序打开指定文件或网址</li><li><a href="https://www.npmjs.com/package/open" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/open</a></li></ul></li><li>moment<ul><li>解析、格式化日期时间</li><li><a href="http://momentjs.com/docs/" rel="external nofollow noopener noreferrer" target="_blank">http://momentjs.com/docs/</a></li></ul></li></ul><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>在编写命令行工具时，我们首先要定义命令的使用方法，比如：</p><pre class=" language-shell"><code class="language-shell">$ XBlog new # 表示创建一个空的博客；$ XBlog build # 表示生成整站静态HTML页面等。</code></pre><h3 id="常见的命令格式"><a href="#常见的命令格式" class="headerlink" title="常见的命令格式"></a>常见的命令格式</h3><p>一条命令一般包含以下几部分：</p><pre class=" language-shell"><code class="language-shell">command [options] [arguments]- command # 命令名称，比如node。- options # 单词或单字，比如 --help或-h。- arguments # 参数，有时选项也带参数，比如：xss。</code></pre><p>在查看命令帮助时，会出现 <code>&quot;[]&quot; &quot;&lt;&gt;&quot; &quot;|&quot;</code> 等符号:</p><pre class=" language-shell"><code class="language-shell">- [] # 表示是可选的。- <> # 表示可变选项，一般是多选一，而且必须要选其一。- x|y|z # 多选一，如果加上"[]"，则可不选。- -abc # 多选，如果加上"[]", 则可不选。</code></pre><p>比如，NPM 命令的使用方法描述如下：</p><pre class=" language-shell"><code class="language-shell">$ npm <command>$ npm install$ npm list</code></pre><p>以上是大多数命令行工具遵循的语法格式。</p><h3 id="定义静态博客命令格式"><a href="#定义静态博客命令格式" class="headerlink" title="定义静态博客命令格式"></a>定义静态博客命令格式</h3><p>我们要实现的命令行生成工具包含以下功能：</p><ul><li>创建一个空的博客；</li><li>文章使用 Markdown 格式编写；</li><li>本地实时预览；</li><li>生成整站静态 HTML；</li></ul><p>根据描述，我们先来定义这个命令行工具的使用方法：</p><pre class=" language-shell"><code class="language-shell">XBlog create [dir] # 创建一个空的博客，dir为博客所在目录（可选，默认为当前目录）XBlog preview [dir] # 实时预览，dir为博客所在目录（可选，默认为当前目录）XBlog build [dir] [--output target] # 生成整站静态HTML, dir为博客所在目录（可选，默认为当前目录），target为生成的静态HTML存放目录</code></pre><h2 id="编写命令行工具"><a href="#编写命令行工具" class="headerlink" title="编写命令行工具"></a>编写命令行工具</h2><p>在 Node 中，可以通过 <code>process.argv</code> 变量来取得启动时的参数，它是一个数组。比如：</p><pre class=" language-shell"><code class="language-shell">$ node test.js build xxx# process.argv 的值为：['node', 'test.js', 'build', 'xxx']</code></pre><p>第一个为命令名，第二个为程序文件名，从第三个参数起则是启动 Node 程序所传的参数，每个参数用空格隔开。由于这些参数都是字符串，为了支持更灵活的参数组合方法，需要编写一个专门的程序先来解析这些参数字符串，而 commander 模块已经为我们做好了。</p><p>首先新建空的项目文件夹，然后<code>npm init -y</code>来初始化。</p><pre class=" language-shell"><code class="language-shell">$ mkdir XBlog && cd XBlog$ npm init -y# 安装commander模块$ npm i commander -D</code></pre><p>然后新建文件 <code>bin/XBlog</code> 并编辑</p><pre class=" language-js"><code class="language-js">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node<span class="token keyword">var</span> program <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'commander'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 命令版本号</span>program<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// help命令</span>program  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'help'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'显示使用帮助'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    program<span class="token punctuation">.</span><span class="token function">outputHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// create命令</span>program  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'create [dir]'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'创建一个空的博客'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'create %s'</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// preview命令</span>program  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'preview [dir]'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'实时预览'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'preview %s'</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// build命令</span>program  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'build [dir]'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'生成整站静态HTML'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'-o, --output &lt;dir>'</span><span class="token punctuation">,</span> <span class="token string">'生成的静态HTML存放目录'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'create %s, output %s'</span><span class="token punctuation">,</span> dir<span class="token punctuation">,</span> options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开始解析命令</span>program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>command(&#39;help&#39;)</code> 表示当前是什么命令；</li><li><code>description(&#39;显示使用帮助&#39;)</code> 当前命令的简单描述，在查看命令帮助时会显示出来；</li><li><code>action(callback)</code> 为解析到当前命令时执行的回调函数。</li><li><code>option(&#39;-o, --output &lt;dir&gt;&#39;, &#39;生成的静态HTML存放目录&#39;)</code> 表示在执行 build 命令时，还可以附加一些可选项，比如 <code>-o &lt;dir&gt;</code>用来指定生成的文件输出到哪里。</li></ul><p>第一行 <code>#!/usr/bin/env node</code> 指定当前文件使用哪个解释器执行。在 Linux Shell 环境下，文件具有执行权限时，可以直接通过 <code>./xxx</code> 来执行（一般要执行 Node 时是执行命令 <code>node xxx.js</code>), 如不指定解释器，则默认使用 bash 执行。</p><p>现在编辑文件<code>package.json</code>, 增加 bin 属性：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"XBlog"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"liusixin"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"XBlog"</span><span class="token operator">:</span> <span class="token string">"./bin/XBlog"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"commander"</span><span class="token operator">:</span> <span class="token string">"^2.10.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>bin</code> 属性用来指定当前模块需要链接的命令，在这里我们指定了 XBlog 命令是执行文件 <code>./bin/XBlog</code>。</p><p>为了让这个设置生效，还需要执行以下命令来进行链接：</p><pre class=" language-shell"><code class="language-shell">$ sudo npm link</code></pre><p>执行成功后，会显示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-152629@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>现在我们试下执行： <code>XBlog help</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-152802@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>说明我们这个命令行工具的基本框架已经完成了;</p><h2 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h2><p>虽然实现了基本框架，但在功能上还是空白的。一个静态博客工具包含以下这些功能模块：</p><ul><li>渲染文章内容页面和文章列表页面；</li><li>修改模板实时预览；</li><li>创建基本的博客模板；</li></ul><p>我们先从实现 preview 命令入手。</p><h3 id="启动-Web-服务器"><a href="#启动-Web-服务器" class="headerlink" title="启动 Web 服务器"></a>启动 Web 服务器</h3><p>为了使代码结构更加清晰，首先我们将 <code>bin/XBlog</code> 文件中 preview 命令的回调函数改为<code>require(&#39;../lib/cmd_preview&#39;);</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// preview命令</span>program  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'preview [dir]'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'实时预览'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../lib/cmd_preview'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>新建文件 <code>lib/cmd_preview.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> serveStatic <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'serve-static'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  dir <span class="token operator">=</span> dir <span class="token operator">||</span> <span class="token string">'.'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定当前博客项目所在的目录，如果没有指定则默认为当前目录</span>  <span class="token comment" spellcheck="true">// 初始化express</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/assets'</span><span class="token punctuation">,</span> <span class="token function">serveStatic</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态资源文件</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染文章</span>  router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/posts/*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文章内容页面</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染列表</span>  router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文章列表页面</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'文章列表'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>使用 express 来启动一个 Web 服务器，主要处理以下三部分内容：</p><ul><li>以 <code>&quot;/assets&quot;</code> 开头的 URL 为博客中用到的静态资源文件， 对应的是博客根目录下的 assets 目录；</li><li>以 <code>&quot;/posts&quot;</code> 开头的 URL 为文章内容页面，比如访问的 URL 是 <code>/posts/2017-12/hello-world.html</code>, 对应的是源文件<code>_posts/2017-12/helloworld.md</code>;</li><li><code>&quot;/&quot;</code> 为文章列表页面。</li></ul><p>由于使用到了 <code>express</code> 和 <code>serve-static</code> 两个模块，所以先安装它们：</p><pre class=" language-shell"><code class="language-shell">$ npm i express serve-static -S</code></pre><p>然后启动</p><pre class=" language-shell"><code class="language-shell">$ XBlog preview</code></pre><p>然后 浏览器输入 <code>http://localhost:3000</code> 查看效果</p><h3 id="渲染文章页面"><a href="#渲染文章页面" class="headerlink" title="渲染文章页面"></a>渲染文章页面</h3><p>文章内容使用 Markdown 语法来编写，我们可以使用<code>markdown-it</code>模块来解析并将其转为相应的 HTML。模板引擎我们使用 swig。</p><p>文章源文件存储在_post 目录下，比如文件<code>_posts/2017-12/hello-world.md</code> 对应的 URL 是 <code>/posts/2017-12/hello-world.html</code>。</p><p>文件<code>lib/cmd_preview.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> serveStatic <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'serve-static'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'markdown-it'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  html<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  langPrefix<span class="token punctuation">:</span> <span class="token string">'code-'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  dir <span class="token operator">=</span> dir <span class="token operator">||</span> <span class="token string">'.'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定当前博客项目所在的目录，如果没有指定则默认为当前目录</span>  <span class="token comment" spellcheck="true">// 初始化express</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/assets'</span><span class="token punctuation">,</span> <span class="token function">serveStatic</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态资源文件</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染文章</span>  router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/posts/*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文章内容页面</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">stripExtname</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">,</span> name <span class="token operator">+</span> <span class="token string">'.md'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">markdownToHTML</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染列表</span>  router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文章列表页面</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'文章列表'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 去掉文件名中的扩展名</span><span class="token keyword">function</span> <span class="token function">stripExtname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> i <span class="token operator">=</span> name<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将Markdown转换为HTML</span><span class="token keyword">function</span> <span class="token function">markdownToHTML</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>content <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们随便写篇文章，保存到 <code>example/posts/2017-12/hello-world.md</code></p><pre class=" language-md"><code class="language-md"># hello world</code></pre><p>安装所需模块 <code>markdown-it</code> 并启动程序（注意 preview 命令后面有指定博客项目所在的目录，为<code>example</code>)</p><pre class=" language-shell"><code class="language-shell">$ npm i markdown-it -S$ XBlog preview example</code></pre><p>然后在浏览器中打开 <code>http://127.0.0.1:3000/posts/2017-12/hello-world.html</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-170704@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="文章元数据"><a href="#文章元数据" class="headerlink" title="文章元数据"></a>文章元数据</h3><p>一篇文章除内容外，一般还会带上一些元数据，比如文章标题、发表时间、标签等:</p><pre class=" language-md"><code class="language-md">---title: hello-worlddate: 2017-12-01---</code></pre><p>文件顶部在 “—” 之间的部分是文章的元数据</p><p>修改文件<code>lib/cmd_preview.js</code>, 增加函数解析文章元数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 解析文章内容</span><span class="token keyword">function</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> split <span class="token operator">=</span> <span class="token string">'---\n'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>split<span class="token punctuation">,</span> i <span class="token operator">+</span> split<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> str <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> split<span class="token punctuation">.</span>length<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j <span class="token operator">+</span> split<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> key <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> value <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          info<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  info<span class="token punctuation">.</span>source <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再修改渲染文章路由处理部分</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// var html = markdownToHTML(content.toString());</span>  <span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">markdownToHTML</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>重新启动程序并刷新页面，可看到文章的标题不见了，而在控制台中可看到这样的输出：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-172852@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其中 title 和 date 为我们在文章源文件中设置的元数据，而 source 则为文章的内容。有了这些元数据，我们接下来就可以做更多的事情了。</p><h3 id="增加模板"><a href="#增加模板" class="headerlink" title="增加模板"></a>增加模板</h3><p>上面的示例中，没有好看样式，显得略丑， 接下来我们给它接上一个模板。</p><p>修改文件<code>lib/cmd_preview.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> swig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'swig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>swig<span class="token punctuation">.</span><span class="token function">setDefaults</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 渲染模板</span><span class="token keyword">function</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> swig<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> file<span class="token punctuation">,</span>    autoescape<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    locals<span class="token punctuation">:</span> data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>为了编程方便，此处使用 <code>fs.readFileSync()</code> 这个方法来读取文件内容，在读取过程中它会造成进程阻塞，但在本例中不会造成影响。</p></blockquote><p>修改原来渲染文章内容的部分：</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  post<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">markdownToHTML</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  post<span class="token punctuation">.</span>layout <span class="token operator">=</span> post<span class="token punctuation">.</span>layout <span class="token operator">||</span> <span class="token string">'post'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_layout'</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span>layout <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    post<span class="token punctuation">:</span> post  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在渲染模板时，传递<code>post</code>变量进去，在模板中可以通过<code>post.content</code>来取得文章的内容，通过<code>post.xxx</code>来取得文章的元数据<code>XXX</code>。可以通过元数据<code>layout</code>来指定要渲染的模块，默认为<code>post</code>, 模板文件存储在 <code>_layout</code> 目录下。</p><p>新建模板文件，保存到<code>example/_layout/post.html</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{config.title|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{post.title|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>日期：{{post.date|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{post.content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>引用了一个 CSS 文件，<code>example/assets/style.css</code>:</p><pre class=" language-css"><code class="language-css"><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.6</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li i </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#888</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">pre </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f5f5f5</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.post-date</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.post-title</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.post-title</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>安装 swig 模块并启动程序：</p><pre class=" language-shell"><code class="language-shell">$ npm i swig -S$ XBlog preview example</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-180209@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到美观多了。接下来我们试试换个模板，给文章添加元数据：</p><pre class=" language-md"><code class="language-md">layout: post2</code></pre><p>新建模板文件<code>example/_layout/post2.html</code>:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{config.title|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{post.title|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>日期：{{post.date|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{post.content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>区别是 post2 里没有引 css 文件。我们再看下效果:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-180803@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="渲染文章列表"><a href="#渲染文章列表" class="headerlink" title="渲染文章列表"></a>渲染文章列表</h3><p>要渲染文章列表，则首先要遍历所有文章，并且按照发表时间来排序，然后将其标题渲染出来。每篇文章均存储在 <code>_posts</code> 目录下，为了方便管理，我们采用的格式是 <code>发表年月/文件名.md</code>，可以借助<code>rd</code>模块来遍历整个 <code>_posts</code> 目录下的 <code>.md</code> 文件。</p><p>修改文件<code>lib/cmd_preview.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 渲染列表</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 文章列表页面</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sourceDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rd<span class="token punctuation">.</span><span class="token function">eachFileFilterSync</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">,</span> <span class="token regex">/\.md$/</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> source <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    post<span class="token punctuation">.</span>timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    post<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'/posts/'</span> <span class="token operator">+</span> <span class="token function">stripExtname</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span>timestamp <span class="token operator">-</span> a<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_layout'</span><span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    posts<span class="token punctuation">:</span> list  <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li><code>rd.eachFileFilterSync(dir, pattern, callback)</code>遍历所有文件，<code>dir</code>为遍历目录，<code>pattern</code>为过滤规则正则，此例子中我们只读取 <code>md</code> 后缀的文件，<code>callback</code> 为回调函数，每读取到一个文件就会执行一次，它的第一个参数为这个文件的完整路径；</li><li>在得到文章列表之后，我们还需要对文章按发表时间降序排序，首先我们先通过 <code>post.timestamp = new Date(post.date);</code> 得到文章发表时间的时间戳，然后通过数组的 <code>sort()</code>来进行排序；</li><li><code>post.url</code> 为文章的链接，主要为了在渲染文章列表时，点击跳转详细内容页面，通过 <code>&#39;/posts/&#39; + stripExtname(f.slice(sourceDir.length + 1)) + &#39;.html&#39;</code> 来取得。其原理为先取得文章源文件在 <code>_posts</code> 目录下的相对路径，然后将其后缀名<code>.md</code>改为<code>.html</code>即<br>可。</li></ul><p>新建文章列表的模板文件为<code>_layout/index.html</code>,</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>{{config.title|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/assets/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{post.title|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    {% for post in posts %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{post.date|escape}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-title<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{post.url|escape}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{post.title|escape}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>我们再随便添加几篇文章，并安装 rd 模块，然后启动程序</p><pre class=" language-shell"><code class="language-shell">$ npm i rd -S$ XBlog preview example</code></pre><p>然后在浏览器中打开 <code>http://localhost:3000</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-183555@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这样，我们的静态博客实时预览就完成了。</p><h2 id="生成静态博客"><a href="#生成静态博客" class="headerlink" title="生成静态博客"></a>生成静态博客</h2><p>生成静态博客内容时渲染文章的程序与实时预览时基本一样，区别是这一步不是等待用户访问时再渲染文章，而是直接遍历所有文章并直接渲染，然后把渲染后的页面直接保存为文件，因此我们可以先把这些公共的程序提取出来。</p><p>首先将渲染文章的内容部分和渲染文章的列表部分的程序提取处理， 分别命名为<code>renderPost()</code>和<code>renderIndex()</code>, 新建文件<code>lib/utils.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> swig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'swig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'markdown-it'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  html<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  langPrefix<span class="token punctuation">:</span> <span class="token string">'code-'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>swig<span class="token punctuation">.</span><span class="token function">setDefaults</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 去掉文件名中的扩展名</span><span class="token keyword">function</span> <span class="token function">stripExtname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> i <span class="token operator">=</span> name<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将Markdown转换为HTML</span><span class="token keyword">function</span> <span class="token function">markdownToHTML</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>content <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解析文章内容</span><span class="token keyword">function</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> split <span class="token operator">=</span> <span class="token string">'---\n'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>split<span class="token punctuation">,</span> i <span class="token operator">+</span> split<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> str <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> split<span class="token punctuation">.</span>length<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j <span class="token operator">+</span> split<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> key <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> value <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          info<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  info<span class="token punctuation">.</span>source <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 渲染模板</span><span class="token keyword">function</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> swig<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> file<span class="token punctuation">,</span>    autoescape<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    locals<span class="token punctuation">:</span> data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历所有文章</span><span class="token keyword">function</span> <span class="token function">eachSourceFile</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  rd<span class="token punctuation">.</span><span class="token function">eachFileFilterSync</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">,</span> <span class="token regex">/\.md$/</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 渲染文章</span><span class="token keyword">function</span> <span class="token function">renderPost</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  post<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">markdownToHTML</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  post<span class="token punctuation">.</span>layout <span class="token operator">=</span> post<span class="token punctuation">.</span>layout <span class="token operator">||</span> <span class="token string">'post'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_layout'</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span>layout <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    post<span class="token punctuation">:</span> post  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> html<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 渲染文章列表</span><span class="token keyword">function</span> <span class="token function">renderIndex</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sourceDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">eachSourceFile</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> source <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    post<span class="token punctuation">.</span>timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    post<span class="token punctuation">.</span>url <span class="token operator">=</span>      <span class="token string">'/posts/'</span> <span class="token operator">+</span> <span class="token function">stripExtname</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span>timestamp <span class="token operator">-</span> a<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_layout'</span><span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    posts<span class="token punctuation">:</span> list  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> html<span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>renderPost <span class="token operator">=</span> renderPost<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>renderIndex <span class="token operator">=</span> renderIndex<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>stripExtname <span class="token operator">=</span> stripExtname<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>eachSourceFile <span class="token operator">=</span> eachSourceFile<span class="token punctuation">;</span></code></pre><p>优化<code>lib/cmd_preview.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> serveStatic <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'serve-static'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  dir <span class="token operator">=</span> dir <span class="token operator">||</span> <span class="token string">'.'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定当前博客项目所在的目录，如果没有指定则默认为当前目录</span>  <span class="token comment" spellcheck="true">// 初始化express</span>  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/assets'</span><span class="token punctuation">,</span> <span class="token function">serveStatic</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态资源文件</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染文章</span>  router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/posts/*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文章内容页面</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">stripExtname</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">,</span> name <span class="token operator">+</span> <span class="token string">'.md'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">renderPost</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染列表</span>  router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文章列表页面</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">renderIndex</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Blog is running`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>重新启动预览程序，可以看到程序正常运行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-190933@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>接下来实现 build 命令</strong></p><p>修改文件<code>bin/XBlog</code>:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// build命令</span>program  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'build [dir]'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'生成整站静态HTML'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'-o, --output &lt;dir>'</span><span class="token punctuation">,</span> <span class="token string">'生成的静态HTML存放目录'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../lib/cmd_build'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>新建文件<code>lib/cmd_build.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  dir <span class="token operator">=</span> dir <span class="token operator">||</span> <span class="token string">'.'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> outputDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output <span class="token operator">||</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 写入文件</span>  <span class="token keyword">function</span> <span class="token function">outputFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'生成页面：%s'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">outputFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 生成文章内容页面</span>  <span class="token keyword">var</span> sourceDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">eachSourceFile</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">renderPost</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> relativeFile <span class="token operator">=</span>      utils<span class="token punctuation">.</span><span class="token function">stripExtname</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">,</span> <span class="token string">'posts'</span><span class="token punctuation">,</span> relativeFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">outputFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 生成首页</span>  <span class="token keyword">var</span> htmlIndex <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">renderIndex</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fileIndex <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">outputFile</span><span class="token punctuation">(</span>fileIndex<span class="token punctuation">,</span> htmlIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li><code>build</code> 命令允许通过 <code>--output &lt;dir&gt;</code> 选项来指定文件的输出路径，如果没有指定则默认输出到当前博客项目所在的目录， 通过 <code>path.resolve(options.output || dir)</code>来取得，并保存到变量<code>outputDir</code>中；</li><li>保存文件时使用<code>fs-extra</code>模块的 <code>fs.outputFileSync()</code> 函数来做，其好处是可以不用管目录是否存在，如果目录不存在，则模块会自动帮我们创建。</li></ul><p>安装<code>fs-extra</code>模块并执行 build 命令：</p><pre class=" language-shell"><code class="language-shell">$ npm i fs-extra -S$ XBlog build example</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-192155@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同时可以看到生成目录</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-192257@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果想要输出到别的目录，可以指定 <code>--output</code>,比如：</p><pre class=" language-shell"><code class="language-shell">$ XBlog build example --output output</code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>有时需要在渲染页面时用到一些公共的数据，在启动实时预览程序时希望可以自已指定要监听的端口，这时我们可以通过博客目录下的<code>config.json</code>来指定这些数据。</p><p>修改文件<code>lib/utils.js</code>：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 读取配置文件</span><span class="token keyword">function</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'config.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>loadConfig <span class="token operator">=</span> loadConfig<span class="token punctuation">;</span></code></pre><p>新建文件<code>example/config.json</code>:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">3100</span><span class="token punctuation">}</span></code></pre><p>修改文件<code>lib/cmd_preview.js</code>，顶部增加代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> open <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">var</span> config <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">loadConfig</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> port <span class="token operator">=</span> config<span class="token punctuation">.</span>port <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:'</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Blog is running`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>通过配置文件 <code>port</code> 属性指定监听端口，如果没有则默认<code>3000</code>;</li><li><code>open</code> 模块用于调用系统浏览器打开指定网址，在<code>preview</code>命令执行后，将自动在浏览器中打开博客首页。</li></ul><p>安装<code>open</code>模块并执行<code>preview</code>命令：</p><pre class=" language-shell"><code class="language-shell">S npm i open -SS XBlog preview example</code></pre><p>执行命令后，就可以看到浏览器会自动打开<code>http://127.0.0.1:3100</code>。</p><p>接下来我们实现在模板中也可以通过 config 变量来访问到配置数据。</p><p>修改文件<code>lib/utils.js</code>, 将<code>renderPost()</code>和<code>renderIndex()</code>修改：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 渲染文章</span><span class="token keyword">function</span> <span class="token function">renderPost</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  post<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">markdownToHTML</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  post<span class="token punctuation">.</span>layout <span class="token operator">=</span> post<span class="token punctuation">.</span>layout <span class="token operator">||</span> <span class="token string">'post'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> layout <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_layout'</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span>layout <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> <span class="token punctuation">{</span>    config<span class="token punctuation">:</span> config<span class="token punctuation">,</span>    post<span class="token punctuation">:</span> post  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> html<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 渲染文章列表</span><span class="token keyword">function</span> <span class="token function">renderIndex</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sourceDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">eachSourceFile</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> source <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token function">parseSourceContent</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    post<span class="token punctuation">.</span>timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    post<span class="token punctuation">.</span>url <span class="token operator">=</span>      <span class="token string">'/posts/'</span> <span class="token operator">+</span> <span class="token function">stripExtname</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>sourceDir<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token punctuation">.</span>timestamp <span class="token operator">-</span> a<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> layout <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_layout'</span><span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">renderFile</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> <span class="token punctuation">{</span>    config<span class="token punctuation">:</span> config<span class="token punctuation">,</span>    posts<span class="token punctuation">:</span> list  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> html<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>在渲染时通过<code>loadConfig()</code>来读取配置信息，并作为 config 变量传递给模板。</p></blockquote><h2 id="创建空白博客模板"><a href="#创建空白博客模板" class="headerlink" title="创建空白博客模板"></a>创建空白博客模板</h2><p>在创建一个新的博客项目时，为了方便使用，我们希望这个工具能自动创建一些必需的文件，比如页面模板和默认配置文件，这样就可以马上编写文章了。</p><p>把上面创建的一些文件保存在 tpl 目录下：</p><ul><li>将<code>example/_layout/index.html</code>复制到<code>tpl/_layout/index.html</code>;</li><li>将<code>example/_layout/post.html</code>复制到<code>tpl/_layout/post.html</code>;</li><li>将<code>example/assets/style.css</code>复制到<code>tpl/assets/style.css</code>;</li><li>将<code>example/config.json</code>复制到<code>tpl/config.json</code>。</li></ul><p>一个空的博客项目包含以下目录：</p><ul><li><code>_layout</code>目录，存放模板文件；</li><li><code>_posts</code>目录，存放文章内容源文件；</li><li><code>posts</code>目录，存放生成的博客页面；</li><li><code>assets</code>目录，存放博客页面中引用到的静态资源。</li></ul><p>我们还可以在新博客自动创建一篇 hello, world 文章。</p><p>修改文件<code>bin/XBlog</code>, 将 create 命令部分改为：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// create命令</span>program  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'create [dir]'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">'创建一个空的博客'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../lib/cmd_create'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>新建文件<code>lib/cmd_create.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  dir <span class="token operator">=</span> dir <span class="token operator">||</span> <span class="token string">'.'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建基本目录</span>  fs<span class="token punctuation">.</span><span class="token function">mkdirsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_layout'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">mkdirsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">mkdirsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">mkdirsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'posts'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 复制模板文件</span>  <span class="token keyword">var</span> tplDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../tpl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">copySync</span><span class="token punctuation">(</span>tplDir<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建第一篇文章</span>  <span class="token function">newPost</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'hello, world'</span><span class="token punctuation">,</span> <span class="token string">'这是我的第一篇文章'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一篇文章</span><span class="token keyword">function</span> <span class="token function">newPost</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> title<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'---'</span><span class="token punctuation">,</span>    <span class="token string">'title: '</span> <span class="token operator">+</span> title<span class="token punctuation">,</span>    <span class="token string">'date: '</span> <span class="token operator">+</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'---'</span><span class="token punctuation">,</span>    <span class="token string">''</span><span class="token punctuation">,</span>    content  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/hello-world.md'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'_posts'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">outputFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>使用<code>fs-extra</code>模块提供的<code>mkdirsSync()</code>来创建目录， 可以不用管其父目录是否存在，模块会自动帮我们创建；</li><li>使用<code>fs-extra</code>模块提供的<code>copySync()</code>来复制一个目录；</li><li>使用<code>moment</code>模块来生成日期字符串。</li></ul><p>安装 moment 模块，创建一个空的项目并预览：</p><pre class=" language-shell"><code class="language-shell">$ npm i moment -S$ XBlog create new_blog$ XBlog preview new_blog</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180803-220042@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>至此，静态博客的基本功能已经完成了。</p><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="评论组件"><a href="#评论组件" class="headerlink" title="评论组件"></a>评论组件</h3><p>由于这个博客是静态页面，所以无法在服务器端处理用户对文章内容的评论。现在网上已有很多第三方的评论组件，我们可以在模板中简单地填写一些代码即可使用到这些服务。以下是一些常用的第三方评论组件。</p><ul><li>多说：社会化评论系统、社交评论插件，详细介绍见 <a href="http://duoshuo.com/" rel="external nofollow noopener noreferrer" target="_blank">http://duoshuo.com/</a>。</li><li>Disqus：The Web’s Community of Communities, 详细介绍见 <a href="https://disqus.com" rel="external nofollow noopener noreferrer" target="_blank">https://disqus.com</a>。</li></ul><p>我们在模板文件<code>_layout/post.html</code>末尾添加以下多说评论组件的代码:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 多说评论框start --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds-thread<span class="token punctuation">"</span></span> <span class="token attr-name">data-thread-key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{post.title|escape}}<span class="token punctuation">"</span></span> <span class="token attr-name">data-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 多说评论框end --></span><span class="token comment" spellcheck="true">&lt;!-- 多说公共JS代码start (一个网页只需插入一次） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> duoshuoQuery <span class="token operator">=</span> <span class="token punctuation">{</span>    short_name<span class="token punctuation">:</span> <span class="token string">"node-in-action-blog"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> ds <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ds<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>      ds<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      ds<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol <span class="token operator">==</span> <span class="token string">'https:'</span> <span class="token operator">?</span> <span class="token string">'https:'</span> <span class="token punctuation">:</span> <span class="token string">'http:'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'//static.duoshuo.com/embed.js'</span><span class="token punctuation">;</span>      ds<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">'UTF-8'</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>O<span class="token punctuation">]</span> <span class="token operator">||</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>O<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 多说公共JS代码end --></span></code></pre><h3 id="分享组件"><a href="#分享组件" class="headerlink" title="分享组件"></a>分享组件</h3><p>可以使用国内的 “加网” 提供的分享组件，详细介绍见<a href="http://www.jiathis.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.jiathis.com/</a>。</p><p>我们在模板文件<code>_layout/post.html</code>末尾添加以下 JiaThis 分享组件：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- JiaThis Button BEGIN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis—style_32x32<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis_button_qzone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis button tsina<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis_button_tqq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis button weixin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis button renren<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.jiathis.com/share<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis jiathis_txt jtico jtico_jiathis <span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jiathis_counter_style<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://v3.jiathis.com/code/jia.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- JiaThis Button END --></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Node.js 除了可以编写服务器端程序， 也可以用来编写一些命令行工具， 本文会如何使用 commander 模块来编写一个命令行工具， 
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="Nodejs" scheme="http://coder.liusixin.cn/tags/Nodejs/"/>
    
      <category term="Koa2" scheme="http://coder.liusixin.cn/tags/Koa2/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式--结构型设计模式</title>
    <link href="http://coder.liusixin.cn/posts/5a581879/"/>
    <id>http://coder.liusixin.cn/posts/5a581879/</id>
    <published>2017-11-08T12:23:57.000Z</published>
    <updated>2017-11-08T12:23:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该系列参考自 《JavaScript 设计模式》</p></blockquote><blockquote><p>以及 汤姆大叔的博文 <a href="https://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" rel="external nofollow noopener noreferrer" target="_blank">深入理解 JavaScript 系列</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>外观模式</li><li>适配器模式</li><li>代理模式</li><li>装饰者模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul><h1 id="一-外观模式"><a href="#一-外观模式" class="headerlink" title="一. 外观模式"></a>一. 外观模式</h1><blockquote><p>为一组复杂子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统访问更加的容易。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用外观模式注册事件监听</span><span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dom<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    dom<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用外观模式获取事件对象</span><span class="token keyword">var</span> getEvent <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过对接口的二次封装，使其简单易用，隐藏起内部的复杂度，外观模式就是对接口的外层包装，以供上层代码调用。因此外观模式封装的接口方法不需要接口的具体实现，只需要按照接口的使用规则使用即可。</p><h1 id="二-适配器模式"><a href="#二-适配器模式" class="headerlink" title="二. 适配器模式"></a>二. 适配器模式</h1><blockquote><p>将一个类的接口转换为另外一个类的接口以满足用户的需求，使类之间的接口不兼容问题通过适配器得以解决。</p></blockquote><p>我们来举一个例子，鸭子（Dock）有飞（fly）和嘎嘎叫（quack）的行为，而火鸡虽然也有飞（fly）的行为，但是其叫声是咯咯的（gobble）。如果你非要火鸡也要实现嘎嘎叫（quack）这个动作，那我们可以复用鸭子的 quack 方法，但是具体的叫还应该是咯咯的，此时，我们就可以创建一个火鸡的适配器，以便让火鸡也支持 quack 方法，其内部还是要调用 gobble。</p><p>首先要先定义鸭子和火鸡的抽象行为，也就是各自的方法函数：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//鸭子</span><span class="token keyword">var</span> Duck <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Duck<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'该方法必须被重写!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Duck<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>quack <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'该方法必须被重写!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//火鸡</span><span class="token keyword">var</span> Turkey <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Turkey<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">' 该方法必须被重写 !'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Turkey<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>gobble <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">' 该方法必须被重写 !'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//鸭子</span><span class="token keyword">var</span> MallardDuck <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Duck<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>MallardDuck<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原型是Duck</span>MallardDuck<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以飞翔很长的距离!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>MallardDuck<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>quack <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'嘎嘎！嘎嘎！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//火鸡</span><span class="token keyword">var</span> WildTurkey <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Turkey<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>WildTurkey<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Turkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原型是Turkey</span>WildTurkey<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'飞翔的距离貌似有点短!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>WildTurkey<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>gobble <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'咯咯！咯咯！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>为了让火鸡也支持 quack 方法，我们创建了一个新的火鸡适配器<code>TurkeyAdapter</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> TurkeyAdapter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>oTurkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Duck<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>oTurkey <span class="token operator">=</span> oTurkey<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>TurkeyAdapter<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TurkeyAdapter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>quack <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>oTurkey<span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>TurkeyAdapter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fly <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> nFly <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> nLenFly <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> nFly <span class="token operator">&lt;</span> nLenFly<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>oTurkey<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nFly <span class="token operator">=</span> nFly <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>该构造函数接受一个火鸡的实例对象，然后使用 Duck 进行 apply，其适配器原型是 Duck，然后要重新修改其原型的 quack 方法，以便内部调用 oTurkey.gobble()方法。其 fly 方法也做了一些改变，让火鸡连续飞 5 次（内部也是调用自身的 oTurkey.fly()方法）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> oMallardDuck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MallardDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> oWildTurkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildTurkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> oTurkeyAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurkeyAdapter</span><span class="token punctuation">(</span>oWildTurkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原有的鸭子行为</span>oMallardDuck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oMallardDuck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原有的火鸡行为</span>oWildTurkey<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oWildTurkey<span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适配器火鸡的行为（火鸡调用鸭子的方法名称）</span>oTurkeyAdapter<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oTurkeyAdapter<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="三-代理模式"><a href="#三-代理模式" class="headerlink" title="三. 代理模式"></a>三. 代理模式</h1><blockquote><p>由于一个对象不能直接引用另一个对象，所以需要代理对象在这两个对象之间起到中介的作用</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 先声明美女对象</span><span class="token keyword">var</span> girl <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这是dudu</span><span class="token keyword">var</span> dudu <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">=</span> girl<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sendGift <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>gift<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hi '</span> <span class="token operator">+</span> girl<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">', dudu送你一个礼物：'</span> <span class="token operator">+</span> gift<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 大叔是代理</span><span class="token keyword">var</span> proxyTom <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">=</span> girl<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sendGift <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>gift<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">dudu</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendGift</span><span class="token punctuation">(</span>gift<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 替dudu送花咯</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">proxyTom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">girl</span><span class="token punctuation">(</span><span class="token string">'酸奶小妹'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span><span class="token function">sendGift</span><span class="token punctuation">(</span><span class="token string">'999朵玫瑰'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>假如 dudu 要送酸奶小妹玫瑰花，却不知道她的联系方式或者不好意思，想委托大叔去送这些玫瑰，那大叔就是个代理</p><p>其实在日常开发中，我们遇到很多这种情况，比如跨域，之前总结过跨域的所有东西，其中的 jsonp，window.name 还是 location.hash 都是通过代理模式来实现的。</p><h1 id="四-装饰者模式"><a href="#四-装饰者模式" class="headerlink" title="四. 装饰者模式"></a>四. 装饰者模式</h1><blockquote><p>在不改变源对象的基础上，通过对其进行包装拓展使原有对象可以满足用户的更复杂需求</p></blockquote><p>这里拿给输入框添加事件举例</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> decorator <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//获取时间源</span>  <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input<span class="token punctuation">.</span>onclick <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//缓存事件源原有的回调函数</span>    <span class="token keyword">var</span> oldClickFn <span class="token operator">=</span> input<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>    input<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">oldClickFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    input<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>装饰着模式很简单，就是对原有对象的属性和方法的添加。相比于之前说的适配器模式是对原有对象的适配，添加的方法和原有的方法功能上大致相似。但是装饰着提供的方法和原有方法功能项则有一定的区别，且不需要去了解原有对象的功能。只要原封不动的去使用就行。不需要知道具体的实现细节。</p><h1 id="五-桥接模式"><a href="#五-桥接模式" class="headerlink" title="五. 桥接模式"></a>五. 桥接模式</h1><blockquote><p>在系统沿着多个维度变化的时候，不增加起复杂度已达到解耦的目的</p></blockquote><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在我们日常开发中，需要对相同的逻辑做抽象的处理。桥接模式就是为了解决这类的需求。</p><p>桥接模式最主要的特点就是将实现层和抽象层解耦分离，是两部分可以独立变化</p><p>比如我们写一个跑步游戏，对于游戏中的人和精灵都是动作单元。而他们的动作也是非常的统一。比如人和精灵和球运动都是 x，y 坐标的改变，球的颜色和精灵的颜色绘制方式也非常的类似。 我们就可以将这些方法给抽象出来。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//运动单元</span><span class="token keyword">function</span> <span class="token function">Speed</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>Speed<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动起来'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 着色单元</span><span class="token keyword">function</span> <span class="token function">Color</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> cl<span class="token punctuation">;</span><span class="token punctuation">}</span>Color<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绘制色彩'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 变形单元</span><span class="token keyword">function</span> <span class="token function">Shape</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>shape <span class="token operator">=</span> ap<span class="token punctuation">;</span><span class="token punctuation">}</span>Shape<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>change <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'改变形状'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说话单元</span><span class="token keyword">function</span> <span class="token function">Speak</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>word <span class="token operator">=</span> wd<span class="token punctuation">;</span><span class="token punctuation">}</span>Speak<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请开始你的表演'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建球类，并且它可以运动可以着色</span><span class="token keyword">function</span> <span class="token function">Ball</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Speed</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Ball<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//实现运动和着色</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Speed</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>speak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Speak</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>speak<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span><span class="token comment" spellcheck="true">//当我们实例化一个人物对象的时候，他就可以有对应的方法实现了</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'我是一个人'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="六-组合模式"><a href="#六-组合模式" class="headerlink" title="六. 组合模式"></a>六. 组合模式</h1><blockquote><p>又称部分-整体模式，将对象组合成树形结构以表示成“部分整体”的层次结构。组合模式使得用户对单个对象以及组合对象的使用具有一致性</p></blockquote><h2 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h2><p>我们平时开发过程中，一定会遇到这种情况：同时处理简单对象和由简单对象组成的复杂对象，这些简单对象和复杂对象会组合成树形结构，在客户端对其处理的时候要保持一致性。比如电商网站中的产品订单，每一张产品订单可能有多个子订单组合，比如操作系统的文件夹，每个文件夹有多个子文件夹或文件，我们作为用户对其进行复制，删除等操作时，不管是文件夹还是文件，对我们操作者来说是一样的。在这种场景下，就非常适合使用组合模式来实现。</p><p><strong>组合模式主要有三个角色：</strong></p><ol><li><strong>抽象组件（Component）</strong>：抽象类，主要定义了参与组合的对象的公共接口</li><li><strong>子对象（Leaf）</strong>：组成组合对象的最基本对象</li><li><strong>组合对象（Composite）</strong>：由子对象组合起来的复杂对象</li></ol><p>理解组合模式的关键是要理解组合模式对单个对象和组合对象使用的一致性，我们接下来说说组合模式的实现加深理解。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 抽象一个虚拟父类</span><span class="token keyword">var</span> News <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>News<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请重写你的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请重写你的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getElement<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请重写你的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">iniheritObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span> superClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">iniheritObject</span><span class="token punctuation">(</span>superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subClass<span class="token punctuation">;</span>  subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//容器类</span><span class="token keyword">var</span> Container <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  News<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//寄生式继承父类原型方法</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Container<span class="token punctuation">,</span> News<span class="token punctuation">)</span><span class="token punctuation">;</span>Container<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'new-container'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Container<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Container<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Container<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同样下一层极的行成员集合类以及后面新闻组合体类</span><span class="token keyword">var</span> Item <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span> <span class="token punctuation">{</span>  News<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>classname <span class="token operator">=</span> classname<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Item<span class="token punctuation">,</span> News<span class="token punctuation">)</span><span class="token punctuation">;</span>Item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classname<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Item<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> NewsGroup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span> <span class="token punctuation">{</span>  News<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>classname <span class="token operator">=</span> classname <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>NewsGroup<span class="token punctuation">,</span> News<span class="token punctuation">)</span><span class="token punctuation">;</span>NewsGroup<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classname<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>NewsGroup<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>NewsGroup<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>所以后面我们在使用的时候，创建新闻类，利用之前定义的组合元素去组合就可以了。</p><h1 id="七-享元模式"><a href="#七-享元模式" class="headerlink" title="七. 享元模式"></a>七. 享元模式</h1><blockquote><p>运用共享技术有效的支持大量细粒度对象，避免对象之间拥有相同内容造成的不必要开销</p></blockquote><p>主要用来优化程序的性能，适合解决大量类似的对象产生的性能问题。享元模式通过分析应用程序的对象，将其解析为内在数据和外在数据，减少对象数量，从而提高程序的性能。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>享元模式通过共享大量的细粒度的对象，减少对象的数量，从而减少对象的内存，提高应用程序的性能。其基本思想就是分解现有类似对象的组成，将其展开为可以共享的内在数据和不可共享的外在数据，我们称内在数据的对象为享元对象。通常还需要一个工厂类来维护内在数据。</p><p>在 JS 中，享元模式主要有下面几个角色组成：</p><ul><li>客户端：用来调用享元工厂来获取内在数据的类，通常是应用程序所需的对象</li><li>享元工厂：用来维护享元数据的类</li><li>享元类：保持内在数据的类</li></ul><p>我们举个例子进行说明：苹果公司批量生产 iphone，iphone 的大部分数据比如型号，屏幕都是一样，少数部分数据比如内存有分 16G,32G 等。未使用享元模式前，我们写代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Iphone</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> SN<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>SN <span class="token operator">=</span> SN<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> phones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> memory <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">16</span> <span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">;</span>  phones<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Iphone</span><span class="token punctuation">(</span><span class="token string">'iphone6s'</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> memory<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码中，创建了一百万个 iphone，每个 iphone 都独立申请一个内存。但是我们仔细观察可以看到，大部分 iphone 都是类似的，只是内存和序列号不一样，如果是一个对性能要求比较高的程序，我们就要考虑去优化它。 大量相似对象的程序，我们就可以考虑用享元模式去优化它，我们分析出大部分的 iphone 的型号，屏幕，内存都是一样的，那这部分数据就可以公用，就是享元模式中的内在数据，定义享元类如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">IphoneFlyweight</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们定义了 iphone 的享元类，其中包含型号，屏幕和内存三个数据。我们还需要一个享元工厂来维护这些数据：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> flyweightFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> iphones <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> model <span class="token operator">+</span> screen <span class="token operator">+</span> memory<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iphones<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        iphones<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IphoneFlyweight</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> iphones<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个工厂中，我们定义了一个字典来保存享元对象，提供一个方法根据参数来获取享元对象，如果字典中有则直接返回，没有则创建一个返回。 接着我们创建一个客户端类，这个客户端类就是修改自 iphone 类：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Iphone</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> SN<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>flyweight <span class="token operator">=</span> flyweightFactory<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>SN <span class="token operator">=</span> SN<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后我们依旧像之前那样生成多个 iphone</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> phones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> memory <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">16</span> <span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">;</span>  phones<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Iphone</span><span class="token punctuation">(</span><span class="token string">'iphone6s'</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> memory<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phones<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的关键就在于 Iphone 构造函数里面的 <code>this.flyweight = flyweightFactory.get(model, screen, memory)</code> 。这句代码通过享元工厂去获取享元数据，而在享元工厂里面，如果已经存在相同数据的对象则会直接返回对象，多个 iphone 对象共享这部分相同的数据，所以原本类似的数据已经大大减少，减少的内存的占用。</p><h3 id="在-DOM-中的使用"><a href="#在-DOM-中的使用" class="headerlink" title="在 DOM 中的使用"></a>在 DOM 中的使用</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>点击菜单项，进行相应的操作，我们通过 jQuery 来绑定事件，一般会这么做：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>给每个列表项绑定事件，点击输出相应的文本。这样看暂时没有什么问题，但是如果是一个很长的列表，尤其是在移动端特别长的列表时，就会有性能问题，因为每个项都绑定了事件，都占用了内存。但是这些事件处理程序其实都是很类似的，我们就要对其优化。</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.menu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.item'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过这种方式进行事件绑定，可以减少事件处理程序的数量，这种方式叫做事件委托，也是运用了享元模式的原理。事件处理程序是公用的内在部分，每个菜单项各自的文本就是外在部分。我们简单说下事件委托的原理：点击菜单项，事件会从 li 元素冒泡到 ul 元素，我们绑定事件到 ul 上，实际上就绑定了一个事件，然后通过事件参数 event 里面的 target 来判断点击的具体是哪一个元素，比如低级第一个 li 元素，event.target 就是 li，这样就能拿到具体的点击元素了，就可以根据不同元素进行不同的处理。</p><blockquote><p>参考：<a href="http://luopq.com/2015/11/20/design-pattern-flyweight/" rel="external nofollow noopener noreferrer" target="_blank">Javascript 设计模式理论与实战：享元模式</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;该系列参考自 《JavaScript 设计模式》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以及 汤姆大叔的博文 &lt;a href=&quot;https://www.cnblogs.com/TomXu/archive/2011/12
      
    
    </summary>
    
      <category term="Javascript设计模式系列" scheme="http://coder.liusixin.cn/categories/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="http://coder.liusixin.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式--创建型设计模式</title>
    <link href="http://coder.liusixin.cn/posts/3bf0239/"/>
    <id>http://coder.liusixin.cn/posts/3bf0239/</id>
    <published>2017-11-04T15:14:55.000Z</published>
    <updated>2017-11-04T15:14:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该系列参考自 《JavaScript 设计模式》</p></blockquote><blockquote><p>以及 汤姆大叔的博文 <a href="https://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" rel="external nofollow noopener noreferrer" target="_blank">深入理解 JavaScript 系列</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li><li>单例模式</li></ul><h1 id="一-简单工厂模式"><a href="#一-简单工厂模式" class="headerlink" title="一. 简单工厂模式"></a>一. 简单工厂模式</h1><blockquote><p>简单工厂模式的概念就是创建对象，不仅如此，简单工厂模式还可以用来创建相似的对象。</p></blockquote><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>如果你想创建一些书，那么这些书都有一些相似的地方，比如目录、页码等。也有很多不同的地方， 如书名、出版时间、书的类型等，对于创建的对象相似的属性当然好处理，对于不同的属性就要有针对的修改处理了。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//工厂模式</span><span class="token keyword">function</span> <span class="token function">createBook</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> time<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//创建一个对象，并且对对象拓展属性和方法</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将对象返回</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> book1 <span class="token operator">=</span> <span class="token function">createBook</span><span class="token punctuation">(</span><span class="token string">'js book'</span><span class="token punctuation">,</span> <span class="token string">'2017/11/16'</span><span class="token punctuation">,</span> <span class="token string">'JS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> book2 <span class="token operator">=</span> <span class="token function">createBook</span><span class="token punctuation">(</span><span class="token string">'css book'</span><span class="token punctuation">,</span> <span class="token string">'2017/11/13'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Basketball <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">'美国篮球'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Basketball<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Basketball<span class="token punctuation">,</span>  getMember<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每队需要5个成员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getBallSize<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个篮球还是很大的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> Football <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">'这是足球'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Football<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Football<span class="token punctuation">,</span>  getMember<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'足球每队需要十一个人'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getBallSize<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'足球我不喜欢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> Tennis <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">'网球貌似现在还是蛮流行的'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Tennis<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Tennis<span class="token punctuation">,</span>  getMember<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'一对一，二对二咯'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getBallSize<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'网球还是比较小的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//球类工厂</span><span class="token keyword">var</span> sportsFactory <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'NBA'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Basketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'wordCup'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Football</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tennis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这种简单工厂模式非常的像寄生式继承，只不过这里 o 没有继承任何对象和类。</p><p>简单工厂的用途就是创建对象，或者创建相似的对象。</p><h1 id="二-工厂方法模式"><a href="#二-工厂方法模式" class="headerlink" title="二. 工厂方法模式"></a>二. 工厂方法模式</h1><blockquote><p>工厂方法模式本意是将实际创建对象的工作推迟到子类当中。这样核心类就成为了抽象类。</p></blockquote><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>在之前，我们介绍过简单工厂设计模式，简单工厂设计模式存在唯一的工厂类，它的优点是所有产品类的实例化集中管理，便于理解。当产品数量较少，且不会经常发生变化时，我们当然可以直接使用简单工厂模式，但是有的时候，需求是在时刻变化的，产品类也可能随之增加，如果使用简单工厂模式，就避免不了去修改工厂类的代码。要解决这个问题，就得使用今天所讲的，工厂方法模式。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>工厂方法模式：不再有一个唯一的工厂类就创建产品，而是将不同的产品交给对应的工厂子类去实现。每个产品由负责生产的子工厂来创造。如果添加新的产品，需要做的是添加新的子工厂和产品，而不需要修改其他的工厂代码。</p><p>工厂方法模式主要有三种类组成：</p><ul><li>抽象工厂类：负责定义创建产品的公共接口</li><li>产品子工厂：继承抽象工厂类，实现抽象工厂类提供的接口</li><li>每一种产品各自的产品类</li></ul><h2 id="安全模式类"><a href="#安全模式类" class="headerlink" title="安全模式类"></a>安全模式类</h2><p>安全模式类就是可以屏蔽对类的错误使用而造成的后果。说白了，就是在构造函数开始时先判断当前对象 this 指向是不是类。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Demo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Demo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Demo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="采用工厂方法模式"><a href="#采用工厂方法模式" class="headerlink" title="采用工厂方法模式"></a>采用工厂方法模式</h2><p>简单工厂模式仅仅适用于创建比较少的对象，如果需要创建多个类，并且会经常修改，像我们之前说的简单工厂的方法就不是很实用了，因为如果我要多添加一个类，就需要修改两个地方，所以这里我们采用工厂方法模式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Factory <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">this</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在工厂原型中设置创建所有类型数据对象的基类</span>Factory<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Factory<span class="token punctuation">,</span>  Java<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  JavaScript<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  UI<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>      div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'1px solid red'</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>如上，我们就可以创建多个类了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">'Javascript还是很重要的'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'Java'</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">'Java培训哪家强'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'UI'</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">'UI...'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">Factory</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="三-抽象工厂模式"><a href="#三-抽象工厂模式" class="headerlink" title="三. 抽象工厂模式"></a>三. 抽象工厂模式</h1><blockquote><p>通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例。也就是说我们要创建一个抽象类。这也是面向对象的开发语言中一种很常见的开发模式。</p></blockquote><h2 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Car<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用，需自行实现'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Car<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSpeed <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用，需自行实现'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>由于 JavaScript 在没有 abstract 的具体实现，所以我们需要如上手动实现，也即是在创建这个类的时候，要求使用这些方法，我们需要手动去重写它，而不能继承使用。因为 在大型的应用中，总有一些子类去继承一些父类，这些父类经常会定义一些必要的方法，但是不会具体的去实现，会去要求子类自行实现。如果子类没有重写这些方法而去调用他，就会报错。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 抽象工厂方法</span><span class="token keyword">var</span> VehicleFactory <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>subType<span class="token punctuation">,</span> superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//判断抽象工厂中是否有该抽象类</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> VehicleFactory<span class="token punctuation">[</span>superType<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//缓存类</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//继承父类属性和方法</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VehicleFactory</span><span class="token punctuation">[</span>superType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将子类的constructor指向子类</span>    subType<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//子类原型继承父类</span>    subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'未创建该抽象类'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小汽车抽象类</span>VehicleFactory<span class="token punctuation">.</span>Car <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'car'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>VehicleFactory<span class="token punctuation">.</span>Car<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  getPrice<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getSpeed<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公共汽车抽象类</span>VehicleFactory<span class="token punctuation">.</span>Bus <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'Bus'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>VehicleFactory<span class="token punctuation">.</span>Bus<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  getPrice<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getSpeed<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大卡车抽象类</span>VehicleFactory<span class="token punctuation">.</span>Trunk <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'Trunk'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>VehicleFactory<span class="token punctuation">.</span>Trunk<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  getPrice<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getSpeed<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">var</span> BMW <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> speed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">VehicleFactory</span><span class="token punctuation">(</span>BMW<span class="token punctuation">,</span> <span class="token string">'Car'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BMW<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>BMW<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSpeed <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span><span class="token keyword">var</span> three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span><span class="token punctuation">(</span><span class="token string">'35w'</span><span class="token punctuation">,</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>three<span class="token punctuation">.</span><span class="token function">getSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以看出，抽象工厂其实是实现子类继承父类的方法，在这个方法里，我们需要传递子类以及需要被继承的父类的名称，并且在抽象工厂方法中，又增加了一次对抽象类存在性的一次判断，然后通过寄生式继承，在继承中我们是通过 new 关键字复制了父类的一个实例，因为我们不仅仅需要继承父类原型上的方法，还需要继承父类的属性。所以通过 new 关键字将父类的构造函数执行一遍来复制父类构造函数中的属性和方法。</p><p>通过抽象工厂，我们就能知道每一个子类到底是哪一种类别了。</p><p>同时注意，抽象类中定义的方法这是显示定义一些功能，但是没有具体的实现，而一个对象是应该具备一套完整的功能的。所以用抽象类创建的对象当然也是抽象的。所以我们还不能直接用它来创建类的实例。</p><h1 id="四-建造者模式"><a href="#四-建造者模式" class="headerlink" title="四. 建造者模式"></a>四. 建造者模式</h1><blockquote><p>将一个复杂对象的构建层和表示层相分离，同样的构建过程可以采用不同的表示。</p></blockquote><h2 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h2><p>工厂模式主要是用来创建对象的实例（简单工厂模式，工厂方法模式）或者是类簇（抽象工厂模式），关心的是最终的产出是什么，所以工厂模式我们得到的是对象的实例或者对象的类簇。然而建造者模式在创建对象的过程中则更为复杂一些。虽然目的也是为了创建对象，但是更关心的创建对象的整个过程或者说是每一个细节。</p><p>比如创建一个人，我们创建的结果不仅仅是得到一个人的实例，还要关注创建人的时候，这个人是男是女，穿什么衣服带什么帽子等等。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Human <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> <span class="token punctuation">(</span>param <span class="token operator">&amp;&amp;</span> param<span class="token punctuation">.</span>skill<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'保密'</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">(</span>param <span class="token operator">&amp;&amp;</span> param<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'保密'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Human<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Human<span class="token punctuation">,</span>  getSill<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skill<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getHobby<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hobby<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> Name <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> that<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>wholeName <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span>firstName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      that<span class="token punctuation">.</span>secondName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> that<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> Work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span> that<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>work<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'code'</span><span class="token punctuation">:</span>        that<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token string">'工程师'</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>wordDesc <span class="token operator">=</span> <span class="token string">'代码使我快乐'</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'UE'</span><span class="token punctuation">:</span>        that<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token string">'设计师'</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>wordDesc <span class="token operator">=</span> <span class="token string">'设计更似艺术'</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        that<span class="token punctuation">.</span>work <span class="token operator">=</span> work<span class="token punctuation">;</span>        that<span class="token punctuation">.</span>wordDesc <span class="token operator">=</span> <span class="token string">'对不起，我们还不清楚你所选择职位的相关描述'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span> that<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更换期望职位以及描述</span>Work<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>changeWork <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Work<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>changeDesc <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>wordDesc <span class="token operator">=</span> desc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个应聘者</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> work<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  _person<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Work</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _person<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Liusixin'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>skill<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>work<span class="token punctuation">.</span><span class="token function">changeDesc</span><span class="token punctuation">(</span><span class="token string">'一撸代码就疯狂'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="五-原型模式"><a href="#五-原型模式" class="headerlink" title="五. 原型模式"></a>五. 原型模式</h1><blockquote><p>用原型实例指向创建对象的类，适用于创建新的对象的类共享原型对象的属性和方法。这种继承是一种基于对属性和方法的共享而不是复制。</p></blockquote><h2 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h2><p>在创建的类中，存在基类，起定义的方法和属性能够被子类所继承和使用。</p><p>原型模式就是将可复用的、可共享的、消耗大的从基类中提取出来然后放到原型中，然后子类通过组合继承或者寄生组合式继承将方法和属性继承下来。子类中对于那些需要重写的方法进行重写，这样，子类 创建的对象既有子类的属性和方法也共享着基类的属性和方法。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>拿网页中轮播图举例，有的是渐变效果，有的是滚动，有的带有箭头。。。所以这里我们可以创建一个基类，轮播图，然后再根据不同的需求再去修改。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//图片轮播图类</span><span class="token keyword">var</span> LoopImages <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>imageArr <span class="token operator">=</span> imgArr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//轮播图片数组</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//轮播图片容器</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>createImage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建轮播图</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>changeImage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//轮播图切换</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上下切换</span><span class="token keyword">var</span> SlideLoopImage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//构造函数继承图片轮播类</span>  LoopImages<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//重写继承的图片切换方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>changeImage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上下切换的方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//渐隐切换</span><span class="token keyword">var</span> FadeLoopImg <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">,</span> container<span class="token punctuation">,</span> arrow<span class="token punctuation">)</span> <span class="token punctuation">{</span>  LoopImages<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//切换箭头私有变量</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>arrow <span class="token operator">=</span> arrow<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>changeImage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'渐隐的切换方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化一个</span><span class="token keyword">var</span> fadeImg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FadeLoopImg</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'01.jpg'</span><span class="token punctuation">,</span> <span class="token string">'02.jpg'</span><span class="token punctuation">,</span> <span class="token string">'03.jpg'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'slide'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token string">'left.jpg'</span><span class="token punctuation">,</span>  <span class="token string">'right.jpg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是如上的写法 ，其实还有一种更加优化的方法。首先看基类，作为基类是要被子类继承的，那么此时将属性和方法都写到基类的构造函数里会有一些问题。 比如每一次创建子类继承都要创建一次父类，如果父类的构造函数的创建过程中存在很多耗时较长的逻辑，这样的话性能消耗还是蛮大的。为了提高性能，我们可以使用共享机制。</p><p>对于每一次创建的一些简单而又差异化的属性我们可以放到构造函数中，而把一些消耗资源比较大的方法放到基类的原型中。这样避免很多不必要的消耗。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> LoopImages <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>imageArr <span class="token operator">=</span> imgArr<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>LoopImages<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  crateImage<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'创建轮播图方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  changeImage<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'图片切换方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上下切换</span><span class="token keyword">var</span> SlideloopImg <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>  LoopImages<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>SlideloopImg<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SlideloopImg<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>changeImage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'上下切换的方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> FadeLoopImg <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">,</span> container<span class="token punctuation">,</span> arrow<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>arrow <span class="token operator">=</span> arrow<span class="token punctuation">;</span>  LoopImages<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> imgArr<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>FadeLoopImg<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FadeLoopImg<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>changeImage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'渐隐切换方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="六-单例模式"><a href="#六-单例模式" class="headerlink" title="六. 单例模式"></a>六. 单例模式</h1><blockquote><p>单例模式又称为单体模式，其实就是只允许实例化一个对象，有时我们也可以用一个对象类规划命名空间，仅仅有条的管理对象的属性和方法。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//命名空间管理</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  g<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  css<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模块分明</span><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>  Util<span class="token punctuation">:</span> <span class="token punctuation">{</span>    util_method1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    util_method2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  Tool<span class="token punctuation">:</span> <span class="token punctuation">{</span>    tool_method1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    tool_method2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//惰性单例</span><span class="token keyword">var</span> LazySingle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//单例实例引用</span>  <span class="token keyword">var</span> _instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//单例</span>  <span class="token keyword">function</span> <span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      publicMethod<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      publicProperty<span class="token punctuation">:</span> <span class="token string">'1.0'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//获取单例接口</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      _instance <span class="token operator">=</span> <span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回单例</span>    <span class="token keyword">return</span> _instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;该系列参考自 《JavaScript 设计模式》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以及 汤姆大叔的博文 &lt;a href=&quot;https://www.cnblogs.com/TomXu/archive/2011/12
      
    
    </summary>
    
      <category term="Javascript设计模式系列" scheme="http://coder.liusixin.cn/categories/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="http://coder.liusixin.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式--面向对象的JS</title>
    <link href="http://coder.liusixin.cn/posts/b48d1f6c/"/>
    <id>http://coder.liusixin.cn/posts/b48d1f6c/</id>
    <published>2017-11-03T13:31:55.000Z</published>
    <updated>2017-11-03T13:31:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该系列参考自 《JavaScript 设计模式》</p></blockquote><blockquote><p>以及 汤姆大叔的博文 <a href="https://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" rel="external nofollow noopener noreferrer" target="_blank">深入理解 JavaScript 系列</a></p></blockquote><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h3><p>在 JavaScript 中创建一个对象很容易，首先声明一个函数保存在一个变量里。按编程习惯一般将这个变量名的首字母大写。然后内部通过 this 变量来添加属性或者方法来实现对类添加属性和行为。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> bookname<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>bookename <span class="token operator">=</span> bookname<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>当然，我们也可以通过在类的原型上添加属性和方法。有两种方式：</p><pre class=" language-js"><code class="language-js">Book<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//展示展示这本书</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span>Book<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  display<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//展示这本书</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样，我们就将我们所需要的方法和属性都封装到我们封装的 Book 类里面了，当使用这些功能和方法的时候，我们不能直接使用这些类，而是需要使用关键字 new 来实例化新的对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'JavaScript设计模式'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>bookname<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意，通过 this 添加的属性和方法是在当前对象上添加的，然而 JavaScript 是一种基于原型的语言，所以每创建一个对象时，他都有一个 prototype 用于指向其继承的属性、方法。这样通过 prototype 继承的方法并不是对象自身的，所以在使用这些方法时，需要通过 prototype 一层一层往上查找。</p><p>简单的说，通过 this 定的属性和方法是该对象自身拥有的，所以我们每次通过类创建的一个新对象时，this 执行的属性和方法都会得到相应的创建，而通过 prototype 继承的属性和方法是每一个对象通过 prototype 访问到的。所以我们每一次通过类创建一个新对象时，这些属性和方法不会再次创建。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/17120401.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如上图，实例的<strong>proto</strong>属性指向原型。原型的 constructor 属性指向构造函数。当创建一个函数或者对象时都会为其创建一个原型对象 prototype，在 prototype 对象中，又会像函数中创建 this 一样创建一个 constructor 属性，这个属性指向的就是拥有整个原型对象的函数或者对象。</p><h3 id="属性与方法封装"><a href="#属性与方法封装" class="headerlink" title="属性与方法封装"></a>属性与方法封装</h3><p>由于 JavaScript 是函数级作用域，申明在函数内部的变量或者方法在外部是访问不到的，通过此特性即可创建类的私有变量和私有方法。然而在函数内部通过 this 创建的属性和方法，在类创建对象时，每个对象自身都拥有一份，并且在外部访问到。因此用 this 创建的属性可以看做是对象的公有属性和公有方法。而通过 this 创建的方法不但可以访问这些对象的公有属性和公有方法，还可以访问类自身的私有属性和私有方法，我们称之为特权方法。 在创建对象时，我们可以使用这些特权方法来初始化实例对象的一些属性，因此这些在创建对象时，调用的特权方法可以看做是类的构造器</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//私有属性</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//私有方法</span>  <span class="token keyword">function</span> <span class="token function">checkId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//特权方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>setPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//对象公有属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//对象公有方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//构造器</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过 new 关键字创建新对象时，由于类外面通过点语法添加的属性和方法没有执行到，所以新创建的对象中无法获取他们，当时可以通过类来使用。因此我们称之为静态共有属性和静态共有方法。而通过类的 prototype 创建的属性和方法在类的实例中可以通过 this 访问到的（新创建对象的<strong>ptoto</strong>指向类的原型所指的对象），所以我们将 prototype 中的属性和方法称之为共有属性和方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//静态的共有属性和方法，对象不能访问</span>Book<span class="token punctuation">.</span>isChinese <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>Book<span class="token punctuation">.</span>setTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Book<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//共有属性和方法</span>  isBook<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  display <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过 new 关键字创建的对象，实际上是对新对象 this 的不断赋值，并将 prototype 指向类的 prototype 所指向的对象，而类的构造函数外面的通过点语法添加的属性和方法不会添加到新创建的对象上去。</p><h3 id="闭包的实现"><a href="#闭包的实现" class="headerlink" title="闭包的实现"></a>闭包的实现</h3><p>有时候我们经常将类的静态变量通过闭包来实现</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//静态私有变量、静态私有方法</span>  <span class="token keyword">var</span> bookNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">checkBook</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//返回构造函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newId<span class="token punctuation">,</span> newName<span class="token punctuation">,</span> newPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有变量、方法</span>    <span class="token keyword">var</span> name<span class="token punctuation">,</span> price<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">checkId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//特权方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setPrice <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//公有属性、公有方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> newId<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    bookNum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bookNum <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'我们仅出版了100本书'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setNmae</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Book<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//静态共有属性、静态公有方法</span>  isJsBook<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  display<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>闭包就是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。我们将这个闭包作为创建对象的构造函数，这样，它既是闭包又是可实例化对象的函数，即可访问到类作用域中的变量。但是在闭包外部添加原型属性和方法看上去似乎脱离闭包这个类，所以咱们可以用下面的方式来搞一搞</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>superValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>superValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SubClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>继承非常简单，就是声明两个类而已，不过类式继承需要将第一个类的实例赋值给第二个类的原型，因为类的原型对象作用就是为类的原型添加共有方法，但是类不能直接访问这些属性和方法，必须通过原型 prototype 来访问。而我们实例化一个父类的时候，新创建的对象复制了父类构造函数的属性和方法并将原型<code>__proto__</code>指向父类的原型对象，这样就拥有了父类原型对象的属性和方法，并且这个新创建的对象可以直接访父类原型对象上的属性和方法。而且新创建的对象不仅仅可以访问父类原型上的属性和方法，同样可以访问父类构造函数中复制的属性和方法。将这个对象赋值给子类的原型，那么这个子类的原型同样可以访问父类原型上的属性和方法与从父类构造函数中复制的属性和方法。</p><p>另外，我们可以通过<code>instanceof</code>来检测某个对象是否为某个类的实例</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SuperClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SubClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubClass <span class="token keyword">instanceof</span> <span class="token class-name">SuperClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><blockquote><p>注意，<code>instanceof</code> 是判断对象是否是后面类的实例，它并不表示二者的继承</p></blockquote><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">SuperClass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>但是这种类式继承有两个缺点，其一，由于子类通过其原型 prototype 对父类实例化，继承了父类，所以说父类中如果共有属性是引用类型，就会在子类中被所有的实例所共享，因此一个子类的实例更改子类原型从父类构造函数中继承的共有属性就会直接影响到其他的子类。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>SubClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["js", "css"]</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">,</span> instance2<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["js", "css", "html"]</span></code></pre><p>其二，由于子类实现的继承是靠其原型 prototype 对父类进行实例化实现的，因此在创建父类的时候，是无法向父类传递参数的。因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化</p><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>showBooks <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//继承父类</span>  SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建第一个子类实例</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第二个子类实例</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span><span class="token function">showBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//TypeError</span></code></pre><p>如上，<code>SuperClass.call(this,id)</code> 当然就是构造函数继承的核心语句了，由于 call 这个方法可以更改函数的作用环境，因此在子类中，对<code>superClass</code>调用这个方法就是将子类中的变量在父类中执行一遍。由于父类中给 this 绑定属性，因此子类自然也就继承父类的共有属性。由于这种类型的继承没有涉及到原型<code>prototype</code>，所以父类的原型方法自然不会被子类继承，而如果想被子类继承，就必须放到构造函数中，这样创建出来的每一个实例都会单独的拥有一份而不能共用，这样就违背了代码复用的原则，所以综合上述两种，我们提出了组合式继承方法</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>类式继承是通过子类原型 <code>prototype</code> 对父类实例化实现的，构造函数继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Js'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getBooks <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span><span class="token punctuation">}</span>SubClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>如上，我们就解决了之前说到的一些问题，但是从代码看，这个 SuperClass 的构造函数执行了两遍。</p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>原型式继承大致的实现方式是这个样子的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//申明一个过渡对象</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//过渡对象的原型继承父对象</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回过渡对象的实例，该对象的原型继承了父对象</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实这种方式和类式继承非常的相似，他只是对类式继承的一个封装，其中的过渡对象就相当于类式继承的子类，只不过在原型继承中作为一个普通的过渡对象存在，目的是为了创建要返回的新的实例对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'js book'</span><span class="token punctuation">,</span>  likeBook<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'css Book'</span><span class="token punctuation">,</span> <span class="token string">'html book'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> newBook <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>newBook<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ajax book'</span><span class="token punctuation">;</span>newBook<span class="token punctuation">.</span>likeBook<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'react book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> otherBook <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>otherBook<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'canvas book'</span><span class="token punctuation">;</span>otherBook<span class="token punctuation">.</span>likeBook<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'node book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newBook<span class="token punctuation">,</span> otherBook<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如上代码我们可以看出，原型式继承和类式继承一个样子，对于引用类型的变量，还是存在子类实例共享的情况。</p><p>所以，我们还有下面的寄生式继承</p><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//申明一个过渡对象</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//过渡对象的原型继承父对象</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回过渡对象的实例，该对象的原型继承了父对象</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'js book'</span><span class="token punctuation">,</span>  likeBook<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'html book'</span><span class="token punctuation">,</span> <span class="token string">'css book'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createBook</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//通过原型方式创建新的对象</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">inheritObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 拓展新对象</span>  o<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回拓展后的新对象</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实寄生式继承就是对原型继承的拓展，一个二次封装的过程，这样新创建的对象不仅仅有父类的属性和方法，还新增了别的属性和方法。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>回到之前的组合式继承，那时候我们将类式继承和构造函数继承组合使用，但是存在的问题就是子类不是父类的实例，而子类的原型是父类的实例，所以才有了寄生组合式继承。</p><p>而寄生组合式继承是寄生式继承和构造函数继承的组合。但是这里寄生式继承有些特殊，这里他处理不是对象，而是类的原型。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span> superClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 复制一份父类的原型副本到变量中</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 修正因为重写子类的原型导致子类的constructor属性被修改</span>  p<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subClass<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置子类原型</span>  subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>组合式继承中，通过构造函数继承的属性和方法都是没有问题的，所以这里我们主要探究通过寄生式继承重新继承父类的原型。我们需要继承的仅仅是父类的原型，不用去调用父类的构造函数。换句话说，在构造函数继承中，我们已经调用了父类的构造函数。因此我们需要的就是父类的原型对象的一个副本，而这个副本我们可以通过原型继承拿到，但是这么直接赋值给子类会有问题，因为对父类原型对象复制得到的复制对象 p 中的 constructor 属性指向的不是 subClass 子类对象，因此在寄生式继承中要对复制对象 p 做一次增强，修复起 constructor 属性指向性不正确的问题，最后将得到的复制对象 p 赋值给子类原型，这样子类的原型就继承了父类的原型并且没有执行父类的构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span> superClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 复制一份父类的原型副本到变量中</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 修正因为重写子类的原型导致子类的constructor属性被修改</span>  p<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subClass<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置子类原型</span>  subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//申明一个过渡对象</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//过渡对象的原型继承父对象</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回过渡对象的实例，该对象的原型继承了父对象</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SuperClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'js book'</span><span class="token punctuation">,</span> <span class="token string">'css book'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperClass<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">,</span> SuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>SubClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'2017/11/11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token string">'Js'</span><span class="token punctuation">,</span> <span class="token string">'2018/22/33'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'test book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>books<span class="token punctuation">,</span> instance2<span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/QQ20171204-180745@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这种方式继承其实如上图所示，其中最大的改变就是子类原型中的处理，被赋予父类原型中的一个引用，这是一个对象，因此有一点你需要注意，就是子类在想添加原型方法必须通过<code>prototype.</code>来添加，否则直接赋予对象就会覆盖从父类原型继承的对象了。</p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>由于 JavaScript 中的继承是通过原型链来实现的，只有一条原型链，所以理论上来说是实现不了继承多个父类的。但是我们可以通过一些小技巧，来实现一个类似的多继承</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  遍历源对象中的属性</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将源对象中的属性复制到目标对象中</span>    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//返回目标对象</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>当然，此处我们实现的这是浅拷贝，对于引用类型的它还是无能为力的。jquery 中实现了深拷贝，就是将源对象中的引用类型的属性再执行一遍 extend 方法而实现。这里我们实现的比较简单。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'javascript 设计模式'</span><span class="token punctuation">,</span>  alike<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'css'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">extend</span><span class="token punctuation">(</span>another<span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>another<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>another<span class="token punctuation">.</span>alike<span class="token punctuation">)</span><span class="token punctuation">;</span>another<span class="token punctuation">.</span>alike<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'React'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>another<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'设计模式'</span>；console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>another<span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态，其实就是同一个方法多种的调用方式，在 JavaScript 中其实有很多种实现方式的。只不过要对传入的参数进行判断以实现多种的调用方式。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;该系列参考自 《JavaScript 设计模式》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以及 汤姆大叔的博文 &lt;a href=&quot;https://www.cnblogs.com/TomXu/archive/2011/12
      
    
    </summary>
    
      <category term="Javascript设计模式系列" scheme="http://coder.liusixin.cn/categories/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="http://coder.liusixin.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript面向对象总结</title>
    <link href="http://coder.liusixin.cn/posts/3d2ababd/"/>
    <id>http://coder.liusixin.cn/posts/3d2ababd/</id>
    <published>2017-10-15T05:32:32.000Z</published>
    <updated>2017-10-15T05:32:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文内容是复习红宝书中面向对象章节以及各类博客的总结篇</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对象(Object)应该算是 js 中最为重要的部分，也是 js 中非常难懂晦涩的一部分。更是面试以及框架设计中出没。</p><h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><p>简单的说，对象拥有四个属性:</p><ul><li><code>[[Configurable]]</code>:是否可以通过 delete 删除，能否修改属性的特性。直白点：是否可配置，默认为 true</li><li><code>[[Enumerable]]</code>:枚举性，表示是否可以通过 for-in 循环返回，默认为 true</li><li><code>[[Writable]]</code>:可写性：是否可以修改属性的值，默认为 true</li><li><code>[[Value]]</code>:包含属性的值，也就是对应的可读性。 默认为 undefined</li></ul><blockquote><p>如果要修改属性默认的特性，必须通过<code>Object.defineProperty()</code>方法。大致如下：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>animal<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  writable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  value<span class="token punctuation">:</span> <span class="token string">'dog'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dog</span>animal<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'cat'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dog</span></code></pre><p>从上面的实例大家也能看出，在调用<code>Object.defineProperty()</code>方法后，如果不指定 <code>configurable</code>、<code>enumerable</code>、<code>writable</code> 特性的值时，默认为 FALSE。</p><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><blockquote><p>访问器属性不包含数据值，但是包含 getter 和 setter 函数。在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效值。在写入访问器属性时，回到用 setter 函数并传入新值。</p></blockquote><ul><li><code>[[Configurable]]</code>:表示是否可以通过 delete 删除。默认为 TRUE</li><li><code>[[Enumerable]]</code>:同上面介绍的 Enumerable 一样，默认为 true</li><li><code>[[Get]]</code>:读取数据时候调用的方法。默认为 undefined</li><li><code>[[Set]]</code>:在写入属性值得时候默认调用的方法。默认为 undefined</li></ul><p>看个例子（来自于红宝石）:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token number">2012</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">2012</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>edition<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2013</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>其实对于多个属性的定义，我们可以使用<code>Object.defineProperties</code>方法。然后对于读取属性的特性我们可以使用<code>Object.getOwnPropertyDescriptor()</code>方法。详细内容可以自行查看</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>创建对象，我们不是直接可以通过 Object 的构造函数或者对象字面量的方法来实现对象的创建嘛？当然是可以的，但是有一个明显的缺点：使用同一个接口创建很多对象，产生大量重复的代码，我们引用设计模式。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>一种很基础的设计模式，简而言之就是用函数来封装以特定接口创建对象的细节。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createAnimal</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token string">'小猫'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token string">'小狗'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>优点：可以无数次的调用这个函数，来创建相似对象。 缺点：不能解决对象识别的问题。实际项目中可以参考弹出层的设计。</p></blockquote><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>ECMAScript 中的构造函数可以用来创建特定类型的对象。在运行时会自动出现在执行环境中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'小猫'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'小狗'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意上面我们没有显示的 return 过一个对象出来，为什么？因为 this。</p><p>关于构造函数惯例首字母大写不用多说。强调构造函数一定要使用关键字 new 来调用。new 的过程：</p><ul><li>创建一个新的对象</li><li>将构造函数的作用域赋值给新对象（this 执行新的对象）</li><li>执行构造函数的代码</li><li>返回新的对象</li></ul><p>在实例对象中，都有一个 constructor 属性。</p><pre class=" language-js"><code class="language-js">cat<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Animal<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>dog<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Animal<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>cat <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>dog <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>构造函数模式的优点如上所说，但是缺点还是有的，比如说</p><pre class=" language-js"><code class="language-js">cat<span class="token punctuation">.</span>sayName <span class="token operator">==</span> dog<span class="token punctuation">.</span>sayName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre><p>也就是说，他创建了两个功能一样的函数，这样是很没有必要的，当然，我们可以把 say 放到构造函数外面，然后通过<code>this.sayName = sayName</code>来操作，但是这样的话，又会导致全局变量的污染。怎么办？</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>我们在创建每一个函数的时候都有一个 prototype(原型)属性，这个属性是一个指针，指向一个对象。而这个对象的用途就是包含由特定类型的所有实例共享的属性和方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'毛毛'</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'dog'</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>sayName <span class="token operator">==</span> dog<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>原型模式的好处就是可以让所有的对象实例共享他的属性和方法。不必在构造函数中定义对象实例的信息。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Liusixin'</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Liusixin' -> 来自原型</span>man<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Liu'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Liu -> 来自实例</span><span class="token keyword">delete</span> man<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Liusixin' -> 来自原型</span></code></pre><p>上面的例子说明两点</p><ul><li>原型中的对象属性可以被实例所覆盖重写</li><li>通过 delete 可以删除实例中的属性，但是删除不了原型对象上的</li></ul><blockquote><p>我们可以通过<code>hasOwnProperty()</code>方法来确定一个属性是在原型上还是在实例上。<code>man.hasOwnProperty(&#39;name&#39;)</code>,如果 name 为实例属性，则返回 true。 我们也可以通过 <code>&#39;name&#39; in man</code> 来确定，man 上是否有 name 这个属性。</p></blockquote><p>上面大家可能已将发现，这种原型模式的写法非常的繁琐，有了大量的 XXX.prototype. 这里有一种简写的形式。 参照具体说明参照阮神的博客 <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" rel="external nofollow noopener noreferrer" target="_blank">Javascript 面向对象编程（二）：构造函数的继承</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'Liusixin'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>  job<span class="token punctuation">:</span> <span class="token string">'web Engineer'</span><span class="token punctuation">,</span>  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>上面代码特意添加了一个<code>constructor</code>属性，因为每创建一个函数，就会自动创建他的<code>prototype</code>对象，这个对象会自动获取<code>contractor</code>属性。而我们这中写法，本质上重写了默认的<code>prototype</code>对象，因此，<code>constructor</code>属性也就变成新的对象的<code>constructor</code>属性了（指向 Object 构造函数），所以这里的简写方式，一定要加上<code>constructor</code>。</p></blockquote><p>下面我们再谈一谈原型模式的优缺点。</p><p>优点，正如上面我们说到的，可以省略为构造函数传递出实体参数这个环节，并且很多实例可以共享属性和方法。正是因为原型中所有的属性是被所有的实例所共享的，这个特性在方法中非常实用，但是对于包含引用类型的属性来说问题就比较突出了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span><span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'xiaohong'</span><span class="token punctuation">,</span> <span class="token string">'xiaoming'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'xiaohua'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xiaohong','xiaoming','xiaohua'</span><span class="token function">alert</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xiaohong','xiaoming','xiaohua'</span><span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends <span class="token operator">==</span> person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><blockquote><p>由于 friends 数组存在于<code>Person.prototype</code>上，并不是 person1 上，所以当我们修改的时候，其实修改的是所有实例所共享的那个值。</p></blockquote><h3 id="组合使用构造函数和原型模式"><a href="#组合使用构造函数和原型模式" class="headerlink" title="组合使用构造函数和原型模式"></a>组合使用构造函数和原型模式</h3><p>这是创建自定义类型最常见的一种方式。就是组合使用构造函数和原型模式.构造函数模式用于定义实力属性，原型模式用于定义方法和共享的属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Liu'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Sixin'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span></code></pre><blockquote><p>上面的例子中，实例所有的属性都是在构造函数中定义，而实例所有共享的属性和方法都是在原型中定义。这种构造函数和原型模式混合的模式，是目前 ECMAScript 中使用最为广泛的一种方法。</p></blockquote><p>当然，有些人会觉得独立的构造函数和原型非常的难受，所以也有推出所谓的动态原型构造模式的这么一说。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><blockquote><p>注意上面的代码，之后在 sayName 不存在的时候，才会在原型上给他添加相应的方法。因为对原型的修改，能够立即在所有的实例中得到反应。所以这中做法确实也是非常的完美。</p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>说到面向对象，当然得说到继承。说到继承当然得说到原型。说到原型，这里我们参考一篇博文：<a href="https://www.ibm.com/developerworks/cn/web/1304_zengyz_jsoo" rel="external nofollow noopener noreferrer" target="_blank">全面理解面向对象的 JavaScript</a></p></blockquote><p>首先什么是 javascript 面向对象呢</p><ol><li>一切事物皆对象。</li><li>对象具有封装和继承特性。</li><li>对象与对象之间使用消息通信，各自存在信息隐秘。</li></ol><p>js 语言是通过一种叫做原型(prototype) 的方式来实现面向对象编程的。当然，还有比如 java 就是基于类来实现面向对象编程的。</p><h3 id="基于类的面向对象和基于原型的面向对象方式比较"><a href="#基于类的面向对象和基于原型的面向对象方式比较" class="headerlink" title="基于类的面向对象和基于原型的面向对象方式比较"></a>基于类的面向对象和基于原型的面向对象方式比较</h3><p>对于基于类的面向对象的方式中，对象依靠 class 类来产生。而在基于原型的面向对象方式中，对象则是依靠构造器(constructor)利用原型(prototype)构造出来的。举个客观世界的例子来说，例如工厂造一辆汽车一方面，工人必须参照一张工程图纸，设计规定这辆车如何制造，这里的工程图纸就好比语言中的类 class。而车就是按照这个类制造出来的。另一方面，工人和机器相当于 contractor，利用各种零部件(prototype)将汽车造出来。</p><p>首先，客观世界中的对象的产生都是其他实物对象构造的世界，而抽象的图纸是不能产生出汽车的。也就是说，类，是一个抽象概念的而非实体，而对象的产生是一个实体的产生。其次，按照一切事物皆对象的面向对象的法则来说，类本身并不是一个对象，然而原型方式的构造函数和原型本身也是个对象。再次，在类的面向对象语言中，对象的状态为对象的实例所持有，对象的行为方法则由申明该对象的类所持有，并且只有对象的构造和方法能够被继承。而在原型的面向对象语言中，对象的行为、状态都属于对象本身，并且能够一起被继承。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>ECMAScript 描述了原型链的概念，并将原型链作为实现继承的主要方法。基本思想就是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p></blockquote><p>实现原型链有一种基本模式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的代码中，我们没有使用 SubType 默认提供的原型，而是给它换了一个新的原型，这个新原型就是 SuperType 的实例。于是，新原型不仅具有所谓一个 SuperType 的实例所拥有的全部属性和方法，而且其内部还有一个指针，指向 SuperType 的原型。最终结果是这样的：instance 指向 subtype 的原型，subtype 的原型又指向 SuperType 的原型。</p><p>通过实现原型链，本质上是扩展了原型搜索机制。</p><p>虽然如上，我们已经实现了 javascript 中的继承。但是依旧存在一些问题：最主要的问题来自包含引用类型的原型。第二个问题就是在创建子类型的实例时，不能向超类型的构造函数中传递参数。这两个问题上面也都有说到，这里就不做过多介绍，直接看解决办法:</p><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><blockquote><p>在解决原型中包含引用类型的数据时，我们可以在子类型构造函数内部调用超类型的构造函数。直接看代码：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 继承了Super</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">'Liu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'red','yellow','black'</span><span class="token keyword">const</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">'sixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'red','yellow'</span></code></pre><p>毕竟函数只不过是在特定环境中执行代码的对象，因此可以通过 call 或者 apply 方法在新创建的对象上执行构造函数。而且如上代码也解决了子类构造函数中向超类构造函数传递参数的问题</p><p>但是，这样问题就来了，类似我们之前讨论创建的对象那种构造函数的问题：如果都是使用构造函数，那么，也就避免不了方法都在构造函数中定义，然后就会产生大量重复的代码了。</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><blockquote><p>因为考虑到上述的缺点，所以这里又使用了组合继承的方式，历史总是惊人的相似。直接看代码：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 继承属性</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承方法</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">'Liusixin'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Liusixin</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26</span><span class="token keyword">const</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">'Liu'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'red','yellow'</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Liu</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><p>在上面的例子中，SuperType 构造函数定义了两个属性，name 和 colors，SuperType 的原型中定义了一个方法 sayName，subtype 的构造函数中调用 SuperType 构造函数并且传入 name，然后将 SuperType 的实例赋值给 subtype 的原型。然后又在新的原型中定义了 sayAge 的方法。这样一来，就可以让两个不同的 SubType 实例既分别拥有自己的属性，包括 colors，又可以使用相同的方法了。</p><blockquote><p>组合继承避免了原型链和借用构造函数的缺陷，融合了他们的优点。成为 javascript 中最为常见的继承模式。而且<code>instanceof</code>和<code>isPrototypeOf</code>方法也能用于识别组合模式创建的对象。</p></blockquote><h3 id="别的继承模式"><a href="#别的继承模式" class="headerlink" title="别的继承模式"></a>别的继承模式</h3><p>继承模式不止上面几种，这里只是说到常见的继承模式。还有原型式继承、寄生式继承、寄生组合式继承等，其实，只要理解了原型、原型链、构造函数等对象的基本概念，理解起来这中模式都是非常容易的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文内容是复习红宝书中面向对象章节以及各类博客的总结篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对象(Objec
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS的变量、作用域和内存问题</title>
    <link href="http://coder.liusixin.cn/posts/d446ebaa/"/>
    <id>http://coder.liusixin.cn/posts/d446ebaa/</id>
    <published>2017-10-11T13:39:19.000Z</published>
    <updated>2017-10-11T13:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本类型和引用类型"><a href="#基本类型和引用类型" class="headerlink" title="基本类型和引用类型"></a>基本类型和引用类型</h3><blockquote><p>在 ECMAScript 中，变量分为基本类型和引用类型两种。基本类型就是存储简单的数据段。而引用类型指的是那些可能由多个值构成的对象。在 ECMAScript 中，基本类型包括：Undefined、Null、Boolean、Number 和 String。这些基本类型的对象都是按值访问的。所以 js 中我们可以直接操作他们。但是引用类型如 Object 等，是按照引用来操作的。并非直接操作其值。并且我们可以动态的为引用类型变量添加属性和方法。而基本类型则不可以。</p></blockquote><h3 id="变量赋值和传参"><a href="#变量赋值和传参" class="headerlink" title="变量赋值和传参"></a>变量赋值和传参</h3><p>主要说明引用类型</p><p><strong>对于赋值</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Nicholas'</span><span class="token punctuation">;</span>  obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'sixin'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sixin</span><span class="token punctuation">}</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Nicholas</span></code></pre><ul><li>引用类型在传参的时候，也是按照值传递的。</li><li>即使在函数内部修改了参数的值。原始的引用依然不变。实际上，在重写 obj 的时候，这个变量的引用已经是一个局部变量了。只是在这儿函数运行完，这个对象被销毁了。</li></ul><p>如果不懂的话我们用直白的方式解释下这段代码是：</p><p><code>person</code>这个<code>object</code>作为参数传递给<code>function</code>的时候，<code>function</code>内部的作用域可以找到<code>person</code>而且这时候<code>obj</code>的值指向的是<code>“堆内存中person所指向地址”</code>（<code>person</code>本身也是个指针，<code>obj</code>是<code>person</code>这个指针被作为参数传递后复制出来的副本）；然后下一步 new 出一个 Object 的时候，是在堆内存中新建了一个<code>Object()</code>，这个时候<code>obj</code>是指向这个新 new 出来的 Object 的指针，所以对这个 Object 新增一个叫 name 的属性并且在这个局部变量指针还未被销毁（即函数未执行完毕）之前打出 log，输出的是这个新 new 出来的 Object 里的 name 属性，是 sixin。需要注意的是，在<code>function</code>执行的这一个阶段里，对于原来的 Object 进行操作只有一次，即给它的 name 属性赋值为’Nicholas’，随即在这个函数里就没有指针再指向它了，所以在外部的输出就是”Nicholas”；</p><h3 id="执行环境及其作用域"><a href="#执行环境及其作用域" class="headerlink" title="执行环境及其作用域"></a>执行环境及其作用域</h3><blockquote><p>这大概是一个非常基础也是重要的部分，后续会在进阶里面详细展开。</p></blockquote><p>执行环境定义了变量或者函数有权访问的其他数据，决定了他们的行为。每一个执行环境都有一个与之关联的变量对象（如 global、window）。环境中定义的所有变量和函数都保存在这个对象中。</p><p>某一个执行环境执行完毕后，该环境会被销毁。其中的所有的变量和函数也将随之销毁。全局执行环境知道应用程序退出才被销毁（如关闭网页等）</p><p>当代码在一个环境中执行的时候，会创建变量对象的一个 ​​ 作用域链。作用域链的用途，是保证对执行环境有权访问的变量和函数的有序访问。作用域链的前端，始终是当前执行的代码所在的环境的变量对象。全局执行环境始终是作用域链的最后一个对象。</p><p>标识符的解析也就是沿着作用域链一级一级的搜索的过程。搜索过程从作用域链的前端开始，然后逐级向后回溯。知道找到标识符为止。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> anotherColor <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">swapColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> tempColor <span class="token operator">=</span> anotherColor<span class="token punctuation">;</span>    anotherColor <span class="token operator">=</span> color<span class="token punctuation">;</span>    color <span class="token operator">=</span> tempColor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个执行环境中可以访问到tempColor color antherColor</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这里只能访问anotherColor color</span>  <span class="token function">swapColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里只能访问color</span></code></pre><p>所以从上面代码我们可以感受到：内部环境可以通过作用域链访问到外部环境的变量。反之不可。这些环境之间的联系都是线性、有次序的。</p><h3 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h3><p>虽然执行环境的类型只有两种。局部的和全局的。但是还有一种方法可以延长作用域链。</p><p>这是因为有些语句可以在作用域链的前端临时添加一个变量对象，改变量对象会在代码执行后被移除。</p><ul><li><code>try-catch</code> 语句中的 catch</li><li><code>with</code>语句</li></ul><p>对于 with 语句而言，会将指定的对象添加到作用域链中。对于 catch 语句而言，会创建一个新的变量对象，其中包含被抛出的错误对象的申明。</p><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><p>局部变量只在函数执行过程中存在。而在这个过程中，会为局部变量在栈或者堆中分配相应的内存空间。然后函数执行时，用了这些变量。执行完后，则这些变量就没有用了，需清理释放内存空间。</p><p>但是并非所有的情况下都这么容易的得出结论。垃圾收集器必须跟踪哪个变量用了哪个变量没用。对于不在利用的打上标记，已被将来收回其所占用的内存。</p><p><strong>标记清除</strong></p><p>这是最为常用一种清除方式。当一个变量进入到环境的时候，标记为’进入环境’，这个基本是不会被清除的，因为执行流进入到相应的环境的时候可能会用到。当变量离开环境的时候，标记为’离开环境’。</p><p>可以使用任何方式来标记。我们要知道是如何标记不重要，重要的是采用什么策略。</p><p>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。他会去掉环境中的变量以及被环境中的变量所引用的变量的标记。剩下的，则准备删除。因为环境中的变量已经无法访问到这些变量了。目前 IE、ff 、 opera 、 chrome 都是这种标记清除方式。</p><p><strong>引用计数</strong></p><blockquote><p>因为不常用，简单说下</p></blockquote><p>引用计数的意思就是跟踪记录每一个值被引用的次数。当一个引用类型的变量复制给一个变量的时候，这个引用次数则+1，如果有别复制给另一个变量，则再+1，如果包含对这个值的引用的变量又被赋值了别的值。则这个值-1.</p><p>当引用次数为 0 的时候，则当做垃圾回收。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> objectA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> objectB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  objectA<span class="token punctuation">.</span>someOtherObject <span class="token operator">=</span> objectB<span class="token punctuation">;</span>  objectB<span class="token punctuation">.</span>someOtherObject <span class="token operator">=</span> objectA<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>对象 A 和对象 B 的属性互相引用。也就是说，这两个对象的引用次数永远都是 2.哪怕这个函数执行完咯，也没法清理的。</strong></p><p>虽然垃圾回收机制帮我们做了很多事，但是电脑分配给浏览器的可用内存通常要比桌面应用的内存要小的多，毕竟是为了防止运行 js 的网页耗尽所有的内存而导致系统崩溃的问题发生。</p><p>所以我们确保用最少的内存可以让页面获取最好的性能，最佳的执行方案就是执行中的代码都是有必要的数据。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> localPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  localPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">return</span> localPerson<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> neal <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'Neal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主动清理垃圾</span>createPerson <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>createPerson</code>设置为<code>null</code>，并没有立刻把他清除，只是释放了他的引用。让其脱离其执行环境，以便于垃圾收集器更快的将其回收。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本类型和引用类型&quot;&gt;&lt;a href=&quot;#基本类型和引用类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型和引用类型&quot;&gt;&lt;/a&gt;基本类型和引用类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在 ECMAScript 中，变量分为基本类型和引用类型两
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何编写高质量javascript代码</title>
    <link href="http://coder.liusixin.cn/posts/8c1d1a9d/"/>
    <id>http://coder.liusixin.cn/posts/8c1d1a9d/</id>
    <published>2017-10-07T12:06:24.000Z</published>
    <updated>2017-10-07T12:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我们日常编码中，编写可维护代码是非常重要的，编写可维护代码，意味着：</p><ul><li>可读性</li><li>一致性</li><li>可预测性</li><li>团队代码风格一致</li></ul><h2 id="最小全局变量"><a href="#最小全局变量" class="headerlink" title="最小全局变量"></a>最小全局变量</h2><p>JavaScript 是通过函数来管理作用域的。在函数内部申明的变量只能在函数内部使用，在函数外部不能使用。每一个 JavaScript 都有一个全局对象，当你在任意的函数外部访问 this 的时候可以访问到，你创建的每一个全局变量都成为这个全局对象的属性。浏览器中，这个全局对象便是 window。</p><pre class=" language-js"><code class="language-js">myglobal <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myglobal<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>myglobal<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">'myglobal'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myglobal<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="全局变量的问题"><a href="#全局变量的问题" class="headerlink" title="全局变量的问题"></a>全局变量的问题</h2><p>全局变量最大的问题就是变量名冲突，造成不可以预计的后果。而在 web 页面中包含不是开发者缩写的代码也很常见</p><ul><li>第三方 JavaScript 库</li><li>广告或者统计脚本</li><li>不同类型的组件</li></ul><p>所以一旦出现命名冲突，可能会造成不可预估的错误。所以尽可能的少用全局变量是非常有必要的。比如使用局部变量声明，es6 中的<code>let</code>和<code>const</code>，这里我们主要探讨下 var。</p><p>由于 JavaScript 的两个特征，不自觉的创建变量是出乎意料的容易，首先，你可以甚至不需要声明就可以使用变量；第二，JavaScript 有隐含的全局概念，意味着你不声明的任何变量都会成为一个全局对象属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 不推荐写法: 隐式全局变量</span>  result <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>另一个创建隐式全局变量的反例就是使用任务链进行部分 var 声明。下面的片段中，a 是本地变量但是 b 却是全局变量，这可能不是你希望发生的</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 反例，勿使用</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h2 id="忘记-var-的副作用"><a href="#忘记-var-的副作用" class="headerlink" title="忘记 var 的副作用"></a>忘记 var 的副作用</h2><blockquote><p>隐式全局变量和明确定义的全局变量间有些小的差异，就是通过<code>delete</code>操作符让变量未定义的能力。</p></blockquote><ul><li>通过 var 创建的全局变量（任何函数之外的程序中创建）是不能被删除的</li><li>隐式全局变量（无视是否在函数中创建）是能被删除的</li></ul><p>这表明，在技术上，<strong>隐式全局变量并不是真正的全局变量，但它们是全局对象的属性</strong>。属性是可以通过<code>delete</code>操作符删除的，而变量是不能的</p><h2 id="单-var-形式"><a href="#单-var-形式" class="headerlink" title="单 var 形式"></a>单 var 形式</h2><blockquote><p>在函数顶部使用单 var 语句是比较有用的一种形式，其好处在于</p></blockquote><ul><li>提供了一个单一的地方去寻找功能所需要的所有局部变量</li><li>防止变量在定义之前使用的逻辑错误</li><li>帮助你记住声明的全局变量，因此较少了全局变量</li><li>少代码（类型、传值、单线完成）</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span>    myobject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    i<span class="token punctuation">,</span>    j<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// function body...</span><span class="token punctuation">}</span></code></pre><h2 id="预解析：var-散布的问题"><a href="#预解析：var-散布的问题" class="headerlink" title="预解析：var 散布的问题"></a>预解析：var 散布的问题</h2><p>JavaScript 中，你可以在函数的任何位置声明多个 var 语句，并且它们就好像是在函数顶部声明一样发挥作用，这种行为称为 <strong>hoisting</strong>。当你使用了一个变量，然后不久在函数中又重新声明的话，就可能产生逻辑错误。对于 JavaScript，只要你的变量是在同一个作用域中（同一函数），它都被当做是声明的，即使是它在 var 声明前使用的时候。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 反例</span>myname <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局变量</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span>  <span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "local"</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于函数声明提前，也就是预解析。为了避免这种混乱，最好是预先声明你想使用的全部变量。</p><blockquote><p>为了完整，我们再提一提执行层面的稍微复杂点的东西。代码处理分两个阶段，第一阶段是变量，函数声明，以及正常格式的参数创建，这是一个解析和进入上下文的阶段。第二个阶段是代码执行，函数表达式和不合格的标识符（为声明的变量）被创建。但是，出于实用的目的，我们就采用了”hoisting”这个概念， 这种 ECMAScript 标准中并未定义，通常用来描述行为。</p></blockquote><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><blockquote><p>推荐写法</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> myarray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用myarray[i]做点什么</span><span class="token punctuation">}</span></code></pre><p>伴随着单 var 形式，你可以把变量从循环中提出来，就像下面这样：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">looper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    max<span class="token punctuation">,</span>    myarray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> myarray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用myarray[i]做点什么</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>最后一个需要对循环进行调整的是使用下面表达式之一来替换<code>i++</code>。</strong></p><pre class=" language-js"><code class="language-js">i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>++</code>和<code>–-</code>促进了“过分棘手(excessive trickiness)”。</p></blockquote><p>还有两种变化的形式，其又有了些微改进，因为：</p><ul><li>少了一个变量(无 max)</li><li>向下数到 0，通常更快，因为和 0 做比较要比和数组长度或是其他不是 0 的东西作比较更有效率</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第一种变化的形式：</span><span class="token keyword">var</span> i<span class="token punctuation">,</span> myarray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> myarray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i– <span class="token operator">-</span> <span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用myarray[i]做点什么</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二种使用while循环：</span><span class="token keyword">var</span> myarray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  i <span class="token operator">=</span> myarray<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i– <span class="token operator">-</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用myarray[i]做点什么</span><span class="token punctuation">}</span></code></pre><h2 id="for-in-Loops"><a href="#for-in-Loops" class="headerlink" title="for-in Loops"></a>for-in Loops</h2><blockquote><p>for-in 循环应该用在非数组对象的遍历上，使用 for-in 进行循环也被称为“枚举”</p></blockquote><p>从技术上将，你可以使用 for-in 循环数组（因为 JavaScript 中数组也是对象），但这是不推荐的。因为如果数组对象已被自定义的功能增强，就可能发生逻辑错误。另外，在 for-in 中，属性列表的顺序（序列）是不能保证的。所以最好数组使用正常的 for 循环，对象使用 for-in 循环。</p><p>有个很重要的<code>hasOwnProperty()</code>方法，当遍历对象属性的时候可以过滤掉从原型链上下来的属性。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对象</span><span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token punctuation">{</span>  hands<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  legs<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  heads<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在代码的某个地方</span><span class="token comment" spellcheck="true">// 一个方法添加给了所有对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们有一个使用对象字面量定义的名叫 man 的对象。在 man 定义完成后的某个地方，在对象原型上增加了一个很有用的名叫 <code>clone()</code>的方法。此原型链是实时的，这就意味着所有的对象自动可以访问新的方法。为了避免枚举 man 的时候出现<code>clone()</code>方法，你需要应用<code>hasOwnProperty()</code>方法过滤原型属性。如果不做过滤，会导致<code>clone()</code>函数显示出来，在大多数情况下这是不希望出现的。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.</span><span class="token comment" spellcheck="true">// for-in 循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> man<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 控制台显示结果hands : 2legs : 2heads : 1*/</span><span class="token comment" spellcheck="true">// 2.</span><span class="token comment" spellcheck="true">// 反面例子:</span><span class="token comment" spellcheck="true">// for-in loop without checking hasOwnProperty()</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> man<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*控制台显示结果hands : 2legs : 2heads : 1clone: function()*/</span></code></pre><p>另外一种使用<code>hasOwnProperty()</code>的形式是取消<code>Object.prototype</code>上的方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>man<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> man<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其好处在于在 man 对象重新定义<code>hasOwnProperty</code>情况下<strong>避免命名冲突。也避免了长属性查找对象的所有方法</strong>，你可以使用局部变量“缓存”它。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i<span class="token punctuation">,</span>  hasOwn <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasOwn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>man<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 过滤</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> man<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="（不）扩展内置原型"><a href="#（不）扩展内置原型" class="headerlink" title="（不）扩展内置原型"></a>（不）扩展内置原型</h2><blockquote><p>增加内置的构造函数原型（如<code>Object()</code>, <code>Array()</code>, 或<code>Function()</code>）挺诱人的，但是这严重降低了可维护性，因为它让你的代码变得难以预测。使用你代码的其他开发人员很可能更期望使用内置的 JavaScript 方法来持续不断地工作，而不是你另加的方法。</p></blockquote><h2 id="switch-模式"><a href="#switch-模式" class="headerlink" title="switch 模式"></a>switch 模式</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> inspect_me <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>inspect_me<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">'zero'</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">'one'</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">'unknown'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>每个 case 和 switch 对齐（花括号缩进规则除外）</li><li>每个 case 中代码缩进</li><li>每个 case 以 break 清除结束</li><li>避免贯穿（故意忽略 break）。如果你非常确信贯穿是最好的方法，务必记录此情况，因为对于有些阅读人而言，它们可能看起来是错误的</li><li>以 default 结束 switch：确保总有健全的结果，即使无情况匹配。</li></ul><h2 id="避免隐式类型转换"><a href="#避免隐式类型转换" class="headerlink" title="避免隐式类型转换"></a>避免隐式类型转换</h2><blockquote><p>JavaScript 的变量在比较的时候会隐式类型转换。这就是为什么一些诸如：<code>false == 0</code> 或 <code>“” == 0</code> 返回的结果是 true。为避免引起混乱的隐含类型转换，在你比较值和表达式类型的时候始终使用<code>===</code>和<code>!==</code>操作符。</p></blockquote><h2 id="避免-eval"><a href="#避免-eval" class="headerlink" title="避免 eval()"></a>避免 eval()</h2><blockquote><p>如果代码是在运行时动态生成，有一个更好的方式不使用 eval 而达到同样的目标。例如，用方括号表示法来访问动态属性会更好更简单：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 反面示例</span><span class="token keyword">var</span> property <span class="token operator">=</span> <span class="token string">'name'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'obj.'</span> <span class="token operator">+</span> property<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更好的</span><span class="token keyword">var</span> property <span class="token operator">=</span> <span class="token string">'name'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用<code>eval()</code>也带来了安全隐患，因为被执行的代码（例如从网络来）可能已被篡改。这是个很常见的反面教材，当处理 Ajax 请求得到的 JSON 相应的时候。在这些情况下，最好使用 JavaScript 内置方法来解析 JSON 相应，以确保安全和有效。若浏览器不支持<code>JSON.parse()</code>，你可以使用来自<code>JSON.org</code>的库。</p><p>同样重要的是要记住，给<code>setInterval()</code>, <code>setTimeout()</code>和<code>Function()</code>构造函数传递字符串，大部分情况下，与使用<code>eval()</code>是类似的，因此要避免。在幕后，JavaScript 仍需要评估和执行你给程序传递的字符串：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 反面示例</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'myFunc()'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'myFunc(1, 2, 3)'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更好的</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>myFunc<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果你必须使用<code>eval()</code>，可以考虑使用<code>new Function()</code>代替。有一个小的潜在好处，因为在<code>new Function()</code>中作代码评估是在<strong>局部函数作用域</strong>中运行，所以代码中任何被评估的通过 var 定义的变量都不会自动变成全局变量。另一种方法来阻止自动全局变量是封装<code>eval()</code>调用到一个即时函数中。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> un<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> deux<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> trois<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span><span class="token keyword">var</span> jsstring <span class="token operator">=</span> <span class="token string">'var un = 1; console.log(un);'</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span>jsstring<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>jsstring <span class="token operator">=</span> <span class="token string">'var deux = 2; console.log(deux);'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>jsstring<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>jsstring <span class="token operator">=</span> <span class="token string">'var trois = 3; console.log(trois);'</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">eval</span><span class="token punctuation">(</span>jsstring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> un<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> deux<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> trois<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span></code></pre><p>另一间<code>eval()</code>和<code>Function</code>构造不同的是<code>eval()</code>可以干扰作用域链，而<code>Function()</code>则不会。不管你在哪里执行 <code>Function()</code>，它只看到全局作用域。所以其能很好的避免本地变量污染。</p><h2 id="parseInt-下的数值转换"><a href="#parseInt-下的数值转换" class="headerlink" title="parseInt 下的数值转换"></a>parseInt 下的数值转换</h2><blockquote><p>使用<code>parseInt()</code>你可以从字符串中获取数值，该方法接受另一个基数参数，这经常省略，但不应该。当字符串以”0″开头的时候就有可能会出问题，例如，部分时间进入表单域，在 ECMAScript 3 中，开头为”0″的字符串被当做 8 进制处理了，但这已在 ECMAScript 5 中改变了。为了避免矛盾和意外的结果，总是指定基数参数。</p></blockquote><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><blockquote><p>空格的使用同样有助于改善代码的可读性和一致性。在写英文句子的时候，在逗号和句号后面会使用间隔。在 JavaScript 中，你可以按照同样的逻辑在列表模样表达式（相当于逗号）和结束语句（相对于完成了“想法”）后面添加间隔。</p></blockquote><p>适合使用空格的地方包括：</p><ul><li>for 循环分号分开后的的部分：如<code>for (var i = 0; i &lt; 10; i += 1) {...}</code></li><li>for 循环中初始化的多变量(i 和 max)：<code>for (var i = 0, max = 10; i &lt; max; i += 1) {...}</code></li><li>分隔数组项的逗号的后面：<code>var a = [1, 2, 3];</code></li><li>对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：<code>var o = {a: 1, b: 2};</code></li><li>限定函数参数：<code>myFunc(a, b, c)</code></li><li>函数声明的花括号的前面：<code>function myFunc() {}</code></li><li>匿名函数表达式 function 的后面：<code>var myFunc = function () {};</code></li></ul><p>使用空格分开所有的操作符和操作对象是另一个不错的使用，这意味着在<code>+, -, *, =, &lt;, &gt;, &lt;=, &gt;=, ===, !==, &amp;&amp;, ||, +=</code>等前后都需要空格。</p><h2 id="注释、-驼峰命名"><a href="#注释、-驼峰命名" class="headerlink" title="注释、 驼峰命名"></a>注释、 驼峰命名</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我们日常编码中，编写可维护代码是非常重要的，编写可维护代码，意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读性&lt;/li&gt;
&lt;li&gt;一致性&lt;/li&gt;
&lt;li&gt;可预测性&lt;/li&gt;
&lt;li&gt;团队代码风格一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;最小全局变量&quot;&gt;&lt;a href=&quot;#最小
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>VUE 学习笔记——vuex</title>
    <link href="http://coder.liusixin.cn/posts/4f38c43c/"/>
    <id>http://coder.liusixin.cn/posts/4f38c43c/</id>
    <published>2017-10-04T03:14:51.000Z</published>
    <updated>2017-10-04T03:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-vuex"><a href="#1-vuex" class="headerlink" title="1 vuex"></a>1 vuex</h1><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> i vuex -S</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateCount</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Header<span class="token punctuation">,</span>    Footer  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateCount'</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过组件内部调用方法修改mutations</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>vue 组件是树形结构的，store 只有放在最外层，它内部的子节点才能拿到 store 对象</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">updateCount</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span>count <span class="token operator">=</span> num<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// return新的对象，防止栈溢出</span></code></pre><h2 id="1-1-vuex-state"><a href="#1-1-vuex-state" class="headerlink" title="1.1 vuex-state"></a>1.1 vuex-state</h2><blockquote><p>每个数据都要给默认值，不然会导致后续增加这个值的时候，它的数据不是响应式的，不会更新视图。用到的字段一次性声明好。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">'./state/state'</span><span class="token punctuation">;</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations/mutations'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>    mutations  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里命名 defaultState 是因为后续服务端渲染有一部分数据直接渲染到客户端，会覆盖 default 数据，default 数据没有跟业务相关的内容，只是默认值。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">updateCount</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="1-2-vuex-getter"><a href="#1-2-vuex-getter" class="headerlink" title="1.2 vuex-getter"></a>1.2 vuex-getter</h2><blockquote><p>可以理解为 computed，方便我们生成在应用里可以用的数据，在与后端开发联调的时候，后端数据有时并不适合在 view 层去显示，需要重新组装，这个组装数据需要在多个页面用到的时候用 getter。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">'./state/state'</span><span class="token punctuation">;</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations/mutations'</span><span class="token punctuation">;</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters/getters'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    getters  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// state.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  firstName<span class="token punctuation">:</span> <span class="token string">'liu'</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">'sixin'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// getters.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">fullName</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>fullName    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>在组件内这种写法太麻烦，vuex 给我们提供了更简便的写法</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>  mapState<span class="token punctuation">,</span>  mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>fullName    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>但是在 babel 里 env 是不支持…这种语法，</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可以使用es8或者未定稿语法</span>npm i babel<span class="token operator">-</span>preset<span class="token operator">-</span>stage<span class="token number">-1</span> <span class="token operator">-</span>D<span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"env"</span><span class="token punctuation">,</span>    <span class="token string">"stage-1"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-vue-jsx"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>如果想要不同名的方式</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      counter<span class="token punctuation">:</span> <span class="token string">'count'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 以函数的方式</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      counter<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-vuex-mutation"><a href="#1-3-vuex-mutation" class="headerlink" title="1.3 vuex-mutation"></a>1.3 vuex-mutation</h2><blockquote><p>专门用来修改 state 数据，默认只能传 2 个参数，要传多个值，第二个参数设为对象</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.vue</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateCount'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      num<span class="token punctuation">:</span> i<span class="token operator">++</span><span class="token punctuation">,</span>      num2<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// mutations.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">updateCount</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span> num2 <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>vue 官方推荐所有 state 修改都放在 mutation 方法里，但是不强制,如果要强制的话，设置 strict 为 true(只在开发环境使用)</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">'./state/state'</span><span class="token punctuation">;</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations/mutations'</span><span class="token punctuation">;</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters/getters'</span><span class="token punctuation">;</span><span class="token keyword">const</span> isDev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    strict<span class="token punctuation">:</span> isDev<span class="token punctuation">,</span>    state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    getters  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="1-4-vuex-action"><a href="#1-4-vuex-action" class="headerlink" title="1.4 vuex-action"></a>1.4 vuex-action</h2><blockquote><p>action 和 mutation 差不多，但是 action 用于异步代码，而 mutation 用于同步代码</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">'./state/state'</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations/mutations'</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters/getters'</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">'./actions/actions'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    getters<span class="token punctuation">,</span>    actions  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// actions.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  updateCountAsync <span class="token punctuation">(</span>store<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateCount'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        num<span class="token punctuation">:</span> data<span class="token punctuation">.</span>num      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// app.vue</span>mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateCountAsync'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    time<span class="token punctuation">:</span> <span class="token number">2000</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p> 更简洁的写法，建立方法对应关系</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.vue</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  mapActions<span class="token punctuation">,</span>  mapMutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateCountAsync'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateCountAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    time<span class="token punctuation">:</span> <span class="token number">2000</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      num<span class="token punctuation">:</span> i<span class="token operator">++</span><span class="token punctuation">,</span>      num2<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="1-5-vuex-模块"><a href="#1-5-vuex-模块" class="headerlink" title="1.5 vuex 模块"></a>1.5 vuex 模块</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">'./state/state'</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations/mutations'</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters/getters'</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">'./actions/actions'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    getters<span class="token punctuation">,</span>    actions<span class="token punctuation">,</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> <span class="token punctuation">{</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      b<span class="token punctuation">:</span> <span class="token punctuation">{</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// app.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>textA<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>textB<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  textA <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">,</span>  textB <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>更简洁写法</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>    textA<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>加入 mutation</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> <span class="token punctuation">{</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">updateText</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a.state'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>            state<span class="token punctuation">.</span>text <span class="token operator">=</span> text          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      b<span class="token punctuation">:</span> <span class="token punctuation">{</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// app.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>textA<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>textB<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateText</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateCountAsync'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateCount'</span><span class="token punctuation">,</span> <span class="token string">'updateText'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>    textA<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>可以看到 updateText 调用没有像之前在模块内调用，这是因为 vuex 默认会把所有 mutation 放到全局命名当中，如果要加命名空间，加入 namespaced:true</p></blockquote><blockquote><p>getter 和 mutation 一样</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> <span class="token punctuation">{</span>        namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">updateText</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a.state'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>            state<span class="token punctuation">.</span>text <span class="token operator">=</span> text          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>          textPlus <span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// getters 所有的getter方法集合，rootState 全局的state</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>text <span class="token operator">+</span> rootState<span class="token punctuation">.</span>count          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      b<span class="token punctuation">:</span> <span class="token punctuation">{</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// app.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>textA<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>textB<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">'a/updateText'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateCountAsync'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateCount'</span><span class="token punctuation">,</span> <span class="token string">'a/updateText'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>    textA<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    textPlus<span class="token punctuation">:</span> <span class="token string">'a/textPlus'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>在模块内获取全局的 rootState 方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> <span class="token punctuation">{</span>        namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">updateText</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a.state'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>            state<span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">textPlus</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// getters 所有的getter方法集合，rootState 全局的state</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>text <span class="token operator">+</span> rootState<span class="token punctuation">.</span>count<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token function">add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里ctx在之前全局声明里拿到的是store对象，在这里是这一个模块的ctx，包含模块方法和rootState</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 简洁方法</span>          <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> rootState <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里commit默认去模块里的mutation找</span>            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateText'</span><span class="token punctuation">,</span> rootState<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 要想在全局去找</span>            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateText'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> num<span class="token punctuation">:</span> <span class="token number">55667</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      b<span class="token punctuation">:</span> <span class="token punctuation">{</span>        state<span class="token punctuation">:</span> <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> <span class="token number">2</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在b模块调用a模块方法，如果加了namespaced，则必须要加 root: true 才能调用</span>          <span class="token function">testAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'a/updateText'</span><span class="token punctuation">,</span> <span class="token string">'test test'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：模块里还可以声明模块，可以无限嵌套</p></blockquote><h2 id="1-6-vuex-动态注册模块"><a href="#1-6-vuex-动态注册模块" class="headerlink" title="1.6 vuex 动态注册模块"></a>1.6 vuex 动态注册模块</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//index.js</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// app.vue</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    textC<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>c<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="1-7-vuex-热更器"><a href="#1-7-vuex-热更器" class="headerlink" title="1.7 vuex 热更器"></a>1.7 vuex 热更器</h2><blockquote><p>页面在不刷新的情况下更新数据</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">'./state/state'</span><span class="token punctuation">;</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations/mutations'</span><span class="token punctuation">;</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters/getters'</span><span class="token punctuation">;</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">'./actions/actions'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    getters<span class="token punctuation">,</span>    actions  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>      <span class="token punctuation">[</span>        <span class="token string">'./state/state'</span><span class="token punctuation">,</span>        <span class="token string">'./getters/getters'</span><span class="token punctuation">,</span>        <span class="token string">'./mutations/mutations'</span><span class="token punctuation">,</span>        <span class="token string">'./actions/actions'</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./state/state'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> newGetters <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./getters/getters'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> newMutations <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mutations/mutations'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> newActions <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./actions/actions'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">hotUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          state<span class="token punctuation">:</span> newState<span class="token punctuation">,</span>          getters<span class="token punctuation">:</span> newGetters<span class="token punctuation">,</span>          mutations<span class="token punctuation">:</span> newMutations<span class="token punctuation">,</span>          actions<span class="token punctuation">:</span> newActions        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> store<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="1-8-vuex-其它-API"><a href="#1-8-vuex-其它-API" class="headerlink" title="1.8 vuex 其它 API"></a>1.8 vuex 其它 API</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//index.js</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//unregisterModule 解绑动态注册模块</span>store<span class="token punctuation">.</span><span class="token function">unregisterModule</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// store.watch</span><span class="token comment" spellcheck="true">// 第一个参数为state，监听得到state的返回值，第二个参数返回一个方法，当第一个参数有变化的时候调用第二个方法作为回调。相当于store里的getter方法。</span>store<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.subscribe</span><span class="token comment" spellcheck="true">// 拿到所有mutation状态，有一个mutation变化，就会被调用</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// store.subscribeAction</span><span class="token comment" spellcheck="true">// 拿到所有action状态，有一个action变化，就会被调用</span>store<span class="token punctuation">.</span><span class="token function">subscribeAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>这两个方法一般用于 vuex 插件</p></blockquote><h2 id="1-9-vuex-插件"><a href="#1-9-vuex-插件" class="headerlink" title="1.9 vuex 插件"></a>1.9 vuex 插件</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">'./state/state'</span><span class="token punctuation">;</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">'./mutations/mutations'</span><span class="token punctuation">;</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">'./getters/getters'</span><span class="token punctuation">;</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">'./actions/actions'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    getters<span class="token punctuation">,</span>    actions<span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>      store <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// store.subscribe</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="1-10-vuex-总结"><a href="#1-10-vuex-总结" class="headerlink" title="1.10 vuex 总结"></a>1.10 vuex 总结</h2><p>整个应用加入了 vuex 之后：</p><ul><li>index.js 顶部声明 root -&gt; new Vue()</li><li>通过 vue 实例把整个应用都挂载  到 root 节点上,这个应用渲染的是 App 这个节点</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>在 App 里承担了一个路由操作，有多个路由子节点，每个子节点分别渲染不同的 vue 组件。整个 vue 应用就是节点的树形，通过一层层向下渲染，最终  渲染成 html 节点。</li><li>有一个独立于 vue 节点树的 store，类似于一个数据库，store 通过在声明 vue 对象的时候  注入到整个  组件树，注入之后 App，及  所有节点都可以通过 $store 对象调用 store 内容。</li><li>在节点内就可以通过 dispatch 或 commit 分别调用 mutation 或 action，以这种方式让我们在节点里可以修改 store 数据。但是要注意，真正的修改是在 store 里去做，而不是 dispatch 在节点  里去操作。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-vuex&quot;&gt;&lt;a href=&quot;#1-vuex&quot; class=&quot;headerlink&quot; title=&quot;1 vuex&quot;&gt;&lt;/a&gt;1 vuex&lt;/h1&gt;&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Vue" scheme="http://coder.liusixin.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>造轮子系列：JS封装无缝滚动</title>
    <link href="http://coder.liusixin.cn/posts/612f1a43/"/>
    <id>http://coder.liusixin.cn/posts/612f1a43/</id>
    <published>2017-09-30T09:51:53.000Z</published>
    <updated>2017-09-30T09:51:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装无缝滚动"><a href="#封装无缝滚动" class="headerlink" title="封装无缝滚动"></a>封装无缝滚动</h2><p>无缝滚动指的是几个元素循环滚动，视觉效果就像是有无穷无尽的元素一样。</p><p>实现的原理也很简单，首先对容器元素进行滚动操作。子元素在容器元素中依次排列，并且将子元素复制一份，放在同一个容器元素中，这样就实现了首尾相接。当最后一个子元素滚动过临界点的时候，将容器元素的位置拉回初始位置，然后重复滚动操作即可。</p><p>首先写好 HTML</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>封装无缝滚动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token id">#scroll_area</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px auto<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.scroll_body</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.scroll_body</span> <span class="token class">.item</span> </span><span class="token punctuation">{</span>      <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.buttons</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll_area<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll_body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>move left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>move right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>stop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>滚动区域元素 <code>scroll_area</code> 固定，容器元素 <code>scro11_body</code> 在滚动区域中滚动，滚动效果就是通过定时器每秒钟移动 1 个像素来实现的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  nextFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>  window<span class="token punctuation">.</span>mozRequesAnimationFrame <span class="token operator">||</span>  window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> currTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">,</span>      delay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span>currTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lastTime <span class="token operator">=</span> currTime <span class="token operator">+</span> delay<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  cancelFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitCancelAnimationFrame <span class="token operator">||</span>  window<span class="token punctuation">.</span>webkitCancelRequestAnimationFrame <span class="token operator">||</span>  window<span class="token punctuation">.</span>mozCancelRequestAnimationFrame <span class="token operator">||</span>  window<span class="token punctuation">.</span>msCancelRequestAnimationFrame <span class="token operator">||</span>  clearTimeout<span class="token punctuation">;</span><span class="token keyword">var</span> area <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#scroll_area'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> areaWidth <span class="token operator">=</span> area<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span><span class="token keyword">var</span> scrollBody <span class="token operator">=</span> area<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.scroll_body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> itemWidth <span class="token operator">=</span> areaWidth<span class="token operator">/</span><span class="token punctuation">(</span>scrollBody<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>scrollBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> areaWidth <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>scrollBody<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> scrollBody<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span> scrollBody<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token keyword">var</span> targetPos <span class="token operator">=</span> areaWidth<span class="token punctuation">;</span><span class="token keyword">var</span> scrollX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">cancelFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  timer <span class="token operator">=</span> <span class="token function">nextFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    scrollX <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span>scrollX <span class="token operator">>=</span> targetPos<span class="token punctuation">)</span> <span class="token punctuation">{</span>      scrollX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    scrollBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> scrollX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token function">ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于初学者来说，一个比较难以理解的地方就是 <code>nextFrame</code> 与 <code>cancelFrame</code> 的声明，这是一个类似于定时器的 <code>setTimeout</code> 的兼容性写法。<code>requestAnimationFrame</code> 是一个在 HTML5 中用于实现动画效果的API。</p><p>通过面向对象的方式来扩展控制滚动方向、停止滚动等接口:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ROOT<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    nextFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>                window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>                window<span class="token punctuation">.</span>mozRequesAnimationFrame <span class="token operator">||</span>                window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>                <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">var</span> currTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">,</span>                    delay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span>currTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  lastTime <span class="token operator">=</span> currTime <span class="token operator">+</span> delay<span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>    cancelFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>cancelAnimationFrame <span class="token operator">||</span>                  window<span class="token punctuation">.</span>webkitCancelAnimationFrame <span class="token operator">||</span>                  window<span class="token punctuation">.</span>webkitCancelRequestAnimationFrame <span class="token operator">||</span>                  window<span class="token punctuation">.</span>mozCancelRequestAnimationFrame <span class="token operator">||</span>                  window<span class="token punctuation">.</span>msCancelRequestAnimationFrame <span class="token operator">||</span>                  clearTimeout<span class="token punctuation">;</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Scroll</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>areaWidth <span class="token operator">=</span> elem<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scrollBody <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.scroll_body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>itemWidth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>areaWidth<span class="token operator">/</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollBody<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scrollX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>targetPos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>areaWidth<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Scroll<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">:</span> Scroll<span class="token punctuation">,</span>    init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>scrollBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>areaWidth <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>scrollBody<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollBody<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollBody<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    moveLeft<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token function">cancelFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token function">nextFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        self<span class="token punctuation">.</span>scrollX <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span>self<span class="token punctuation">.</span>scrollX <span class="token operator">>=</span> self<span class="token punctuation">.</span>targetPos<span class="token punctuation">)</span> <span class="token punctuation">{</span>          self<span class="token punctuation">.</span>scrollX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>scrollBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>scrollX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        self<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    moveRight<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token function">cancelFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token function">nextFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        self<span class="token punctuation">.</span>scrollX <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>scrollX <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          self<span class="token punctuation">.</span>scrollX <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>targetPos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>scrollBody<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>scrollX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        self<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    stop<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">cancelFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ROOT<span class="token punctuation">.</span>Scroll <span class="token operator">=</span> Scroll<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> scroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scroll</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#scroll_area'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> left_btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.left'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> right_btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.right'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stop_btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.stop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>left_btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  scroll<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>right_btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  scroll<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>stop_btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  scroll<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;封装无缝滚动&quot;&gt;&lt;a href=&quot;#封装无缝滚动&quot; class=&quot;headerlink&quot; title=&quot;封装无缝滚动&quot;&gt;&lt;/a&gt;封装无缝滚动&lt;/h2&gt;&lt;p&gt;无缝滚动指的是几个元素循环滚动，视觉效果就像是有无穷无尽的元素一样。&lt;/p&gt;
&lt;p&gt;实现的原理也很简单，首先
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="造轮子系列" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E9%80%A0%E8%BD%AE%E5%AD%90%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VUE 学习笔记——vue-router</title>
    <link href="http://coder.liusixin.cn/posts/154ba74b/"/>
    <id>http://coder.liusixin.cn/posts/154ba74b/</id>
    <published>2017-09-28T15:10:20.000Z</published>
    <updated>2017-09-30T13:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-vue-router-之集成"><a href="#1-vue-router-之集成" class="headerlink" title="1 vue-router 之集成"></a>1 vue-router 之集成</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const router = new Router({</span><span class="token comment" spellcheck="true">//   routes</span><span class="token comment" spellcheck="true">// })</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span>    mode<span class="token punctuation">:</span> <span class="token string">'history'</span> <span class="token comment" spellcheck="true">// history路由形式，seo友好</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里为什么要 export 出去一个函数。因为在每次服务端渲染都会新生成一个 app，router 只有一个对象，就会缓存每次新建的 app，导致服务端渲染流程结束后，app 并没有被释放掉，造成内存溢出。</p></blockquote><blockquote><p>路由要使用<code>&lt;router-view /&gt;</code>来渲染</p></blockquote><h2 id="1-1-路由参数"><a href="#1-1-路由参数" class="headerlink" title="1.1 路由参数"></a>1.1 路由参数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span>    mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// history路由形式，seo友好</span>    base<span class="token punctuation">:</span> <span class="token string">'/base/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 应用基路径，所有路径前面都会有base</span>    linkActiveClass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    linkExactActiveClass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    scrollBehavior<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 页面路径进行跳转的时候页面要不要滚动</span>      <span class="token comment" spellcheck="true">// to,路由跳转要去的路由</span>      <span class="token comment" spellcheck="true">// from，从哪个路由跳转到下一个路由</span>      <span class="token comment" spellcheck="true">// savedPosition，记录滚动条位置</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">parseQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 把url参数字符串转obj</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 把obj转字符串</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    fallback<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 不支持前端路由情况下，vue会自动fallback成哈希的模式，如果设成false，单页就变成了多页应用，每次路由跳转都会到后端再去返回新的内容，一般为true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>vue 中可点击的内容一般用<code>&lt;router-link /&gt;</code>来做</p></blockquote><pre class=" language-js"><code class="language-js">linkActiveClass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>linkExactActiveClass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment" spellcheck="true">// 就是用来配置全局样式，两者区别linkExactActiveClass是linkActiveClass子集</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// scrollBehavior</span>scrollBehavior<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果在app下产生过滚动行为，下一次回来还会在这个位置</span>    <span class="token keyword">return</span> savedPosition  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>浏览器会默认帮助跳转到默认位置，我们可以根据需求自定义</p></blockquote><h2 id="1-2-路由配置及参数传递"><a href="#1-2-路由配置及参数传递" class="headerlink" title="1.2 路由配置及参数传递"></a>1.2 路由配置及参数传递</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/app'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/app'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> app<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">//子路由</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Test      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>login<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token comment" spellcheck="true">//通过name去解析路由，而不是直接解析字符串</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{name: 'app'}"</span><span class="token operator">></span>login<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 关键字。搜索引擎优化</span>meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'this is app'</span><span class="token punctuation">,</span>  description<span class="token punctuation">:</span> <span class="token string">'xxxx'</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-路由动画"><a href="#1-3-路由动画" class="headerlink" title="1.3 路由动画"></a>1.3 路由动画</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"fade"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"stylus"</span><span class="token operator">></span>  <span class="token punctuation">.</span>fade<span class="token operator">-</span>enter<span class="token operator">-</span>active<span class="token punctuation">,</span> <span class="token punctuation">.</span>fade<span class="token operator">-</span>leave<span class="token operator">-</span>active    transition<span class="token punctuation">:</span> opacity <span class="token punctuation">.</span>5s  <span class="token punctuation">.</span>fade<span class="token operator">-</span>enter<span class="token punctuation">,</span> <span class="token punctuation">.</span>fade<span class="token operator">-</span>leave<span class="token operator">-</span>to    opacity<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="1-4-路由传参"><a href="#1-4-路由传参" class="headerlink" title="1.4 路由传参"></a>1.4 路由传参</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/app'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/app:id'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// /app/xxx, xxx会变成id的变量传到组件内部</span>    props<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会把:id传入到App组件里</span>    component<span class="token punctuation">:</span> App<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><blockquote><p>可以通过 this.$route 取到路由相关参数</p></blockquote><blockquote><p>通过 url 后?加参数可以取到 query</p></blockquote><blockquote><p>props: true 这种方式可以更方便，同时达到组件与路由的解耦效果，尽量不要在组件里取$route</p></blockquote><pre class=" language-js"><code class="language-js">url<span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>app<span class="token operator">/</span><span class="token number">123</span><span class="token operator">?</span>a<span class="token operator">=</span><span class="token number">123</span><span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token number">456</span><span class="token comment" spellcheck="true">// 同时也可以自定义props</span><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/app:id'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">123</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据query进行传递</span><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/app:id'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">(</span>route<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>b  <span class="token comment" spellcheck="true">// 456</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="1-5-路由高级用法-命名视图"><a href="#1-5-路由高级用法-命名视图" class="headerlink" title="1.5 路由高级用法-命名视图"></a>1.5 路由高级用法-命名视图</h2><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view name<span class="token operator">=</span><span class="token string">"a"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> '<span class="token operator">/</span>app<span class="token punctuation">,</span>  component<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> Todo<span class="token punctuation">,</span>    a<span class="token punctuation">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-6-路由高级用法-导航守卫"><a href="#1-6-路由高级用法-导航守卫" class="headerlink" title="1.6 路由高级用法-导航守卫"></a>1.6 路由高级用法-导航守卫</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导航钩子</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./app.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./assets/styles/global.styl'</span><span class="token punctuation">;</span><span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">'./config/router'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 进行数据校验,比如验证用户界面是需要用户登录才能显示</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>fullPath <span class="token operator">===</span> <span class="token string">'/app'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">beforeResolve</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before resolve invoked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before each invoked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 路由配置也可以增加钩子</span><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> '<span class="token operator">/</span>app<span class="token punctuation">,</span>  component<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> Todo<span class="token punctuation">,</span>    a<span class="token punctuation">:</span> Login  <span class="token punctuation">}</span><span class="token punctuation">,</span>  beforeEnter <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//在beforeEach和beforeResolve之间调用</span>    <span class="token comment" spellcheck="true">//执行逻辑</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在组件里增加钩子</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只有在使用param路由才会触发</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// beforeRouteLeave最先触发</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 整个触发顺序</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">beforeResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>在做路由跳转数据监听的时候可以用 beforeRouteEnter 代替 watch，并且 beforeRouteEnter 要通过 next 传递参数，因为在这之前它并没有被创建，取不到值。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undifined</span>    <span class="token function">next</span><span class="token punctuation">(</span>vm <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>beforeRouteEnter 路由钩子一般用来做数据获取插入到对象当中，这样页面进来时数据就已经获取好了</p></blockquote><blockquote><p>beforeRouteLeave 可以做一些确认，比如表单提交离开时，判断表单是否做了修改，然后弹出提示要不要离开，确认离开就执行 next，不确认就把数据保存下来。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'are you sure?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-7-路由高级用法-异步组件"><a href="#1-7-路由高级用法-异步组件" class="headerlink" title="1.7 路由高级用法-异步组件"></a>1.7 路由高级用法-异步组件</h2><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> '<span class="token operator">/</span>app<span class="token punctuation">,</span>  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/todo/todo.vue'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>可能会提示不正确语法 import</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装插件</span>npm i babel<span class="token operator">-</span>plugin<span class="token operator">-</span>syntax<span class="token operator">-</span>dynamic<span class="token operator">-</span><span class="token keyword">import</span> <span class="token operator">-</span>D<span class="token comment" spellcheck="true">// 修改下.babelrc</span><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"env"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"transform-vue-jsx"</span><span class="token punctuation">,</span>    <span class="token string">"syntax-dynamic-import"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 同时把app.vue里需要异步加载的组件import去掉</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"cover"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>Header<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Header<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>login<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>todo<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>todo<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Footer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'./layout/header.vue'</span><span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'./layout/footer.jsx'</span><span class="token comment" spellcheck="true">// import Todo from './views/todo/todo.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Header<span class="token punctuation">,</span>    Footer<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Todo</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-vue-router-之集成&quot;&gt;&lt;a href=&quot;#1-vue-router-之集成&quot; class=&quot;headerlink&quot; title=&quot;1 vue-router 之集成&quot;&gt;&lt;/a&gt;1 vue-router 之集成&lt;/h1&gt;&lt;pre class=&quot; lang
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Vue" scheme="http://coder.liusixin.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>记一次工作中的 js 控制 cookie 的实践</title>
    <link href="http://coder.liusixin.cn/posts/e2c95240/"/>
    <id>http://coder.liusixin.cn/posts/e2c95240/</id>
    <published>2017-09-27T13:15:05.000Z</published>
    <updated>2017-09-27T13:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>主要实现的功能是有个活动的结果弹窗在进入页面会自动弹出来一次，当天只弹出一次，直到活动结束为止。</p><h2 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h2><ul><li>使用 <code>addCookie SetCookie getCookie</code> 三个公用的方法来实现操作。</li><li>首次载入页面时先判断当前时间是否在活动时间内，之后使用 <code>getCookie</code> 判断 <code>cookie</code> 是否存在，如果不存在使用 <code>addCokie</code> 添加 <code>cookie</code>（这里的 cookie 的值设置为当天的日期值）并弹出弹窗；如果存在的话判断 <code>cookie</code> 的值，如果等于当天的日期值弹出弹窗</li><li>在关闭弹窗的时候也得先判断是否有这个 <code>cookie</code> ，因为可能活动已经结束了，再使用 <code>SetCookie</code> 对 <code>cookie</code> 的值进行修改，这里将当天的日期值加 1 后的值赋给 <code>SetCookie</code> 的第二个参数，再用活动结束后的时间减去当天的时间最后算出离活动还有几天的天数，将这个天数的值当作是 <code>SetCookie</code> 的第三个参数，这里需要注意的是如果天数小于 1 那么这个方法执行完之后会默认将 <code>cookie</code> 删掉。</li><li>整个的执行测试过程：在今天进入这个页面之后因为没有 <code>cookie</code> 会生成这个 <code>cookie</code> ，<code>cookie</code> 的有效时间至活动结束之前（<code>addCookie</code> 的第三个参数，这个是按照小时数换算的），<code>cookie</code> 的值（第二个参数）设置为当天的日期，这时点击关闭弹窗的按钮修改 <code>cookie</code> 的日期值，之后在今天的其他时间之内再次进入页面的时候会进行日期判断，此时的日期值会是明天的所以不会弹出弹窗，到了第二天再次进入时因为日期值又相等了，所以还会有弹窗，然后点击关闭日期加 1 ，这样直至活动结束，弹出弹窗之后再点击关闭按钮，时间相减的值取整数为 0 ，这样 <code>SetCookie</code> 执行后会自动将这个 cookie 删掉了。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//三个公用方法</span><span class="token comment" spellcheck="true">//添加cookie</span><span class="token keyword">function</span> <span class="token function">addCookie</span><span class="token punctuation">(</span>objName<span class="token punctuation">,</span> objValue<span class="token punctuation">,</span> objHours<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> objName <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">escape</span><span class="token punctuation">(</span>objValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>objHours <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//为0时不设定过期时间，浏览器关闭时cookie自动消失</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ms <span class="token operator">=</span> objHours <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'; expires='</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">'; path=/'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改cookie</span><span class="token keyword">function</span> <span class="token function">SetCookie</span><span class="token punctuation">(</span>c_name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expiredays<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> exdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  exdate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>exdate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiredays<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span>    c_name <span class="token operator">+</span>    <span class="token string">'='</span> <span class="token operator">+</span>    <span class="token function">escape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span>    <span class="token punctuation">(</span>expiredays <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token punctuation">:</span> <span class="token string">';expires='</span> <span class="token operator">+</span> exdate<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>    <span class="token string">'; path=/'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//取cookies函数</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^| )'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'=([^;]*)(;|$)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//页面脚本中用到的地方，下面的 #now_date1 的 value 是服务器获取的当前的百度时间 供 JS 调用</span><span class="token keyword">var</span> nowDate <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#now_date1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//服务器当前时间</span><span class="token comment" spellcheck="true">//增加弹窗 cookie</span><span class="token keyword">this</span><span class="token punctuation">.</span>addpopupcookie <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2018/1/2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cookiestr <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">'popuptoogle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cookiestr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> date <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> hours <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token string">'popuptoogle'</span><span class="token punctuation">,</span> date<span class="token punctuation">,</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.lay-popup5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cookiestr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> start<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.lay-popup5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> _me<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公用的关闭弹窗</span><span class="token keyword">this</span><span class="token punctuation">.</span>closelaypopup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//console.log(e.target.parentNode.parentNode.parentNode);</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">'popuptoogle'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'lay-popup5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowDate<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> date <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> days <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2018/1/2'</span><span class="token punctuation">)</span> <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">3600</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">'popuptoogle'</span><span class="token punctuation">,</span> date<span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#lay-popup-bg,.lay-popup'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _me<span class="token punctuation">.</span><span class="token function">ioslayclosepopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _me<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;主要实现的功能是有个活动的结果弹窗在进入页面会自动弹出来一次，当天只弹出一次，直到活动结束为止。&lt;/p&gt;
&lt;h2 id=&quot;实现逻辑&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="项目实践" scheme="http://coder.liusixin.cn/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="Cookie" scheme="http://coder.liusixin.cn/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>造轮子系列：JS封装选项卡组件</title>
    <link href="http://coder.liusixin.cn/posts/5f666ea6/"/>
    <id>http://coder.liusixin.cn/posts/5f666ea6/</id>
    <published>2017-09-26T13:12:57.000Z</published>
    <updated>2017-09-26T13:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装一个选项卡"><a href="#封装一个选项卡" class="headerlink" title="封装一个选项卡"></a>封装一个选项卡</h2><p>通常情况下，选项卡由两部分组成。一部分是头部，它包含一堆按钮，每一个按钮对应不同的页面，按钮包括选中与无法选中两种状态。另一部分则由一些具体的页面组成，当我们单击按钮时，就切换到对应的页面。</p><blockquote><p>如果每个页面中包含的是根据动态加载的数据渲染出来的界函，那么通常只会有一个页面，单击按钮时重新加载数据并重新渲染页面。</p></blockquote><p>先初始化html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>封装选项卡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">ul, li </span><span class="token punctuation">{</span>      <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>      <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px auto<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#efefef</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span> <span class="token class">.tab_options</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span> <span class="token class">.tab_options</span> li </span><span class="token punctuation">{</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span> <span class="token class">.tab_options</span> li<span class="token class">.active</span> </span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span> <span class="token class">.tab_content</span> </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span> <span class="token class">.tab_content</span> <span class="token class">.item_box</span> </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span> <span class="token class">.tab_content</span> <span class="token class">.item_box.active</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab_wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab_options<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_box active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab box 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab box 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab box 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tab box 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在 HTML 代码中，每一个头部按钮都保存了一个 <code>data-index</code> 属性，这个属性告诉我们这是第几个按钮，这个值同时也对应第几页。 因此只需声明一个 <code>index</code> 变量来保存当前页的序列，井在单击时把当前页的值修改为 <code>data-index</code> 的值就可以了。与此同时，把当前按钮修改为选中状态，其他按钮修改为未选中状态，让当前页显示，其他页隐藏即可。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> tabHeader <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tab_options'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> items <span class="token operator">=</span> tabHeader<span class="token punctuation">.</span>children<span class="token punctuation">;</span><span class="token keyword">var</span> tabContent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.tab_content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> itemboxes <span class="token operator">=</span> tabContent<span class="token punctuation">.</span>children<span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>tabHeader<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">!=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemboxes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    index <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">;</span>    items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemboxes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><p>此时假设要新增一个功能，即在 HTML 中新增两个按钮，单击它们就可以分别切换到上一页或下一页</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Prev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>为了更直观地实现这个功能，我们将选项卡封装为一个对象</p><pre class=" language-js"><code class="language-js"><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span>ROOT<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// var index = 0;</span>  <span class="token keyword">function</span> <span class="token function">Tab</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tabHeader <span class="token operator">=</span> elem<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tabHeader<span class="token punctuation">.</span>children<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tabContent <span class="token operator">=</span> elem<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>itemboxes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tabContent<span class="token punctuation">.</span>children<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Tab<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">:</span> Tab<span class="token punctuation">,</span>    init<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tabHeader<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    clickHandler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switchTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    switchTo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>itemboxes<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>itemboxes<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    next<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tgIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tgIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        tgIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switchTo</span><span class="token punctuation">(</span>tgIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    pre<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tgIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tgIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        tgIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switchTo</span><span class="token punctuation">(</span>tgIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getIndex<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ROOT<span class="token punctuation">.</span>Tab <span class="token operator">=</span> Tab<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的代码中，将切换功能封装成了基础的 <code>switchTo</code> 方法，它接收一个表示页面序列的参数，只要我们调用这个方法，就能够切换到对应的页面。因此基于这个基础方法，就能够很容易地扩展出下一页 <code>next</code> 与上一页 <code>pre</code> 的方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> tab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tab</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#tab_wrap'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  tab<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.prev'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  tab<span class="token punctuation">.</span><span class="token function">pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;封装一个选项卡&quot;&gt;&lt;a href=&quot;#封装一个选项卡&quot; class=&quot;headerlink&quot; title=&quot;封装一个选项卡&quot;&gt;&lt;/a&gt;封装一个选项卡&lt;/h2&gt;&lt;p&gt;通常情况下，选项卡由两部分组成。一部分是头部，它包含一堆按钮，每一个按钮对应不同的页面，按钮包括选中
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="造轮子系列" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E9%80%A0%E8%BD%AE%E5%AD%90%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>VUE 学习笔记——核心概念</title>
    <link href="http://coder.liusixin.cn/posts/870730ac/"/>
    <id>http://coder.liusixin.cn/posts/870730ac/</id>
    <published>2017-09-24T13:17:20.000Z</published>
    <updated>2017-09-26T05:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-VUE-核心技术"><a href="#1-VUE-核心技术" class="headerlink" title="1. VUE 核心技术 "></a>1. VUE 核心技术 </h1><blockquote><p>node_modules 下 vue 有多个版本，因为 vue 提供不同环境的支持</p></blockquote><blockquote><p>import vue 默认使用 vue.runtime.esm.js</p></blockquote><pre class=" language-js"><code class="language-js">vue<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>esm<span class="token punctuation">.</span>js<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开发环境默认</span>vue<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正式环境</span></code></pre><p>runtime 和没有 runtime 的区别在于是否可以在 vue 对象里写 template,runtime 文件不能写入模板</p><pre class=" language-js"><code class="language-js">resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>  alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'vue'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../node_modules/vue/dist/vue.esm.js'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定使用哪个vue文件</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"no-new"</span><span class="token punctuation">:</span> <span class="token string">"off"</span> <span class="token comment" spellcheck="true">// eslint默认不允许直接使用new</span><span class="token punctuation">}</span></code></pre><h2 id="1-1-vue-实例"><a href="#1-1-vue-实例" class="headerlink" title="1.1 vue 实例"></a>1.1 vue 实例</h2><ul><li>VUE 实例的创建和作用</li><li>VUE 实例的属性</li><li>VUE 实例的方法</li></ul><h3 id="1-1-1-VUE-实例的创建和作用"><a href="#1-1-1-VUE-实例的创建和作用" class="headerlink" title="1.1.1 VUE 实例的创建和作用"></a>1.1.1 VUE 实例的创建和作用</h3><p><strong>创建实例</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>hello world&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另外一种方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>hello world&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>'#root<span class="token punctuation">)</span></code></pre><p><strong>绑定数据方式</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{text}}&lt;/div>'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span>text <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-1-2-vue-实例属性"><a href="#1-1-2-vue-实例属性" class="headerlink" title="1.1.2 vue 实例属性"></a>1.1.2 vue 实例属性</h3><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span>$data<span class="token punctuation">;</span>app<span class="token punctuation">.</span>$props<span class="token punctuation">;</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">;</span>app<span class="token punctuation">.</span>$options<span class="token punctuation">;</span>app<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render <span class="token operator">=</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>$root <span class="token operator">===</span> app<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true,每个节点都可以调用，返回的都是顶层的root</span>app<span class="token punctuation">.</span>$children<span class="token punctuation">;</span>app<span class="token punctuation">.</span>$slots<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 插槽</span>app<span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">;</span>app<span class="token punctuation">.</span>$refs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 快速定位节点，返回html节点，组件会返回组件实例</span>app<span class="token punctuation">.</span>$isServer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 服务端渲染判断</span></code></pre><h3 id="1-1-3-vue-实例方法"><a href="#1-1-3-vue-实例方法" class="headerlink" title="1.1.3 vue 实例方法"></a>1.1.3 vue 实例方法</h3><p><strong>监听变化</strong></p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newText<span class="token punctuation">,</span> oldText<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 监听新值和旧值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>oldText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种写法需要手动去注销值</span><span class="token keyword">const</span> unWatch <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newText<span class="token punctuation">,</span> oldText<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 监听新值和旧值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>oldText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">unWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 常用写法,这种方式会自动注销</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{text}}&lt;/div>'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">text</span><span class="token punctuation">(</span>newText<span class="token punctuation">,</span> oldText<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>事件监听</strong></p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 作用域于一个对象才会生效，不会冒泡</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">,</span> <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以传递参数</span></code></pre><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">$once</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只触发一次</span>app<span class="token punctuation">,</span> <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>强制重新渲染组件</strong></p><p>vue 中，如果没有给 data 中的属性赋值，那这个属性就是非响应式的，不会引起 vue 进行一个重新渲染的过程</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{text}}{{obj.a}}&lt;/div>'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    obj<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  i<span class="token operator">++</span>  app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> i<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>此时发现 obj 并没有渲染出来，但是值在变化</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  i<span class="token operator">++</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> i<span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 强制重新渲染组件</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>但是不建议这么做，可以提前声明一个默认值。还有另外一种方法</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  i<span class="token operator">++</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> i<span class="token punctuation">;</span>  app<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于补上一个响应式属性</span>  app<span class="token punctuation">.</span>$<span class="token keyword">delete</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应的删除方法</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>vue 的渲染过程是异步的，在改了属性并不是立刻会渲染刷新掉，会有一个异步队列，如果连续改了多次，它会一次性渲染，整个过程异步渲染。如果想在值渲染结束后对它进行修改，可以使用 app.$nextTick(callback)</p><blockquote><p><code>app.$nextTick(callback)</code>在下一次更新后才会传入 callback</p></blockquote><h2 id="1-2-VUE-的生命周期"><a href="#1-2-VUE-的生命周期" class="headerlink" title="1.2 VUE 的生命周期"></a>1.2 VUE 的生命周期</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{text}}&lt;/div>'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'beforeCreate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 组件被渲染前执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'beforeMount'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 组件被渲染执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'mounted'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据更新前才会执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据更新才会执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'updated'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// keep-alive触发</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'activated'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'deactivated'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'beforeDestroy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'destroyed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// app.$destroy() // 销毁组件</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// beforeCreate</span><span class="token comment" spellcheck="true">// created</span><span class="token comment" spellcheck="true">// beforeMount</span><span class="token comment" spellcheck="true">// mounted</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// el: '#root', 注释掉这句,发现下面这两句无论如何都会执行</span><span class="token comment" spellcheck="true">// beforeCreate</span><span class="token comment" spellcheck="true">// created</span></code></pre><blockquote><p>由此可以发现，mount 就是把组件生成的 html 内容挂载到 dom 上的过程</p></blockquote><pre class=" language-js"><code class="language-js">beforeCreate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 事件已经ok，响应式数据还没有生成，所以不要修改data里数据，如果ajax异步请求数据，最早也要在create里去做</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token string">'beforeCreate'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token punctuation">}</span><span class="token punctuation">,</span>created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token punctuation">}</span><span class="token punctuation">,</span>beforeMount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 渲染初始化，之后判断是否有template，有的话会解析成 render(h) 函数，之后进行到mounted</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token string">'beforeMount'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&lt;div id="root">&lt;/div></span><span class="token punctuation">}</span><span class="token punctuation">,</span>mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token string">'mounted'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//&lt;div>0&lt;/div></span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><blockquote><p>在服务端渲染的时候只会调用 beforeCreate 和 created。因为 mount 渲染是跟 dom 有关，服务端渲染没有 dom 执行的环境</p></blockquote><blockquote><p>vue 内部还有 renderError()函数。只会在开发环境使用</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'render error'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">renderError</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// render函数出错会调用</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">errorCaptured</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 收集线上错误，如果在根组件定义，会捕捉所有子组件错误</span>  <span class="token comment" spellcheck="true">// 会向上冒泡，并且正式环境可以使用</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-VUE-数据绑定"><a href="#1-3-VUE-数据绑定" class="headerlink" title="1.3 VUE 数据绑定"></a>1.3 VUE 数据绑定</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div v-bind:id="box" v-on:click="handleClick">      &lt;p v-html="html">&lt;/p>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span>    html<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;span>haha&lt;/span>`</span></span><span class="token punctuation">,</span>    box<span class="token punctuation">:</span> <span class="token string">'content'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &lt;div id="content">&lt;p>&lt;span>haha&lt;/span>&lt;/p>&lt;/div></span></code></pre><pre class=" language-js"><code class="language-js">v<span class="token operator">-</span>html <span class="token comment" spellcheck="true">// 绑定html节点要使用v-html，防止注入攻击。</span>v<span class="token operator">-</span>bind <span class="token comment" spellcheck="true">// 绑定动态数据。</span>v<span class="token operator">-</span>on <span class="token comment" spellcheck="true">// 绑定事件。可以简写成 @click</span><span class="token punctuation">:</span><span class="token keyword">class</span> <span class="token comment" spellcheck="true">// 动态绑定class</span></code></pre><p><strong>动态绑定 class</strong></p><pre class=" language-js"><code class="language-js">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;div :class="{ active: isActive }">    &lt;p v-html="html">&lt;/p>  &lt;/div>`</span></span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  isActive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 另一种写法</span>template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;div :class="[isActive ? 'active' : '']">    &lt;p v-html="html">&lt;/p>  &lt;/div>`</span></span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  isActive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第三种写法:对象方式</span>template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;div :class="[{ active: isActive }]">    &lt;p v-html="html">&lt;/p>  &lt;/div>`</span></span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  isActive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p><strong>:style 样式绑定</strong></p><pre class=" language-js"><code class="language-js">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;div    :class="[{ active: isActive }]"    :style="[styles1, styles2]"  >    &lt;p v-html="html">&lt;/p>  &lt;/div>`</span></span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  styles1<span class="token punctuation">:</span> <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> <span class="token string">'red'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  styles2<span class="token punctuation">:</span> <span class="token punctuation">{</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 16px  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-4-computed-计算属性"><a href="#1-4-computed-计算属性" class="headerlink" title="1.4 computed 计算属性"></a>1.4 computed 计算属性</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;p>Name：{{name}}&lt;/p>      &lt;p>Name：{{getName()}}&lt;/p>      &lt;p>&lt;input type="text" v-model="number" />>&lt;/p>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'liu'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'sixin'</span><span class="token punctuation">,</span>    number<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>输入框  每次改变会重新渲染页面，同时会看到 getName 会多次调用，而 computed 里面则会缓存值</p></blockquote><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>尽量不要使用 set，会导致项目逻辑变得很复杂</p></blockquote><h2 id="1-5-watch"><a href="#1-5-watch" class="headerlink" title="1.5 watch"></a>1.5 watch</h2><p>有点类似于 computed</p><blockquote><p>第一次绑定不会执行，只有数据变化才会， 如果需要首次就调用</p></blockquote><pre class=" language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span>newName<span class="token punctuation">,</span> oldName<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> newName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span><span class="token punctuation">,</span>    immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 首次就执行</span>    deep<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 深度监听，对象的属性变化也会被监听，性能开销大</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>watch 有个明显劣势就是监听多个东西就要加多个 handler，并不适用于显示某个数据，用 computed 更好。</p></blockquote><blockquote><p>watch 更多用于监听到数据变化向后台发请求，computed 做不到。具体就是监听到某个数据变化要做某个操作的时候用 watch。</p></blockquote><p>deep 对性能开销比较大，可以修改成字符串形式</p><pre class=" language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'obj.a'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a is changed'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    immediate<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>重点：不要在 computed 和 watch 里修改原来的属性，最好是生成新的**</p></blockquote><h2 id="1-6-VUE-原生指令"><a href="#1-6-VUE-原生指令" class="headerlink" title="1.6 VUE 原生指令"></a>1.6 VUE 原生指令</h2><pre class=" language-js"><code class="language-js">v<span class="token operator">-</span>text  <span class="token comment" spellcheck="true">// 标签里要显示的内容，内容多的话使用数据绑定</span>v<span class="token operator">-</span>htmlv<span class="token operator">-</span>show  <span class="token comment" spellcheck="true">// 相当于display：none</span>v<span class="token operator">-</span><span class="token keyword">if</span>  <span class="token comment" spellcheck="true">// 会增删节点，影响重绘</span>v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span>v<span class="token operator">-</span><span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 对应v-if</span>v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(val, key, index) in obj"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>val<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>data<span class="token punctuation">:</span><span class="token punctuation">{</span>  arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">456</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">789</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>v<span class="token operator">-</span>onv<span class="token operator">-</span>modelv<span class="token operator">-</span>pre   <span class="token comment" spellcheck="true">// 内容不会做任何解析</span>v<span class="token operator">-</span>cloakv<span class="token operator">-</span>once  <span class="token comment" spellcheck="true">// 数据绑定内容只执行一次，节省开销</span></code></pre><blockquote><p>key 值尽量不要用 index 去做，因为数组发生变化后，index 也会跟着变化，可能会导致错误</p></blockquote><p><strong>修饰符</strong></p><pre class=" language-js"><code class="language-js">template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`  &lt;div>    &lt;div>      &lt;input type="text" v-model.number="text" />    &lt;/div>    &lt;div>      &lt;input type="checkbox" :value="1" v-model="arr" />      &lt;input type="checkbox" :value="2" v-model="arr" />      &lt;input type="checkbox" :value="3" v-model="arr" />    &lt;/div>    &lt;div>      &lt;input type="radio" v-model="picked" />      &lt;input type="radio" v-model="picked" />    &lt;/div>  &lt;/div>`</span></span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  text<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  active<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  picked<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span></code></pre><blockquote><p>.number 修饰符，会自动转化为数字</p></blockquote><blockquote><p>.trim 修饰符，会去除空格</p></blockquote><blockquote><p>.lazy 事件修饰符，会增加 change 事件，不加默认是 input</p></blockquote><h1 id="2-VUE-组件"><a href="#2-VUE-组件" class="headerlink" title="2. VUE 组件"></a>2. VUE 组件</h1><h2 id="2-1-组件核心"><a href="#2-1-组件核心" class="headerlink" title="2.1 组件核心"></a>2.1 组件核心</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>component&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'CompOne'</span><span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;comp-one>&lt;/comp-one>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>组件的数据传递</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    active<span class="token punctuation">:</span> Boolean  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;p>&lt;span v-show="active">{{num}}&lt;/span>&lt;/p>      &lt;p>&lt;span>{{num}}&lt;/span>&lt;/p>      &lt;p>&lt;input type="button" @click="hander" value="+" />&lt;/p>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      num<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">hander</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'comp'</span><span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp :active="true">&lt;/comp>      &lt;comp>&lt;/comp>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    active<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    propOne<span class="token punctuation">:</span> String  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;input type="text" v-model="text" />      &lt;p>&lt;span @click=""handleChange>{{propOne}}&lt;/span>&lt;/p>      &lt;p>&lt;span v-show="active">{{text}}&lt;/span>&lt;/p>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'comp'</span><span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp :active="true" :prop-one="prop1" @change="handleChange">&lt;/comp>      &lt;comp :active="false" prop-one="prop2">&lt;/comp>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>prop1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>默认值</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    active<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>require 和 default 二选一即可</p></blockquote><pre class=" language-js"><code class="language-js">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  active<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果指定的是对象，要使用这种方式</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>函数方式校验</strong></p><pre class=" language-js"><code class="language-js">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  active<span class="token punctuation">:</span> <span class="token punctuation">{</span>    validator <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 更严格的校验，去掉type</span>      <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'boolean'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp :active="true" :prop-one="prop1" @change="handleChange">&lt;/comp>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="2-2-extend-组件继承"><a href="#2-2-extend-组件继承" class="headerlink" title="2.2 extend 组件继承"></a>2.2 extend 组件继承</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> CompVue <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">CompVue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span>  propsData<span class="token punctuation">:</span> <span class="token punctuation">{</span>    propOne<span class="token punctuation">:</span> <span class="token string">'xxx'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token string">'haha'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'comp mounted111'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>通过 propsData 拿到值</p></blockquote><blockquote><p>mounted 会在  原组件先被调用，再调用继承组件内的 mounted</p></blockquote><p>另一种方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> component1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> component2 <span class="token operator">=</span> <span class="token punctuation">{</span>  extend<span class="token punctuation">:</span> component<span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'comp2 mounted'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Root</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Root'</span><span class="token punctuation">,</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Comp<span class="token punctuation">:</span> component2  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;comp>&lt;/comp>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'parent'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> component2 <span class="token operator">=</span> <span class="token punctuation">{</span>  extend<span class="token punctuation">:</span> component<span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  parent<span class="token punctuation">:</span> parent<span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'Root'</span><span class="token punctuation">,</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Comp<span class="token punctuation">:</span> component2  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token number">23333</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;span>{{text}}&lt;/span>      &lt;comp>&lt;/comp>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Root</span><span class="token comment" spellcheck="true">// parent</span></code></pre><h2 id="2-3-组件实现自定义双响绑定"><a href="#2-3-组件实现自定义双响绑定" class="headerlink" title="2.3 组件实现自定义双响绑定"></a>2.3 组件实现自定义双响绑定</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;input type="text" @input="handleInput" :value="value" />    &lt;/div>  `</span></span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleInput</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one :value="value" @input="value = arguments[0]">&lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以直接写成 v-model</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;input type="text" @input="handleInput" :value="value" />    &lt;/div>  `</span></span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleInput</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one :value="value" v-model="value">&lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这就是在组件内部实现 v-model 最简单的方式，只需要在一个组件里加上 props，通过事件把这个值 emit 出去，这就实现了双向绑定。</p><blockquote><p>v-model 内部帮我们处理了双响绑定的逻辑</p></blockquote><p>有时候 prop 要处理的值和我们定义的值会冲突，我们不想同时改变，可以这样写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  model<span class="token punctuation">:</span> <span class="token punctuation">{</span>    prop<span class="token punctuation">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span>    event<span class="token punctuation">:</span> <span class="token string">'change'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'value1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;input type="text" @input="handleInput" :value="value1" />    &lt;/div>  `</span></span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleInput</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one :value="value" v-model="value">&lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-4-组件高级属性"><a href="#2-4-组件高级属性" class="headerlink" title="2.4 组件高级属性"></a>2.4 组件高级属性</h2><h3 id="2-4-1-插槽"><a href="#2-4-1-插槽" class="headerlink" title="2.4.1 插槽"></a>2.4.1 插槽</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div :style="style">      &lt;slot>&lt;/slot>    &lt;/divd>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        border<span class="token punctuation">:</span> <span class="token string">'1px solid #aaa'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one>        &lt;span>this is content&lt;/span>      &lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-2-具名插槽"><a href="#2-4-2-具名插槽" class="headerlink" title="2.4.2 具名插槽"></a>2.4.2 具名插槽</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div :style="style">      &lt;div class="header">        &lt;slot name="header">&lt;/slot>      &lt;/div>      &lt;div class="body">        &lt;slot name="body">&lt;/slot>      &lt;/div>    &lt;/divd>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        border<span class="token punctuation">:</span> <span class="token string">'1px solid #aaa'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one>        &lt;span slot="header">this is header&lt;/span>        &lt;span slot="body">this is body&lt;/span>      &lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-3-scoped-slot-作用域插槽"><a href="#2-4-3-scoped-slot-作用域插槽" class="headerlink" title="2.4.3 scoped slot 作用域插槽"></a>2.4.3 scoped slot 作用域插槽</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div :style="style">      &lt;slot value="456">&lt;/slot>    &lt;/divd>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        border<span class="token punctuation">:</span> <span class="token string">'1px solid #aaa'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one>        &lt;span slot-scope="props">{{props.value}}&lt;/span>      &lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同样可以使用 v-bind 方式传值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div :style="style">      &lt;slot :value="value">&lt;/slot>    &lt;/divd>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        border<span class="token punctuation">:</span> <span class="token string">'1px solid #aaa'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token string">'hahaha'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one ref="comp">        &lt;span ref="span" slot-scope="props">{{props.value}} {{value}}&lt;/span>      &lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>comp<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：this.$refs.comp 会打印出组件的实例，可以调用 options。而 this.$refs.span 打印的是 html 节点。</p></blockquote><h3 id="2-4-4-provide-跨级数据联动"><a href="#2-4-4-provide-跨级数据联动" class="headerlink" title="2.4.4 provide 跨级数据联动"></a>2.4.4 provide 跨级数据联动</h3><blockquote><p>子孙组件获取祖先组件的方式使用 provide，跨级数据联动</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> ChildComponent <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>child component: {{value}}&lt;/div>'</span><span class="token punctuation">,</span>  inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'grandParent'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>grandParent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'comp'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ChildComponent  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div :style="style">      &lt;slot :value="value" aaa="111">&lt;/slot>      &lt;child-component />    &lt;/div>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        border<span class="token punctuation">:</span> <span class="token string">'1px solid #aaa'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token string">'component value'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      grandParent<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one>        &lt;span slot-scope="props">{{props.value}}&lt;/span>      &lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>默认 provide 不提供响应式属性，不管父组件怎么变，子组件都不会显示。要想数据能够传递，我们需要自己定义响应式</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> ChildComponent <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>child component: {{data.value}}&lt;/div>'</span><span class="token punctuation">,</span>  inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'grandParent'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>grandParent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'comp'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ChildComponent  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div :style="style">      &lt;slot :value="value" aaa="111">&lt;/slot>      &lt;child-component />    &lt;/div>  `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        border<span class="token punctuation">:</span> <span class="token string">'1px solid #aaa'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token string">'component value'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//指定这方法相当于子组件每次调用value值时实际调用的是get方法，这个方法每次会获取最新的value</span>      <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 可以被读取</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      grandParent<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>      data <span class="token comment" spellcheck="true">//必须作为return的整个object属性返回，如果直接返回data，会直接调用value.get()方法，每次得到的就是一个值，不会进行更新，只有通过data.value去调用的时候每次才会再次调用get方法。</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one>        &lt;span slot-scope="props">{{props.value}}&lt;/span>      &lt;/comp-one>      &lt;input type="text" v-model="value" />    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>官方不推荐这么使用，vue 版本升级可能会改变</p></blockquote><h2 id="2-5-组件的-render-function"><a href="#2-5-组件的-render-function" class="headerlink" title="2.5 组件的 render function"></a>2.5 组件的 render function</h2><h3 id="2-5-1-渲染函数"><a href="#2-5-1-渲染函数" class="headerlink" title="2.5.1 渲染函数"></a>2.5.1 渲染函数</h3><p>template 是字符串，要经过编译转换成 html 节点这个过程。<br>在使用 template 的时候会经过生命周期的一个过程，叫做编译，编译成一个 js 的函数，叫做 render function</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div>      &lt;comp-one>        &lt;span ref="span">{{value}}&lt;/span>      &lt;/comp-one>    &lt;/div>  `</span></span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 也可以写成</span>  <span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'comp'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// template: `</span>  <span class="token comment" spellcheck="true">//   &lt;div :style="style"></span>  <span class="token comment" spellcheck="true">//     &lt;slot>&lt;/slot></span>  <span class="token comment" spellcheck="true">//   &lt;/div></span>  <span class="token comment" spellcheck="true">// `,</span>  <span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>      <span class="token string">'div'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        style<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>style      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>        border<span class="token punctuation">:</span> <span class="token string">'1px solid #aaa'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token string">'component value'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    CompOne<span class="token punctuation">:</span> component  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">'123'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// template: `</span>  <span class="token comment" spellcheck="true">//   &lt;div></span>  <span class="token comment" spellcheck="true">//     &lt;comp-one></span>  <span class="token comment" spellcheck="true">//       &lt;span ref="span">{{value}}&lt;/span></span>  <span class="token comment" spellcheck="true">//     &lt;/comp-one></span>  <span class="token comment" spellcheck="true">//   &lt;/div></span>  <span class="token comment" spellcheck="true">// `,</span>  <span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>      <span class="token string">'comp-one'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        ref<span class="token punctuation">:</span> <span class="token string">'comp'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token function">createElement</span><span class="token punctuation">(</span>          <span class="token string">'span'</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            ref<span class="token punctuation">:</span> <span class="token string">'span'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value        <span class="token punctuation">)</span>      <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>createElement 就是 vue 中虚拟 dom 的概念。创建出来的并不是真正的 dom 节点，而是 vnode 的一个类，vnode 会在内存中存储，会和真正的 dom 进行对比，如果发现需要更新，才会把 vnode 转换成 dom 内容，插入到真正的 dom 中。</p></blockquote><pre class=" language-js"><code class="language-js">render <span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>    <span class="token string">'comp-one'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      ref<span class="token punctuation">:</span> <span class="token string">'comp'</span><span class="token punctuation">,</span>      props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        props1<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value      <span class="token punctuation">}</span><span class="token punctuation">,</span>      on<span class="token punctuation">:</span> <span class="token punctuation">{</span>        click<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        ref<span class="token punctuation">:</span> <span class="token string">'span'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-VUE-核心技术&quot;&gt;&lt;a href=&quot;#1-VUE-核心技术&quot; class=&quot;headerlink&quot; title=&quot;1. VUE 核心技术 &quot;&gt;&lt;/a&gt;1. VUE 核心技术 &lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;node_modules 下 vue
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Vue" scheme="http://coder.liusixin.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>web开发bug&amp;小技巧整理</title>
    <link href="http://coder.liusixin.cn/posts/4b06823/"/>
    <id>http://coder.liusixin.cn/posts/4b06823/</id>
    <published>2017-09-21T12:12:53.000Z</published>
    <updated>2017-09-25T05:33:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html-页面写-IE-hack"><a href="#html-页面写-IE-hack" class="headerlink" title="html 页面写 IE hack"></a>html 页面写 IE hack</h2><blockquote><p>详细说明资料的请参看网址：<a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.cnblogs.com%2Fxwwin%2Fp%2F6962263.html" rel="external nofollow noopener noreferrer" target="_blank">关于 IE 的一些 hack - ！win ！ - 博客园</a></p></blockquote><p>ie 的条件语句常用的有几下几种（所有条件注释语句在非 IE 浏览器下都是普通的注释，不要用非 ie 去给非 IE 的浏览执行操作）：</p><ul><li>lt ：就是 Less than 的简写，也就是小于的意思。</li><li>lte ：就是 Less than or equal to 的简写，也就是小于或等于的意思。</li><li>gt ：就是 Greater than 的简写，也就是大于的意思。</li><li>gte：就是 Greater than or equal to 的简写，也就是大于或等于的意思。</li><li>!：就是不等于的意思，跟 javascript 里的不等于判断符相同。</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--[if IE]>    只有IE才支持&lt;![endif]--></span><span class="token comment" spellcheck="true">&lt;!--[if !IE 7]>    IE7不支持&lt;![endif]--></span><span class="token comment" spellcheck="true">&lt;!--[if lt IE 8]>    IE8以下浏览器才支持&lt;![endif]--></span><span class="token comment" spellcheck="true">&lt;!--[if lte IE 8]>    IE8及以下浏览器才支持&lt;![endif]--></span><span class="token comment" spellcheck="true">&lt;!--[if gt IE 8]>    IE8以上浏览器才支持&lt;![endif]--></span><span class="token comment" spellcheck="true">&lt;!--[if gte IE 8]>    IE8及以上浏览器才支持&lt;![endif]--></span><span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>    IE9 以下&lt;![endif]--></span></code></pre><h2 id="iOS-端页面中做弹窗，当弹窗弹出时会出现一个：上下滑动时影响到弹窗下面的内容也就是-container-内容的滚动条"><a href="#iOS-端页面中做弹窗，当弹窗弹出时会出现一个：上下滑动时影响到弹窗下面的内容也就是-container-内容的滚动条" class="headerlink" title="iOS 端页面中做弹窗，当弹窗弹出时会出现一个：上下滑动时影响到弹窗下面的内容也就是 container 内容的滚动条"></a>iOS 端页面中做弹窗，当弹窗弹出时会出现一个：上下滑动时影响到弹窗下面的内容也就是 container 内容的滚动条</h2><ul><li>在 layout css 全局中新增一个类名样式</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 弹窗专用 禁止滚轮 滚动*/</span><span class="token selector"><span class="token class">.scrollnone</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">640</span>px<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//公用的手机端处理 iOS 弹窗 bug</span><span class="token keyword">this</span><span class="token punctuation">.</span>ioslayopenpopup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body,html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'scrollnone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _me<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公用的手机端处理 iOS 弹窗 bug</span><span class="token keyword">this</span><span class="token punctuation">.</span>ioslayclosepopup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body,html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'scrollnone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _me<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//公用的关闭弹窗</span><span class="token keyword">this</span><span class="token punctuation">.</span>closelaypopup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#lay-popup-bg,.lay-popup'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _me<span class="token punctuation">.</span><span class="token function">ioslayclosepopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _me<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开报名弹窗</span><span class="token keyword">this</span><span class="token punctuation">.</span>openlaypopup0 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  _me<span class="token punctuation">.</span><span class="token function">closelaypopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#lay-popup-bg,.lay-popup0'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _me<span class="token punctuation">.</span><span class="token function">ioslayopenpopup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _me<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="手机端使用的一些全局的样式代码片段"><a href="#手机端使用的一些全局的样式代码片段" class="headerlink" title="手机端使用的一些全局的样式代码片段"></a>手机端使用的一些全局的样式代码片段</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*文本单行溢出隐藏*/</span><span class="token selector"><span class="token class">.txtoneline</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*文本多行溢出隐藏  -webkit-line-clamp: 2; 溢出行数*/</span><span class="token selector"><span class="token class">.txtmorline</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 公用限制最大最小宽，且居中显示类名 */</span><span class="token selector"><span class="token class">.limitcen</span> </span><span class="token punctuation">{</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">640</span>px<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 公用完美居中样式 */</span><span class="token selector"><span class="token class">.perfectcen</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span>vw / <span class="token number">3.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 对浏览器兼容性要求较高 CSS3 属性 */</span><span class="token selector">html,body </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Helvetica Neue'</span>, Helvetica, Arial, <span class="token string">'PingFang SC'</span>,    <span class="token string">'Hiragino Sans GB'</span>, <span class="token string">'Heiti SC'</span>, <span class="token string">'Microsoft YaHei'</span>, <span class="token string">'WenQuanYi Micro Hei'</span>,    sans-serif<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f3f3f3</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-moz-text-size-adjust</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-ms-text-size-adjust</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">text-size-adjust</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">640</span>px<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 取消链接高亮 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*清除浮动*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*IE6/7*/</span><span class="token comment" spellcheck="true">/*表单元素统一初始化样式*/</span><span class="token selector">input,select,button </span><span class="token punctuation">{</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> microsoft yahei<span class="token punctuation">;</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*去除阴影*/</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.checkbox</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> checkbox<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input<span class="token attribute">[type='checkbox']</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> checkbox<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">select </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url('/Images/share/icon-select-arrow.png')</span> no-repeat scroll right    center transparent<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">0.14</span>rem <span class="token number">0.08</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*input palceholder 样式自定义*/</span><span class="token selector">input<span class="token pseudo-element">::-webkit-input-placeholder</span>,textarea<span class="token pseudo-element">::-webkit-input-placeholder</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 使用webkit内核的浏览器 */</span><span class="token selector">input<span class="token pseudo-class">:-moz-placeholder</span>,textarea<span class="token pseudo-element">::-webkit-input-placeholder</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* Firefox版本4-18 */</span><span class="token selector">input<span class="token pseudo-element">::-moz-placeholder</span>,textarea<span class="token pseudo-element">::-webkit-input-placeholder</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* Firefox版本19+ */</span><span class="token selector">input<span class="token pseudo-class">:-ms-input-placeholder</span>,textarea<span class="token pseudo-element">::-webkit-input-placeholder</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="PC-端滚动条样式自定义代码片段"><a href="#PC-端滚动条样式自定义代码片段" class="headerlink" title="PC 端滚动条样式自定义代码片段"></a>PC 端滚动条样式自定义代码片段</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*自定义滚动条样式*/</span><span class="token selector"><span class="token class">.common-scrollbar</span><span class="token pseudo-element">::-webkit-scrollbar</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.common-scrollbar</span><span class="token pseudo-element">::-webkit-scrollbar-thumb</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="HTML5-中的-data-属性和-jQuery-中的-data-方法使用"><a href="#HTML5-中的-data-属性和-jQuery-中的-data-方法使用" class="headerlink" title="HTML5 中的 data-*属性和 jQuery 中的.data()方法使用"></a>HTML5 中的 data-*属性和 jQuery 中的.data()方法使用</h2><blockquote><p>参考文章链接：<a href="http://blog.csdn.net/fly_zxy/article/details/50687691" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/fly_zxy/article/details/50687691</a></p></blockquote><blockquote><p>参考 demo 链接：<a href="https://codepen.io/voronianski/pen/aicwk?q=Typewriter&amp;limit=all&amp;type=type-pens" rel="external nofollow noopener noreferrer" target="_blank">https://codepen.io/voronianski/pen/aicwk?q=Typewriter&amp;limit=all&amp;type=type-pens</a></p></blockquote><p><strong>HTML5 中的 data-*属性</strong></p><p>我们往往会根据需要在 HTML 标记上添加自定义的属性来存储和操作数据，我们自定义的属性名字也千奇百怪，五花八门。我们可以通过原生的 getAttribute()或 jQuery 中的.attr()来获取我们自定义的属性。但是前端技术在向着规范化前进。HTML5 标准规定，自定义的属性都已 data—*开头，这样就区分开了固有属性和自定义属性。HTML5 代码示例如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>data-* 在 HTML5 和 jQ 中的用法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>你好<span class="token punctuation">"</span></span> <span class="token attr-name">data-english-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">data-Age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// JS 的写法</span>    <span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> dataObject <span class="token operator">=</span> element<span class="token punctuation">.</span>dataset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取到的是一个键值对的对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//DOMStringMap {name: "你好", englishName: "hello", age: "26"}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> dataObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遍历对象的键与值</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//name     englishName     age</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//你好       hello       26</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>在获取自定义属性的值时，使用<code>dataset</code>属性，然后通过自定义属性<code>data-name</code>的名称去掉<code>data</code>如：<code>dataObject[name]去</code>获取值。<code>dataset</code>是 JS5 规范中新增加的属性，用于和<code>data-*</code>配合使用。</p></blockquote><p>需要注意的是：</p><ul><li>如果<code>data-</code>后面包含了“-”，例如 <code>english-name</code>，”-“会被去掉，自动的转换成为骆驼峰式的命名 englishName。这是因为 JSON Object 的 key 不能包含”-“。</li><li>如果 data-后面的单词有大写，例如 Age，将会转存成小写 age。</li><li>如果你想删除一个 data-*属性，请使用 <code>delete dataset.name</code>或者<code>dataset.name=null</code>;</li><li>data-*属性看起来很好，但是不幸的是只有在 Chrome 8+ Firefox(Gecko) 6.0+ Internet Explorer 11+ Opera 11.10+ Safari 6+的浏览器中实现了此标准。如果你需要兼容各主流浏览器的不同版本建议还是使用原生的<code>getAttribute()</code>或 jQuery 中的<code>.attr()</code>。</li></ul><p><strong>jQuery 中的.data()</strong></p><blockquote><p>jQuery 中的.data()方法作用：在 jQuery 对象对应的 DOM 元素上获取或存放 key-value 对。我们可以通过 html5 的 data-属性在元素上存取数据，在 jQuery 也可以通过 data()来实现。data()方法有多个重载，传递一个参数是获取 value 值，传递两个参数是存储或覆盖已存在的值，传递一个 JSON Object 是在元素上存储或覆盖已存在的多个 key-value 对。如果通过 data() 在元素上存储 key-value，value 可以是一个对象，而不是像 data-只能存储一个字符串的 value。下面给出一个综合示例：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>data-* 在 HTML5 和 jQ 中的用法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>你好<span class="token punctuation">"</span></span> <span class="token attr-name">data-english-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">data-Age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//jQ 写法</span>    <span class="token keyword">var</span> element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> dataObject <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取到的是一个键值对的对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{age: 26, englishName: "hello", name: "你好"}  这个输出的整个的结构和上面的是一样的  但是顺序是相反的 从后往前</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>dataObject<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遍历对象的键与值</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//age      englishName     name</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//26     hello       你好</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//r.fn.init [Number]       r.fn.init(9) ["x", "i", "a", "o", "c", "h", "u", "a", "n"]      r.fn.init(2) ["你", "好"]</span>      element<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token operator">+</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改 value</span>      <span class="token comment" spellcheck="true">// element.removeData(key);//删除属性的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{age: "261", englishName: "hello1", name: "你好1"}  修改后的对象  但是这个修改并不会影响页面中的属性的值  只是在 jq 中可以调用</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><code>.data()</code>可以获取通过 data-属性存储的值。<br>通过<code>.data()</code>修改 data-属性的值不会显示在 HTML 标记中，我们只是通过<code>.data()</code>在元素存储了一个新值。<br><code>.removeData()</code>也不能删除通过 data-*存储的真正的页面上的数据。由于 jQuery 是一个通用的 JS 框架，对浏览器兼容性做的非常好，大多数情况，我们应该通过<code>.data()</code>在元素上存取数据(有一个好处是可以存储一个对象)。</p></blockquote><blockquote><p>jQ 官网 API 示例：<a href="http://api.jquery.com/jquery.data/" rel="external nofollow noopener noreferrer" target="_blank">http://api.jquery.com/jquery.data/</a></p></blockquote><h2 id="css-实现简单的关闭按钮"><a href="#css-实现简单的关闭按钮" class="headerlink" title="css 实现简单的关闭按钮"></a>css 实现简单的关闭按钮</h2><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/*css 实现关闭叉号*/</span><span class="token selector">.css-close-btn(<span class="token variable">@width</span>: 30px, <span class="token variable">@height</span>: 30px, <span class="token variable">@bgcolor</span>: <span class="token variable">@colorwhite</span>, <span class="token variable">@linewidth</span>: 30px, <span class="token variable">@lineheight</span>: 30px, <span class="token variable">@linebgcolor</span>: <span class="token variable">@colorwhite</span>)</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@bgcolor</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span>  <span class="token selector">&amp;:before</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@linewidth</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@lineheight</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@linebgcolor</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@linewidth</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@lineheight</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@linebgcolor</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*具体的引用实现*/</span><span class="token selector">.rule__close-btn</span> <span class="token punctuation">{</span>  <span class="token mixin-usage function">.css-close-btn</span><span class="token punctuation">(</span>    <span class="token number">42</span> <span class="token operator">/</span> <span class="token variable">@layremvalue</span><span class="token punctuation">,</span>    <span class="token number">42</span> <span class="token operator">/</span> <span class="token variable">@layremvalue</span><span class="token punctuation">,</span>    <span class="token hexcode">#ddd</span><span class="token punctuation">,</span>    <span class="token number">18</span> <span class="token operator">/</span> <span class="token variable">@layremvalue</span><span class="token punctuation">,</span>    <span class="token number">2</span> <span class="token operator">/</span> <span class="token variable">@layremvalue</span><span class="token punctuation">,</span>    <span class="token variable">@colorwhite</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">/</span> <span class="token variable">@layremvalue</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">26</span> <span class="token operator">/</span> <span class="token variable">@layremvalue</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-bfa54192cfd0c6f2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="在手机端上自定义的一些可公用的-less-变量"><a href="#在手机端上自定义的一些可公用的-less-变量" class="headerlink" title="在手机端上自定义的一些可公用的 less 变量"></a>在手机端上自定义的一些可公用的 less 变量</h2><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/*配合 js 计算的 rem 使用具体换算设计稿的 20px = 20 / @layremvalue*/</span><span class="token variable">@layremvalue<span class="token punctuation">:</span></span> <span class="token number">100</span>rem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*flex 垂直居中布局*/</span><span class="token selector">.flex(<span class="token variable">@align</span>: center)</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>flex<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*y轴对齐方式 可传参*/</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> <span class="token variable">@align</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*x轴对齐方式*/</span>  <span class="token comment" spellcheck="true">/*justify-content:center;*/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*换行，第一行在上方*/</span><span class="token selector">.flex_wrap</span> <span class="token punctuation">{</span>  <span class="token property">-ms-flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token property">-webkit-flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*transform: translateZ(0); 开启动画硬件加速*/</span><span class="token selector">.openanimatequick</span> <span class="token punctuation">{</span>  <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*修复卡顿*/</span>  <span class="token property">-moz-backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*背景渐变 线性渐变  由下到上 可传色值参数*/</span><span class="token selector">.bggradient-bot-top(<span class="token variable">@colorstart</span>, <span class="token variable">@colorend</span>)</span> <span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-ms-linear-gradient</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> <span class="token variable">@colorstart</span><span class="token punctuation">,</span> <span class="token variable">@colorend</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-moz-linear-gradient</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> <span class="token variable">@colorstart</span><span class="token punctuation">,</span> <span class="token variable">@colorend</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-gradient</span><span class="token punctuation">(</span>    linear<span class="token punctuation">,</span>    bottom<span class="token punctuation">,</span>    top<span class="token punctuation">,</span>    <span class="token function">from</span><span class="token punctuation">(</span><span class="token variable">@colorstart</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">to</span><span class="token punctuation">(</span><span class="token hexcode">#872ccf</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> <span class="token variable">@colorstart</span><span class="token punctuation">,</span> <span class="token variable">@colorend</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-o-linear-gradient</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> <span class="token variable">@colorstart</span><span class="token punctuation">,</span> <span class="token variable">@colorend</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">@colorstart</span><span class="token punctuation">,</span> <span class="token variable">@colorend</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*内边框 用阴影实现*/</span><span class="token selector">.shadow-inset(<span class="token variable">@width</span>: 1px, <span class="token variable">@color</span>: <span class="token variable">@coloryellow1</span>, <span class="token variable">@style</span>: inset)</span> <span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token variable">@width</span> <span class="token variable">@color</span> <span class="token variable">@style</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="手机端的-rem-具体实现方法：将下面的-js-片段放置于-lt-head-gt-lt-head-gt-标签内部，确保页面加载时优先计算这部分的-js-否则会出现闪屏的-bug"><a href="#手机端的-rem-具体实现方法：将下面的-js-片段放置于-lt-head-gt-lt-head-gt-标签内部，确保页面加载时优先计算这部分的-js-否则会出现闪屏的-bug" class="headerlink" title="手机端的 rem 具体实现方法：将下面的 js 片段放置于 &lt;head&gt;&lt;/head&gt; 标签内部，确保页面加载时优先计算这部分的 js 否则会出现闪屏的 bug"></a>手机端的 rem 具体实现方法：将下面的 js 片段放置于 <code>&lt;head&gt;&lt;/head&gt;</code> 标签内部，确保页面加载时优先计算这部分的 js 否则会出现闪屏的 bug</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//初始化 html fontSize 值</span><span class="token comment" spellcheck="true">//设计稿 720</span><span class="token comment" spellcheck="true">//除以7.2 这里是以iphone6 的宽度375px为标准，为了保证html的字体大小为100px。这样我们在换算的时候，1px 就是0.01rem，就很容易计算。（设计稿是 750 w，实际是 720 所以 除以7.2）</span><span class="token keyword">function</span> <span class="token function">calcHtmlFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> htmlEle <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>  <span class="token keyword">var</span> htmlWidth <span class="token operator">=</span>    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span>    window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span>    window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//console.log(htmlWidth);</span>  <span class="token comment" spellcheck="true">//强制改变可视区域的宽度 页面最宽为 640 最窄为320</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>htmlWidth <span class="token operator">></span> <span class="token number">640</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    htmlWidth <span class="token operator">=</span> <span class="token number">640</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>htmlWidth <span class="token operator">&lt;</span> <span class="token number">320</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    htmlWidth <span class="token operator">=</span> <span class="token number">320</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//console.log(htmlWidth);</span>  htmlEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> htmlWidth <span class="token operator">/</span> <span class="token number">7.2</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">calcHtmlFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">calcHtmlFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="PC-端常用的右侧固定定位的导航条-css-和-js-配合实现"><a href="#PC-端常用的右侧固定定位的导航条-css-和-js-配合实现" class="headerlink" title="PC 端常用的右侧固定定位的导航条 css 和 js 配合实现"></a>PC 端常用的右侧固定定位的导航条 css 和 js 配合实现</h2><p><strong>less</strong></p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/*活动页面专用右侧固定定位导航  参数的数值可以在引用时随意的修改*/</span><span class="token number">.</span>activity<span class="token operator">-</span>fixed__<span class="token function">nav</span><span class="token punctuation">(</span><span class="token atrule">@width<span class="token punctuation">:</span> @px120, @height<span class="token punctuation">:</span> @px400, @backgroundColor<span class="token punctuation">:</span> @coloryellow4, @marginRight<span class="token punctuation">:</span> -<span class="token punctuation">(</span>600 + @width<span class="token punctuation">)</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token mixin-usage function">.openanimatequick</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.box-style</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto <span class="token variable">@marginRight</span> auto auto<span class="token punctuation">;</span>  <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span>s<span class="token punctuation">;</span>  <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span>s<span class="token punctuation">;</span>  <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span>s<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span>s<span class="token punctuation">;</span>  <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@backgroundColor</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*具体的引用实现*/</span><span class="token selector">.fixed__nav</span> <span class="token punctuation">{</span>  <span class="token mixin-usage function">.activity-fixed__nav</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>js</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//滚轮滚动事件</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> targetTop <span class="token operator">=</span> _this<span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//活动页面专用右侧固定定位导航 动画</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>targetTop <span class="token operator">></span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">600</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#fixed__nav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      transform<span class="token punctuation">:</span> <span class="token string">'scale(1)'</span><span class="token punctuation">,</span>      <span class="token string">'-ms-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(1)'</span><span class="token punctuation">,</span>      <span class="token string">'-moz-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(1)'</span><span class="token punctuation">,</span>      <span class="token string">'-webkit-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(1)'</span><span class="token punctuation">,</span>      <span class="token string">'-o-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(1)'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#fixed__nav'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      transform<span class="token punctuation">:</span> <span class="token string">'scale(0)'</span><span class="token punctuation">,</span>      <span class="token string">'-ms-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(0)'</span><span class="token punctuation">,</span>      <span class="token string">'-moz-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(0)'</span><span class="token punctuation">,</span>      <span class="token string">'-webkit-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(0)'</span><span class="token punctuation">,</span>      <span class="token string">'-o-transform'</span><span class="token punctuation">:</span> <span class="token string">'scale(0)'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="向上的三角形-less"><a href="#向上的三角形-less" class="headerlink" title="向上的三角形 less"></a>向上的三角形 less</h2><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/*向上三角形可传参数*/</span><span class="token selector">.triangle-top(<span class="token variable">@size</span>: <span class="token variable">@px5</span>, <span class="token variable">@color</span>: <span class="token variable">@colorwhite</span>)</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token variable">@size</span><span class="token punctuation">;</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent <span class="token variable">@color</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*具体的引用实现*/</span><span class="token selector">&amp;:before</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token mixin-usage function">.triangle-top</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token variable">@px7</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token variable">@px13</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="全屏-canvas-不能被选中"><a href="#全屏-canvas-不能被选中" class="headerlink" title="全屏 canvas 不能被选中"></a>全屏 canvas 不能被选中</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*全屏 canvas 不能被选中*/</span><span class="token selector"><span class="token class">.full-canvas</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">;</span>  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;html-页面写-IE-hack&quot;&gt;&lt;a href=&quot;#html-页面写-IE-hack&quot; class=&quot;headerlink&quot; title=&quot;html 页面写 IE hack&quot;&gt;&lt;/a&gt;html 页面写 IE hack&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;详
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>webpack实践--多页面应用</title>
    <link href="http://coder.liusixin.cn/posts/105e749d/"/>
    <id>http://coder.liusixin.cn/posts/105e749d/</id>
    <published>2017-09-17T12:10:26.000Z</published>
    <updated>2017-09-18T09:40:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>要实现多页面应用 web 我们需要注意几点，首先我们要明白多页应用：</p><ul><li>多入口 entry</li><li>多页面 html</li><li>每个页面不同的 chunk</li><li>每个页面不同的参数</li></ul><p><strong>实现多页面有两种方式</strong></p><ul><li>多配置(webpack3.1.0)<ul><li>parallel-webpack</li></ul></li><li>单配置</li></ul><p><strong>多配置</strong></p><ul><li>优点<ul><li>可以使用 parallel-webpack 来提高打包速度</li><li>配置更加独立，灵活</li></ul></li><li>缺点<ul><li>不能多页面之间共享代码(不能提取公用代码)</li></ul></li></ul><p><strong>单配置</strong></p><ul><li>优点<ul><li>共享各个 entry 之间的公用代码</li></ul></li><li>缺点<ul><li>打包速度比较慢</li><li>输出的内容比较复杂</li></ul></li></ul><p><strong>多页面多配置</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// parallel-webpack并行处理</span>parallel<span class="token operator">-</span>webpackparallel<span class="token operator">-</span>webpack <span class="token operator">--</span>watchparallel<span class="token operator">-</span>webpack <span class="token operator">--</span>config</code></pre><p><strong>以下面项目结构为例</strong></p><pre><code>├── src│   ├── components│   │   └── module.js│   ├── css│   │   ├── a.css│   │   ├── b.css│   │   └── c.css│   ├── pages│   │   ├── a.js│   │   ├── b.js│   │   └── c.js│   └── index.html├── webpack.config.js├── package.json└── README.md</code></pre><p><strong>基本配置</strong></p><p>同时每个页面都引入了 react 公共模块</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CleanWebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    react<span class="token punctuation">:</span> <span class="token string">'react'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'js/[name].[chunkhash].js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpack</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">'react'</span><span class="token punctuation">,</span>      minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>我们把多页面配置抽离出来封装</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> generatePage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  title <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>  entry <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>  template <span class="token operator">=</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>  name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>  chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        chunks<span class="token punctuation">,</span>        template<span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> name <span class="token operator">+</span> <span class="token string">'.html'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> pages <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token function">generatePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'page a'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> <span class="token string">'./src/pages/a'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">generatePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'page b'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>      b<span class="token punctuation">:</span> <span class="token string">'./src/pages/b'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>    chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">generatePage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'page c'</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>      c<span class="token punctuation">:</span> <span class="token string">'./src/pages/c'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> pages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>page <span class="token operator">=</span><span class="token operator">></span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>同时再抽离 css 模块</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> ExtractTextWebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        text<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> ExtractTextWebpack<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          fallback<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          use<span class="token punctuation">:</span> <span class="token string">'css-loader'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextWebpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/[name].[hash].css'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>打包之后可以看到 dist 目录下，css，js，html 都已经划分好，但是会发现 react 模块被生成多次<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180519-173532-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>这里可以使用 parallel-webpack 并行打包提升打包速度。如果是在全局安装的，可以直接调用 parallel-webpack 进行打包，如果是局部安装，我们需要在 node_modules 里找到 parallel-webpack 调用</p><pre class=" language-bash"><code class="language-bash">node_modules/parallel-webpack/bin/run.js</code></pre><p><strong>多页面单配置</strong></p><p>我们只需要在多配置基础上稍作修改</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> pages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>page <span class="token operator">=</span><span class="token operator">></span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 改为</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span>baseConfig<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这样我们就把所有配置都 merge 到一个配置里做打包<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180519-175517-2x-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>从打包结果可以很清晰的看到，react 模块只打了一个包，但是在 html 中我们发现 title 属性并没有  传过去。HtmlWebpackPlugin 默认使用 ejs 模板语法传参,我们修改下 html</p><pre class=" language-html"><code class="language-html">// inex.html<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= htmlWebpackPlugin.options.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这样参数就可以传过去了。以上就是 webpack 多页应用的配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要实现多页面应用 web 我们需要注意几点，首先我们要明白多页应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多入口 entry&lt;/li&gt;
&lt;li&gt;多页面 html&lt;/li&gt;
&lt;li&gt;每个页面不同的 chunk&lt;/li&gt;
&lt;li&gt;每个页面不同的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;stro
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="webpack" scheme="http://coder.liusixin.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>web高性能动画及渲染原理</title>
    <link href="http://coder.liusixin.cn/posts/129b39a1/"/>
    <id>http://coder.liusixin.cn/posts/129b39a1/</id>
    <published>2017-09-13T08:03:18.000Z</published>
    <updated>2017-09-13T08:03:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如何实现动画？</strong></p><ul><li>jQuery animation:setTimeout，top/left</li><li>animatin，transition，transform</li><li>javascript+canvas/webGL/SVG</li><li>requestAnimationFrame</li><li>GPU acceleration（硬件加速）</li></ul><h2 id="webkit-的渲染流程"><a href="#webkit-的渲染流程" class="headerlink" title="webkit 的渲染流程"></a>webkit 的渲染流程</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-18de38a5271683bc.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-75bd2b44f4b3aa52.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="浏览器渲染小结"><a href="#浏览器渲染小结" class="headerlink" title="浏览器渲染小结"></a>浏览器渲染小结</h3><ul><li>渲染三个阶段： Layout，Paint，Composite Layers</li><li>修改不同 CSS 属性会触发不同阶段</li><li>触发的阶段越前，渲染的代价越高</li></ul><h2 id="硬件加速（GPU-加速）"><a href="#硬件加速（GPU-加速）" class="headerlink" title="硬件加速（GPU 加速）"></a>硬件加速（GPU 加速）</h2><ul><li>Texture，即 GPU 传输到 GPU 的一个 Bitmap</li><li><p>GPU 能快速对 texture 进行偏移、缩放、旋转、修改透明度等操作<br><img src="http://cdn-blog.liusixin.cn/9064121-40acc62402530af5.png" alt=""></p></li><li><p>相同之处：两者都有总线和外界联系，有自己缓存体系，以及数字和逻辑运算单元。一句话，两者都为了完成计算任务而设计。</p></li><li>不同之处：CPU 主要负责操作系统和应用程序，GPU 主要负责跟显示相关的数据处理，GPU 的活 CPU 一般都可以干，但是效率低下</li></ul><h2 id="Layer-模型"><a href="#Layer-模型" class="headerlink" title="Layer 模型"></a>Layer 模型</h2><ul><li>浏览器根据 CSS 属性为元素生成 Layers</li><li>将 Layers 作为 texture 上传到 GPU</li><li>当改变 Layer 的 transform,opacity 属性时，渲染会跳过 Layout，paint，直接通知 GPU 对 Layer 做变换。</li></ul><h3 id="Layer-创建标准"><a href="#Layer-创建标准" class="headerlink" title="Layer 创建标准"></a>Layer 创建标准</h3><ul><li>拥有 3d transform 属性</li><li>使用 animation，transition 实现 opacity，transform 的动画</li><li>video</li><li>canvas</li><li>Flash</li><li>使用 CSS filters 的元素</li><li>z-index 大于某个相邻节点的 Layer 的元素</li></ul><h3 id="为什么使用硬件加速快呢？"><a href="#为什么使用硬件加速快呢？" class="headerlink" title="为什么使用硬件加速快呢？"></a>为什么使用硬件加速快呢？</h3><ul><li>如果使用 jquery 或者 js 来做一个 top 移动 100px 的动画，每次都会重主线程发传到合成器线程</li><li>但是，如果用 GPU transform 来做的话，主线程只会传一次到合成器线程，其余任务全部是在合成器线程，所以效率比较高。</li></ul><h3 id="节省了哪些时间？"><a href="#节省了哪些时间？" class="headerlink" title="节省了哪些时间？"></a>节省了哪些时间？</h3><ul><li>CPU 进行 Layout 和 paint 的时间</li><li>CPU 向 GPU 传输位图的时间</li></ul><h3 id="完美的-Animation"><a href="#完美的-Animation" class="headerlink" title="完美的 Animation"></a>完美的 Animation</h3><p>对眼睛来说：60FPS 更舒服更完美，约等于 16.7ms 内，我们准备好一帧的动画</p><ul><li>开始绘制的时间</li><li>绘制一帧的时间<ol><li><code>setTimeout(callback,1/60)</code> 依靠浏览器内置时钟更新频率，eg、IE8 及以前更新间隔为 15.6，<code>setTimeout</code> 16.7，它需要两个 15.6ms 触发。超过 14.5ms，所以会出现丢帧的现象<br>main thread 队列</li><li><code>requestAnimationFrame</code> - 定义绘制每一帧的工作<code>requestAnimationFrame(callback)</code></li></ol></li><li>自动调节频率 ，callback 工作太多无法再一帧内完成，会自动降低为 30fps，虽然频率降低但比丢帧好。</li></ul><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p><strong>触发 Layout</strong></p><ul><li>改变 widht,height 等和大小、位置相关的属性</li><li>读取 size、positoin 相关的属性<br><img src="http://cdn-blog.liusixin.cn/9064121-a3a953300f886256.png" alt=""></li></ul><p><strong>尽量不触发 Layout，使用 transform 代替 top，left 的动画。</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-03cb2f4c3e294355.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-e2d1cf0d7649b954.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>但是，如果是这样</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-5b56edf42ddf35e6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以这样改</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-e881c603a80f25f1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>介绍一个库</p><p><strong><a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fwilsonpage%2Ffastdom" rel="external nofollow noopener noreferrer" target="_blank">fastdom.js</a></strong></p><p>在每一帧，先将读操作批量运行，在批量运行写操作</p><h3 id="Layout-小结"><a href="#Layout-小结" class="headerlink" title="Layout 小结"></a>Layout 小结</h3><ul><li>不但改变 css 可能导致 Layout，读取位置大小相关属性也会导致 Layout（滚动条也会导致 Layout）</li><li>分离读写，减少 Layout</li><li>面对解耦代码，可以使用 rAF 推迟的方法分离读写</li></ul><h2 id="如何开发不会导致重拍"><a href="#如何开发不会导致重拍" class="headerlink" title="如何开发不会导致重拍"></a>如何开发不会导致重拍</h2><ul><li>样式表越简单，重拍和重汇越快</li><li>重拍和重绘的 DOM 元素层级越高，成本就越高</li><li>table 元素的重排和重绘成本，要高于 div 元素</li><li>尽量不要把读操作和写操作，放在一个语句里</li><li>统一改变样式</li><li>缓存重排结果</li><li>离线 DOM Fragment/clone</li><li>虚拟 DOM React</li><li>必要的时候 display:none 不可见元素不影响重排重绘。</li><li>visibility 对重排影响不影响重绘</li></ul><h2 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a>Paint</h2><h3 id="触发-paint"><a href="#触发-paint" class="headerlink" title="触发 paint"></a>触发 paint</h3><ul><li>当修改 border-radius,box-shadow,color 等展示相关属性，会触发 paint</li></ul><h3 id="paint-的代价"><a href="#paint-的代价" class="headerlink" title="paint 的代价"></a>paint 的代价</h3><ul><li>continuous painting mode</li><li>paint prefiler</li><li>在经常 paint 的区域，要避免代价太高的 style（比如不要的 gif 图设置 display:none）</li></ul><h3 id="减少不必的绘制"><a href="#减少不必的绘制" class="headerlink" title="减少不必的绘制"></a>减少不必的绘制</h3><ul><li>gif 图即使被其他 Layout 盖住不可见，也可能导致 paint，不需要时应将 gif 图的 display 属性设为 none。轮播图也一样 <a href="https://link.jianshu.com/?t=http%3A%2F%2Fjsbin.com%2Fdizak%2F3%2Fedit%3Fhtml%2Ccss%2Coutput" rel="external nofollow noopener noreferrer" target="_blank">http://jsbin.com/dizak/3/edit?html,css,output</a> (可以用调试工具去测试性能，z-index:0,也会重排重绘，应该直接设置 display:none)</li><li>减少绘制区域，为引起大范围 Paint 的元素生成独立的 Layout 以减小 Paint 的范围</li></ul><h3 id="Paint-小结"><a href="#Paint-小结" class="headerlink" title="Paint 小结"></a>Paint 小结</h3><ul><li>简化绘制的复杂度</li><li>避免不必要的绘制</li><li>减少绘制区域</li></ul><h3 id="composite-Layout"><a href="#composite-Layout" class="headerlink" title="composite Layout"></a>composite Layout</h3><ul><li>GPU 也是有限度的，不要滥用 GPU 资源生成不必要的 Layout</li><li>留意以外生成的 Layout</li></ul><blockquote><p>国外一个关于高性能动画研究: <a href="https://link.jianshu.com/?t=http%3A%2F%2Fjankfree.org%2F" rel="external nofollow noopener noreferrer" target="_blank">https://link.jianshu.com/?t=http%3A%2F%2Fjankfree.org%2F</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;如何实现动画？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jQuery animation:setTimeout，top/left&lt;/li&gt;
&lt;li&gt;animatin，transition，transform&lt;/li&gt;
&lt;li&gt;javascript+can
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
      <category term="动画" scheme="http://coder.liusixin.cn/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="webkit" scheme="http://coder.liusixin.cn/tags/webkit/"/>
    
  </entry>
  
  <entry>
    <title>CSS 网页布局--圣杯布局、双飞翼布局</title>
    <link href="http://coder.liusixin.cn/posts/ba1040d2/"/>
    <id>http://coder.liusixin.cn/posts/ba1040d2/</id>
    <published>2017-09-12T13:10:39.000Z</published>
    <updated>2017-09-12T13:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-基础布局"><a href="#CSS-基础布局" class="headerlink" title="CSS 基础布局"></a>CSS 基础布局</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-88de004d4699c4a1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-842cd76fe8259fa6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>layout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.con</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">980</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.left</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.right</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">10%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.fx</span> </span><span class="token punctuation">{</span>      <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      我是header    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 如果是中间的内容比较重要的话需要放到前面这样在渲染时先渲染出来  这样的话就需要在 浮动同级的最后面加上一个 div.fx 清除浮动了 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        中间      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        左      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        右      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      版权信息    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在浏览器中展现的效果，上面将 .content 的高度设置为了 300px 才会出现下面这样的情况<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-8ac01e55893daf5f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>照着上面的基础布局的基础上进行代码的修改</p><ul><li><code>.middle{float:left;width:100%;}</code></li><li><code>.left{width:100px;margin-left:-100%;}</code></li><li><code>.right{float:left;width:150px;margin-left:-150px;}</code></li><li>再给容器 <code>.content</code> 加了 <code>padding-left:100px;padding-right:150px;</code></li><li><code>.left{position:relative;left:-100px;}</code></li><li><code>.right{position:relative;left:150px;}</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>layout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.con</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">980</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>      <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.left</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.right</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.fx</span> </span><span class="token punctuation">{</span>      <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      我是header    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 如果是中间的内容比较重要的话需要放到前面这样在渲染时先渲染出来  这样的话就需要在 浮动同级的最后面加上一个 div.fx 清除浮动了 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        中间      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        左      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        右      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      版权信息    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在浏览器中的效果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-c579f3fc66d9f48a.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><blockquote><p>双飞翼布局 = 圣杯布局 + inner div</p></blockquote><ul><li>将 <code>.left</code> 和 <code>.right</code> 中的 <code>position</code> 属性全都去掉，将 <code>.content</code> 的 <code>padding</code> 也都去掉</li><li>之后再在 <code>.middle</code> 元素中增加一个 <code>div.inner</code> 元素</li><li>给这个元素设置样式 <code>.middle .inner{margin-left:100px;magin-right:150px;}</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>layout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.con</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">980</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*padding-left: 100px;            padding-right: 150px;*/</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.left</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*position: relative;            left: -100px;*/</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.right</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*position: relative;            left: 150px;*/</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.fx</span> </span><span class="token punctuation">{</span>      <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      我是header    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 如果是中间的内容比较重要的话需要放到前面这样在渲染时先渲染出来  这样的话就需要在 浮动同级的最后面加上一个 div.fx 清除浮动了 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          中间        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        左      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        右      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      版权信息    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-db68207c88be7619.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>参照上面的【双飞翼】布局的源码，如果说 <code>.left .right .inner</code> 这三个元素不设置固定的高度，就会出现下面的问题，这里我给 <code>.inner</code> 设置了一个背景颜色 <code>blueviolet</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-ee4ac28070e85416.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>接下来我们要实现的就是如何使三列布局可以等高</p><ul><li>给 <code>.left .right .inner</code> 都加上两个样式 <code>padding-bottom:9999px;margin-bottom:-9999px;</code></li><li>再给 <code>.content</code> 加上 <code>overflow:hidden;</code></li></ul><p>上面的 <code>padding</code> 是增加了元素的高度，<code>margin</code> 是变相的将增加的高度给减去了，尽管在视觉上市一样的效果，这个 <code>margin</code> 是必须要加上的，这样值相互抵消使得元素也就是这个盒子模型中的内容还是在原来的位置上。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>layout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.con</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">980</span>px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*padding-left: 100px;            padding-right: 150px;*/</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.left</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*height: 300px;*/</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*position: relative;            left: -100px;*/</span>      <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">9999</span>px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">9999</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.right</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*height: 300px;*/</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*position: relative;            left: 150px;*/</span>      <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">9999</span>px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">9999</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*height: 300px;*/</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>      <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">9999</span>px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">9999</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.fx</span> </span><span class="token punctuation">{</span>      <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      我是header    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 如果是中间的内容比较重要的话需要放到前面这样在渲染时先渲染出来  这样的话就需要在 浮动同级的最后面加上一个 div.fx 清除浮动了 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          中间        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        左      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        右      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      版权信息    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-227be0ff1a7f6e57.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS-基础布局&quot;&gt;&lt;a href=&quot;#CSS-基础布局&quot; class=&quot;headerlink&quot; title=&quot;CSS 基础布局&quot;&gt;&lt;/a&gt;CSS 基础布局&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;di
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
      <category term="响应式" scheme="http://coder.liusixin.cn/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>OO CSS -- 面向对象的CSS</title>
    <link href="http://coder.liusixin.cn/posts/916f577d/"/>
    <id>http://coder.liusixin.cn/posts/916f577d/</id>
    <published>2017-09-11T12:26:05.000Z</published>
    <updated>2017-09-11T12:26:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象的-CSS"><a href="#面向对象的-CSS" class="headerlink" title="面向对象的 CSS"></a>面向对象的 CSS</h2><blockquote><p>官网：<a href="https://link.jianshu.com/?t=http%3A%2F%2Foocss.org%2F" rel="external nofollow noopener noreferrer" target="_blank">面向对象的 CSS</a></p></blockquote><ul><li>OO CSS 的概念解读</li><li>OO CSS 的作用和注意事项</li><li>OO CSS 代码实战</li></ul><p>众多开发者忽视了 CSS 的表现（认为他太过简单，是一种机械的工作），而且更多关注在 JavaScript 的性能上或者其他方面。</p><p>OO CSS 将页面可重用元素抽象成一个类，用 Class 加以描述，而与其对应的 HTML 即可看成是此类的一个实例。</p><h3 id="OO-CSS-的作用"><a href="#OO-CSS-的作用" class="headerlink" title="OO CSS 的作用"></a>OO CSS 的作用</h3><ul><li>加强代码复用以方便维护</li><li>减小 CSS 体积</li><li>提升渲染效率（逐层渲染）</li><li>组件库思想（和美工对接）、栅格布局可共用、减少选择器、方便扩展</li></ul><h3 id="OO-CSS-注意事项"><a href="#OO-CSS-注意事项" class="headerlink" title="OO CSS 注意事项"></a>OO CSS 注意事项</h3><p><strong>1.不要直接定义子节点，应把共性声明放到父类</strong></p><pre class=" language-less"><code class="language-less"><span class="token selector">.inner</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 不是很建议的声明</span><span class="token selector">.mod .inner</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//.mod下面的inner</span></code></pre><p><strong>2.结构与皮肤相分离</strong></p><pre class=" language-less"><code class="language-less">&lt;div class=<span class="token string">"container simpleExt"</span>>&lt;<span class="token operator">/</span>div>  <span class="token comment" spellcheck="true">//html结构 （不建议这样）</span><span class="token selector">.container</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//控制结构的class</span><span class="token selector">.simpleExt</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 控制皮肤的class</span></code></pre><p><strong>3.容器和内容相分离</strong></p><pre class=" language-less"><code class="language-less"><span class="token selector">&lt;div class='container' > &lt;ul > &lt;li > 排行&lt;/li > &lt;/ul > &lt;/div > .container ul</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//ul依赖了容器</span><span class="token selector">&lt;div  class='container'  > &lt;ul  class='rankList'  > &lt;li  > 排行&lt;/li  > &lt;/ul  > &lt;/div  > .rankListul  li</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//解除与容器的依赖，可以从一个容器转移到其他容器</span></code></pre><p><strong>4.抽象出可重用的元素，建好组件库，在组件库内寻找可用的元素组装页面（只要把最外层的 class 引进来，然后去组件库找类，组装页面）</strong></p><p><strong>5.往你想要扩展的对象本身添加 class 而不是他的父节点</strong></p><p><strong>6.对象应保持独立性</strong></p><pre class=" language-less"><code class="language-less">&lt;div class=<span class="token string">"container"</span>>&lt;div class=<span class="token string">"mod"</span>>&lt;<span class="token operator">/</span>div>&lt;<span class="token operator">/</span>div>  <span class="token comment" spellcheck="true">//htlm结构</span><span class="token selector">.container</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token selector">.container .mod</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//控制结构的class</span>&lt;div class=<span class="token string">"container mod"</span>>&lt;<span class="token operator">/</span>div></code></pre><p><strong>7.避免使用 ID 选择器，权重太高，无法重用</strong></p><p><strong>8.避免位置相关的样式</strong></p><pre class=" language-less"><code class="language-less"><span class="token selector">#header .container</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">,#footer .container</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.container</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//上面的直接提出来就行，肯定有共性的。</span><span class="token selector">#header h1</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">,#footer h1</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果是有不同的，可以像下面这样</span><span class="token selector">h1 .h1</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token selector">h2 .h2</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      &lt;h<span class="token number">1</span>>&lt;div class=<span class="token string">"h6"</span>>&lt;<span class="token operator">/</span>div>&lt;<span class="token operator">/</span>h<span class="token number">1</span>></code></pre><p><strong>9.保证选择器相同的权重（不要去嵌套太多，不然状态改变很麻烦）</strong></p><p><strong>10.类名 剪短 清晰 语义化 OOCSS 的名字并不影响 HTML 语义化</strong></p><h2 id="常用-CSS-库"><a href="#常用-CSS-库" class="headerlink" title="常用 CSS 库"></a>常用 CSS 库</h2><blockquote><p>对于 OO CSS 来说，这些库就相当于父类，父类做了本不该你做的事情</p></blockquote><ul><li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fmeyerweb.com%2Feric%2Ftools%2Fcss%2Freset%2F" rel="external nofollow noopener noreferrer" target="_blank">Reset CSS</a><ul><li>杀伤力也较大，会把我们想要的不想要的都给设置一个初始样式</li><li>做了一个统一回归</li><li>之后有了 normalize.css，做了一个改进</li></ul></li><li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fnicolasgallagher.com%2Fabout-normalize-css%2F" rel="external nofollow noopener noreferrer" target="_blank">normalize.css</a><ul><li>它只给 body 设置了 padding:0;margin:0;</li><li>它做的是保证每个浏览器显示效果统一，相当于一种补充，但是有些默认的还没置掉，支队 body 做了重置</li></ul></li><li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fthx.github.io%2Fcube%2Fdoc%2Fneat" rel="external nofollow noopener noreferrer" target="_blank">Neat.css</a><ul><li>它是基于 normalize 和 reset 结合的</li><li>解决低级浏览器 Bug（这是 normalize 的优点）</li><li>统一效果，但不盲目重置为 0</li><li>向后兼容</li><li>考虑响应式</li><li>考虑移动设备</li><li>还有一些特色等可以到官网查看，在我们项目中也可以直接下载使用</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象的-CSS&quot;&gt;&lt;a href=&quot;#面向对象的-CSS&quot; class=&quot;headerlink&quot; title=&quot;面向对象的 CSS&quot;&gt;&lt;/a&gt;面向对象的 CSS&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://link.jian
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS workflow</title>
    <link href="http://coder.liusixin.cn/posts/d41e0dd/"/>
    <id>http://coder.liusixin.cn/posts/d41e0dd/</id>
    <published>2017-09-10T05:22:04.000Z</published>
    <updated>2017-09-10T05:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-预处理器（处理浏览器）"><a href="#CSS-预处理器（处理浏览器）" class="headerlink" title="CSS 预处理器（处理浏览器）"></a>CSS 预处理器（处理浏览器）</h2><ul><li>sass、less、stylus</li><li>预处理器常用规范<ul><li>变量</li><li>混合（Mixin）Extend</li><li>嵌套规则</li><li>运算</li><li>函数</li><li>Namespaces &amp; Accessors</li><li>Scope</li><li>注释</li></ul></li></ul><h2 id="CSS-后处理器（该删的删，该加的加，增加前缀，包括可以兼容-IE6）"><a href="#CSS-后处理器（该删的删，该加的加，增加前缀，包括可以兼容-IE6）" class="headerlink" title="CSS 后处理器（该删的删，该加的加，增加前缀，包括可以兼容 IE6）"></a>CSS 后处理器（该删的删，该加的加，增加前缀，包括可以兼容 IE6）</h2><ul><li>CSS 压缩 CLEAN-CSS</li><li>自动添加浏览器前缀 Autoprefixer</li><li>CSS 更加美观排序 CSScomb</li><li>Rework（编译压缩等）取代 Stylus（只能负责编译） 后处理器发热</li><li>前后通吃 PostCSS</li></ul><blockquote><p>css 处理被分成了两步，一步是 sass、less，一步是到上线前的后处理器（通过 AST‘抽象语法树’去分析）</p></blockquote><p><strong>PostCSS 值得收藏的插件</strong></p><ul><li>POSTCSS-CUSTOM-PROPERTIES 运行时变量</li><li>POSTCSS-SIMPLE-VARS 与 SASS 一致的变量实现</li><li>POSTCSS-MIXINS 实现类似 SASS 的@MIXIN 的功能</li><li>POSTCSS-EXTEND 实现类似 SASS 的继承功能</li><li>POSTCSS-IMPORT 实现类似 SASS 的 IMPORT</li><li>CSSNEXT 面向未来 CSS Grace 修复过去</li></ul><blockquote><p>编译 node 不需要 webpack，我们用 gulp+rollup（tree shaking）。</p></blockquote><h2 id="面向对象的-CSS"><a href="#面向对象的-CSS" class="headerlink" title="面向对象的 CSS"></a>面向对象的 CSS</h2><ul><li>OO CSS 的概念解读</li><li>OO CSS 的作用和注意事项</li><li>OO CSS 代码实战</li></ul><p>众多开发者忽视了 CSS 的表现（认为他太过简单，是一种机械的工作），而且更多关注在 JavaScript 的性能上或者其他方面。</p><p>OO CSS 将页面可重用元素抽象成一个类，用 Class 加以描述，而与其对应的 HTML 即可看成是此类的一个实例。</p><h2 id="CSS-分层与面向对象"><a href="#CSS-分层与面向对象" class="headerlink" title="CSS 分层与面向对象"></a>CSS 分层与面向对象</h2><p>为什么要分层？</p><ul><li>SMACSS</li><li>BEM</li><li>SUIT</li><li>ACSS</li><li>ITCSS</li></ul><p>原因：</p><ul><li>CSS 有语义化的命名约定和 CSS 层的分离，将有助于它的可扩展性，性能的提高和代码的组织管理。</li><li>大量的样式、覆盖、权重和很多！important，分好层可以让团队命名统一规范，方便维护。</li><li>有责任感地去命名你的选择器。</li></ul><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><ul><li>BEM 和 SMACSS 非常类似，主要用来如何给项目命名。一个简单命名更容易让别人一起工作。比如选项卡导航是一个块（Block），这个块里的元素是其中标签之一（Element），而当前选项卡是一个修饰状态（Modifier）</li><li>block 代表了更高级别的抽象或组件</li><li>block__element 代表 block 后代，用于形成一个完整的 block 的整体</li><li>block_modifier 代表 block 的不用状态或不同版本</li><li>修饰符使用的是‘’，子模块使用‘_’，单词连接用‘-’<br><img src="http://cdn-blog.liusixin.cn/9064121-461daabd23972956-1.png" alt=""><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-b1a634eaabba8526.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="ACSS"><a href="#ACSS" class="headerlink" title="ACSS"></a>ACSS</h3><ul><li>考虑如何设计一个系统的接口。原子（Atoms）是创建一个区块的最基本的特质，比如说表单按钮。分子（Molecules）是很多个原子（Atoms）的组合，比如说一个表单中包括了一个标签，输入框和按钮。生物（Organisms）是众多分子（Molecules）的组合物，比如一个网站的顶部区域，他包括了网站的标题、导航等。而模板（Templates）又是众多生物（Organisms）的结合体。比如一个网站页面的布局。而最后的页面就是特殊的模板。</li></ul><p><img src="http://cdn-blog.liusixin.cn/9064121-b54c1dac07ca3373.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS-预处理器（处理浏览器）&quot;&gt;&lt;a href=&quot;#CSS-预处理器（处理浏览器）&quot; class=&quot;headerlink&quot; title=&quot;CSS 预处理器（处理浏览器）&quot;&gt;&lt;/a&gt;CSS 预处理器（处理浏览器）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;sass、less、st
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS中解决跨域问题</title>
    <link href="http://coder.liusixin.cn/posts/f4712658/"/>
    <id>http://coder.liusixin.cn/posts/f4712658/</id>
    <published>2017-09-08T13:18:56.000Z</published>
    <updated>2017-09-08T13:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前端开发中，跨域是我们经常遇到的问题，同时面试中也会经常问到这类问题，这里就来总结下</p></blockquote><blockquote><p>参考文档：</p><p>阮一峰的 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" rel="external nofollow noopener noreferrer" target="_blank">跨域资源共享 CORS 详解</a></p><p><a href="https://segmentfault.com/a/1190000011145364" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000011145364</a></p></blockquote><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>跨域是浏览器为执行同源策略所造成的，是浏览器对 JavaScript 脚本实施的安全限制。</p><p>同源策略限制了一下行为：</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 JS 对象无法获取</li><li>Ajax 请求发送不出去</li></ul><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><h3 id="jsonp-跨域"><a href="#jsonp-跨域" class="headerlink" title="jsonp 跨域"></a>jsonp 跨域</h3><p>jsonp 跨域其实也是 JavaScript 设计模式中的一种代理模式。在 html 页面中通过相应的标签从不同域名下加载静态资源文件是被浏览器允许的，所以我们可以通过这个“漏洞”来进行跨域。一般，我们可以动态的创建 script 标签，再去请求一个带参网址来实现跨域通信</p><p><strong>原生 js 实现</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/login?username=Liusxin&amp;callback=callback'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>jquery 实现</strong></p><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'http://www.baidu.com/login'</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>  dataType<span class="token punctuation">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//请求方式为jsonp</span>  jsonpCallback<span class="token punctuation">:</span> <span class="token string">'callback'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'Liusixin'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>虽然这种方式非常好用，但是一个最大的缺陷是，只能够实现 get 请求</p><h3 id="document-domain-iframe-跨域"><a href="#document-domain-iframe-跨域" class="headerlink" title="document.domain + iframe 跨域"></a>document.domain + iframe 跨域</h3><p>这种跨域的方式最主要的是要求<strong>主域名相同</strong>。什么是主域名相同呢？ <code>a.liusixin.cn</code> <code>b.liusixin.cn</code> <code>a.b.liusixin.cn</code> 这三个主域名都是 <code>liusixin.cn</code>,而主域名不同的就不能用此方法。</p><p>假设目前 <code>a.liusixin.cn</code> 和 <code>b.liusixin.cn</code> 分别对应指向不同 ip 的服务器。</p><p>a.liusixin.cn 下有一个 test.html 文件</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.12.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>a页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span> <span class="token punctuation">:</span> none</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://b.liusixin.cn/1.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">"liusixin.cn"</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#iframe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> jq <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>$        jq<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://liusixin.cn/test.json"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>b页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.12.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">"liusixin.com"</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>利用 iframe 加载 其他域下的文件（<code>liusixin.cn/1.html</code>）, 同时 document.domain 设置成 <code>liusixin.cn</code> ，当 iframe 加载完毕后就可以获取 <code>liusixin.cn</code> 域下的全局对象， 此时尝试着去请求 <code>liusixin.cn</code> 域名下的 <code>test.json</code>，就会发现数据成功拿到。</p><h3 id="window-name-iframe-跨域"><a href="#window-name-iframe-跨域" class="headerlink" title="window.name + iframe 跨域"></a>window.name + iframe 跨域</h3><p><code>window.name</code> 属性可设置或者返回存放窗口名称的一个字符串。他的神奇之处在于 name 值在不同页面或者不同域下加载后依旧存在，没有修改就不会发生变化，并且可以存储很大的数据 <code>name(2MB)</code></p><p>假设 index 页面请求远端服务器上的数据，我们在该页面下创建 iframe 标签，该 iframe 的 src 指向服务器文件的地址（iframe 标签 src 可以跨域），服务器文件里设置好<code>window.name</code>的值，然后再在<code>index.html</code>里面读取改 iframe 中的<code>window.name</code>的值。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.12.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/data.php'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>当然，这样还是不够的。</p><p>因为规定如果 index.html 页面和和该页面里的 iframe 框架的 src 如果不同源，则也无法操作框架里的任何东西，所以就取不到 iframe 框架的 name 值了。既然要同源，那就换个 src 去指，前面说了无论怎样加载<code>window.name</code>值都不会变化，于是我们在<code>index.html</code>相同目录下，新建了个<code>proxy.html</code>的空页面，修改代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>proxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.12.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/data.php'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:81/cross-domain/proxy.html'</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>理想似乎很美好，在 iframe 载入过程中，迅速重置<code>iframe.src</code>的指向，使之与<code>index.html</code>同源，那么 index 页面就能去获取它的 name 值了！但是现实是残酷的，iframe 在现实中的表现是一直不停地刷新， 也很好理解，每次触发 onload 时间后，重置 src，相当于重新载入页面，又触发 onload 事件，于是就不停地刷新了（但是需要的数据还是能输出的）。修改后代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>proxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-1.12.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'http://localhost:81/cross-domain/proxy.html'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:8080/data.php'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>所以如上，我们就拿到了服务器返回的数据，但是有几个条件是必不可少的：</p><ul><li>iframe 标签的跨域能力</li><li>window.names 属性值在文档刷新后依然存在的能力</li></ul><h3 id="location-hash-iframe-跨域"><a href="#location-hash-iframe-跨域" class="headerlink" title="location.hash + iframe 跨域"></a>location.hash + iframe 跨域</h3><p>此跨域方法和上面介绍的比较类似，一样是动态插入一个 iframe 然后设置其 src 为服务端地址，而服务端同样输出一端 js 代码，也同时通过与子窗口之间的通信来完成数据的传输。</p><p>关于锚点相信大家都已经知道了，其实就是设置锚点，让文档指定的相应的位置。锚点的设置用 a 标签，然后 href 指向要跳转到的 id，当然，前提是你得有个滚动条。</p><p>而<code>location.hash</code>其实就是 url 的锚点。比如<code>http://www.liusixin.cn#test</code> 的网址打开后，在控制台输入<code>location.hash</code>就会返回 <code>#test</code> 的字段。</p><p>基础知识补充完毕，下面我们来说下如何实现跨域</p><p>如果 index 页面要获取远端服务器的数据，动态的插入一个 iframe，将 iframe 的 src 执行服务器的地址，这时候的 top window 和包裹这个 iframe 的子窗口是不能通信的，因为同源策略，所以改变子窗口的路径就可以了，将数据当做改变后的路径的 hash 值加载路径上，然后就可以通信了。将数据加在 index 页面地址的 hash 上， index 页面监听 hash 的变化，h5 的<code>hashchange</code>方法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>      iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>      iframe<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get data from server</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:8080/data.php'</span><span class="token punctuation">;</span>    <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> jsondata <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsondata<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> jsondata<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><blockquote><p><code>location.hash</code>和 <code>window.name</code> 都是差不多的，都是利用全局对象属性的方法，然后这两种方法和 <code>jsonp</code> 也是一样的，就是只能够实现<strong>get</strong>请求</p></blockquote><h3 id="postMessage-跨域"><a href="#postMessage-跨域" class="headerlink" title="postMessage 跨域"></a>postMessage 跨域</h3><p>这是由 HTML5 提出来的一个新的的 API，IE8+，chrome,ff 都已经支持实现了这个功能。这个功能也是非常的简单，其中包括接受信息的 <code>Message</code> 时间，和发送信息的<code>postMessage</code>方法。</p><p>发送信息的 <code>postMessage</code> 方法是向外界窗口发送信息</p><pre class=" language-js"><code class="language-js">otherWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> targetOrigin<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>otherWindow</code>指的是目标窗口，也就是要给哪一个 window 发送消息，是<code>window.frames</code>属性的成员或者是<code>window.open</code>方法创建的窗口。 <code>Message</code>是要发送的消息，类型为<code>String</code>，<code>Object</code>(IE8、9 不支持 Obj)，<code>targetOrigin</code>是限定消息接受范围，不限制就用星号 *</p><p>接受信息的<code>message</code>事件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">var</span> origin <span class="token operator">=</span> event<span class="token punctuation">.</span>origin<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>addEventListener <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> onmessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>attachEvent <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  window<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onmessage'</span><span class="token punctuation">,</span> onmessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>举个例子</p><p><strong>a.html(<a href="http://www.liusixin.cn/a.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.liusixin.cn/a.html</a>)</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.lsx.cn/b.html<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iframe<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lsx'</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 向lsx传送跨域数据</span>      iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'http://www.lsx.cn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接受domain2返回数据</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'data from lsx ---> '</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><strong>b.html(<a href="http://www.lsx.cn/b.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.lsx.cn/b.html</a>)</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 接收domain1的数据</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'data from liusixin ---> '</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理后再发回liusixin</span>        window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'http://www.liusixin.cn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享 CORS"></a>跨域资源共享 CORS</h3><blockquote><p>是目前主流的跨域解决方案</p></blockquote><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”（Cross-origin resource sharing）。 它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。IE8+：IE8/9 需要使用 XDomainRequest 对象来支持 CORS。</p><p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。 因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p><p><strong>两种请求</strong></p><p>分为两种请求，一种是简单请求，另一种是非简单请求。只要满足下面条件就是简单请求</p><ul><li>请求方式为 HEAD、POST 或者 GET</li><li>http 头信息不超出以下字段：<code>Accept</code>、<code>Accept-Language</code> 、 <code>Content-Language</code>、 <code>Last-Event-ID</code>、 <code>Content-Type</code>(限于三个值：<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>)</li></ul><p>浏览器对这两种请求方式的处理方式是不同的。</p><p><strong>简单请求</strong></p><p>对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个 Origin 字段。 下面是一个例子，浏览器发现这次跨源 AJAX 请求是简单请求，就自动在头信息之中，添加一个 Origin 字段。</p><pre class=" language-shell"><code class="language-shell">GET /cors HTTP/1.1Origin: http://api.bob.comHost: api.alice.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...</code></pre><p>Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。 浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。</p><p>注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。</p><p>如果 Origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><pre class=" language-shell"><code class="language-shell">Access-Control-Allow-Origin: http://api.bob.comAccess-Control-Allow-Credentials: trueAccess-Control-Expose-Headers: FooBarContent-Type: text/html; charset=utf-8</code></pre><p>上面的头信息之中，有三个与 CORS 请求相关的字段，都以 <code>Access-Control-</code> 开头</p><ul><li><code>Access-Control-Allow-Origin</code> :该字段是必须的。它的值要么是请求时 Origin 字段的值，要么是一个*，表示接受任意域名的请求</li><li><code>Access-Control-Allow-Credentials</code>: 该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可。</li><li><code>Access-Control-Expose-Headers</code>:该字段可选。CORS 请求时，<code>XMLHttpRequest</code>对象的<code>getResponseHeader()</code>方法只能拿到 6 个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code> 里面指定。</li></ul><p><strong><code>withCredentials</code>属性</strong></p><p>上面说到，CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。另一方面，开发者必须在 AJAX 请求中打开<code>withCredentials</code>属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// IE8/9需用window.XDomainRequest兼容</span><span class="token comment" spellcheck="true">// 前端设置是否带cookie</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'http://www.domain2.com:8080/login'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'user=admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// jquery</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>  xhrFields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    withCredentials<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 前端设置是否带cookie</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  crossDomain<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会让请求头中包含跨域的额外信息，但不会含cookie</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。 但是，如果省略<code>withCredentials</code>设置，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭<code>withCredentials</code>。</p><p>需要注意的是，如果要发送 Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨源）原网页代码中的<code>document.cookie</code>也无法读取服务器域名下的 Cookie。</p><p><strong>非简单请求</strong></p><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://api.alice.com/cors'</span><span class="token punctuation">;</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'PUT'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'X-Custom-Header'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的 HTTP 头信息。</p><pre class=" language-shell"><code class="language-shell">OPTIONS / cors HTTP / 1.1Origin: http: //api.bob.comAccess - Control - Request - Method: PUTAccess - Control - Request - Headers: X - Custom - HeaderHost: api.alice.comAccept - Language: en - USConnection: keep - aliveUser - Agent: Mozilla / 5.0...</code></pre><p>“预检”请求用的请求方法是 OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是 Origin，表示请求来自哪个源。</p><p>除了 Origin 字段，”预检”请求的头信息包括两个特殊字段。</p><ul><li><code>Access-Control-Request-Method</code>：该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是 PUT。</li><li><code>Access-Control-Request-Headers</code>：该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code></li></ul><p><strong>预检请求的回应</strong></p><p>服务器收到”预检”请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code> 和 <code>Access-Control-Request-Headers</code> 字段以后，确认允许跨源请求，就可以做出回应</p><pre class=" language-shell"><code class="language-shell">HTTP/1.1 200 OKDate: Mon, 01 Dec 2008 01:15:39 GMTServer: Apache/2.0.61 (Unix)Access-Control-Allow-Origin: http://api.bob.comAccess-Control-Allow-Methods: GET, POST, PUTAccess-Control-Allow-Headers: X-Custom-HeaderContent-Type: text/html; charset=utf-8Content-Encoding: gzipContent-Length: 0Keep-Alive: timeout=2, max=100Connection: Keep-AliveContent-Type: text/plain</code></pre><p>上面的 HTTP 回应中，关键的是 <code>Access-Control-Allow-Origin</code> 字段，表示 <code>http://api.bob.com</code> 可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p><p>如果浏览器否定了”预检”请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被<code>XMLHttpRequest</code>对象的 onerror 回调函数捕获。控制台会打印出如下的报错信息。</p><p>服务器回应的其他 CORS 相关字段如下：</p><pre class=" language-shell"><code class="language-shell">Access-Control-Allow-Methods: GET, POST, PUTAccess-Control-Allow-Headers: X-Custom-HeaderAccess-Control-Allow-Credentials: trueAccess-Control-Max-Age: 1728000</code></pre><ul><li><code>Access-Control-Allow-Methods</code>：该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</li><li><code>Access-Control-Allow-Headers</code>：如果浏览器请求包括<code>Access-Control-Request-Headers</code>字段，则<code>Access-Control-Allow-Headers</code>字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</li><li><code>Access-Control-Allow-Credentials</code>： 该字段与简单请求时的含义相同。</li><li><code>Access-Control-Max-Age</code>： 该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。</li></ul><p><strong>浏览器正常请求回应</strong></p><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段。</p><pre class=" language-shell"><code class="language-shell">PUT /cors HTTP/1.1Origin: http://api.bob.comHost: api.alice.comX-Custom-Header: valueAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...</code></pre><p>览器的正常 CORS 请求。上面头信息的<code>Origin</code>字段是浏览器自动添加的。下面是服务器正常的回应。</p><pre class=" language-shell"><code class="language-shell">Access-Control-Allow-Origin: http://api.bob.comContent-Type: text/html; charset=utf-8</code></pre><p><code>Access-Control-Allow-Origin</code> 字段是每次回应都必定包含的</p><blockquote><p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</p></blockquote><h3 id="WebSocket-协议跨域"><a href="#WebSocket-协议跨域" class="headerlink" title="WebSocket 协议跨域"></a>WebSocket 协议跨域</h3><p>WebSocket protocol 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是 server push 技术的一种很好的实现。</p><p>原生 WebSocket API 使用起来不太方便，我们使用 Socket.io，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容。</p><p><strong>前端代码</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>user input：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./socket.io.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">'http://www.domain2.com:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 连接成功处理</span>    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 监听服务端消息</span>      socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data from server: ---> '</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 监听服务端关闭</span>      socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server socket has closed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><strong>服务端代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'socket.io'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启http服务</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at port 8080...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听socket连接</span>socket<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接收信息</span>  client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello：'</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data from client: ---> '</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 断开处理</span>  client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Client socket has closed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="node-代理跨域"><a href="#node-代理跨域" class="headerlink" title="node 代理跨域"></a>node 代理跨域</h3><p>node 中间件实现跨域代理，是通过启一个代理服务器，实现数据的转发，也可以通过设置<code>cookieDomainRewrite</code>参数修改响应头中 cookie 中域名，实现当前域的 cookie 写入，方便接口登录认证。</p><p>利用 node + express + http-proxy-middleware 搭建一个 proxy 服务器</p><p><strong>前端代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前端开关：浏览器是否读写cookie</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 访问http-proxy-middleware代理服务器</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://www.domain1.com:3000/login?user=admin'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>服务端代码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代理跨域目标接口</span>    target<span class="token punctuation">:</span> <span class="token string">'http://www.domain2.com:8080'</span><span class="token punctuation">,</span>    changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 修改响应头信息，实现跨域并允许带cookie</span>    onProxyRes<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>proxyRes<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'http://www.domain1.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Credentials'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 修改响应信息中的cookie域名</span>    cookieDomainRewrite<span class="token punctuation">:</span> <span class="token string">'www.domain1.com'</span> <span class="token comment" spellcheck="true">// 可以为false，表示不修改</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Proxy server is listen at port 3000...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="nginx-代理跨域"><a href="#nginx-代理跨域" class="headerlink" title="nginx 代理跨域"></a>nginx 代理跨域</h3><p><strong>1、nginx 配置解决 iconfont 跨域</strong></p><p>浏览器跨域访问 js、css、img 等常规静态资源被同源策略许可，但 iconfont 字体文件(eot|otf|ttf|woff|svg)例外，此时可在 nginx 的静态资源服务器中加入以下配置。</p><pre class=" language-shell"><code class="language-shell">location / {  add_header Access-Control-Allow-Origin *;}</code></pre><p><strong>2、nginx 反向代理接口跨域</strong></p><p>跨域原理： 同源策略是浏览器的安全策略，不是 HTTP 协议的一部分。服务器端调用 HTTP 接口只是使用 HTTP 协议，不会执行 JS 脚本，不需要同源策略，也就不存在跨越问题。</p><p>实现思路：通过 nginx 配置一个代理服务器（域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录。</p><p><strong>nginx 具体配置</strong></p><pre class=" language-shell"><code class="language-shell">#proxy服务器server {    listen       81;    server_name  www.domain1.com;    location / {        proxy_pass   http://www.domain2.com:8080;  #反向代理        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名        index  index.html index.htm;        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*        add_header Access-Control-Allow-Credentials true;    }}</code></pre><p><strong>前端代码示例</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 向前台写cookie</span>  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span> <span class="token comment" spellcheck="true">// HttpOnly:脚本无法读取</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at port 8080...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前端开发中，跨域是我们经常遇到的问题，同时面试中也会经常问到这类问题，这里就来总结下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;阮一峰的 &lt;a href=&quot;http://www.ruanyifen
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="HTTP" scheme="http://coder.liusixin.cn/tags/HTTP/"/>
    
      <category term="Nodejs" scheme="http://coder.liusixin.cn/tags/Nodejs/"/>
    
      <category term="Nginx" scheme="http://coder.liusixin.cn/tags/Nginx/"/>
    
      <category term="跨域" scheme="http://coder.liusixin.cn/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令总结</title>
    <link href="http://coder.liusixin.cn/posts/509c5367/"/>
    <id>http://coder.liusixin.cn/posts/509c5367/</id>
    <published>2017-09-05T15:07:02.000Z</published>
    <updated>2017-09-05T15:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在当前目录新建一个Git代码库</span>$ <span class="token function">git</span> init<span class="token comment" spellcheck="true"># 新建一个目录，将其初始化为Git代码库</span>$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 下载一个项目和它的整个代码历史</span>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示当前的Git配置</span>$ <span class="token function">git</span> config --list<span class="token comment" spellcheck="true"># 编辑Git配置文件</span>$ <span class="token function">git</span> config -e <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 设置提交代码时的用户信息</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span></code></pre><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加指定文件到暂存区</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 添加指定目录到暂存区，包括子目录</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 添加当前目录的所有文件到暂存区</span>$ <span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 添加每个变化前，都会要求确认</span><span class="token comment" spellcheck="true"># 对于同一个文件的多处变化，可以实现分次提交</span>$ <span class="token function">git</span> add -p<span class="token comment" spellcheck="true"># 删除工作区文件，并且将这次删除放入暂存区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 停止追踪指定文件，但该文件会保留在工作区</span>$ <span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 改名文件，并且将这个改名放入暂存区</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span></code></pre><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 提交暂存区到仓库区</span>$ <span class="token function">git</span> commit -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交暂存区的指定文件到仓库区</span>$ <span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交工作区自上次commit之后的变化，直接到仓库区</span>$ <span class="token function">git</span> commit -a<span class="token comment" spellcheck="true"># 提交时显示所有diff信息</span>$ <span class="token function">git</span> commit -v<span class="token comment" spellcheck="true"># 使用一次新的commit，替代上一次提交</span><span class="token comment" spellcheck="true"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ <span class="token function">git</span> commit --amend -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重做上一次commit，并包括指定文件的新变化</span>$ <span class="token function">git</span> commit --amend <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span></code></pre><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有本地分支</span>$ <span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 列出所有远程分支</span>$ <span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 列出所有本地分支和远程分支</span>$ <span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 新建一个分支，但依然停留在当前分支</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，并切换到该分支</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，指向指定commit</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，与指定的远程分支建立追踪关系</span>$ <span class="token function">git</span> branch --track <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换到指定分支，并更新工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换到上一个分支</span>$ <span class="token function">git</span> checkout -<span class="token comment" spellcheck="true"># 建立追踪关系，在现有分支与指定的远程分支之间</span>$ <span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 合并指定分支到当前分支</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 选择一个commit，合并进当前分支</span>$ <span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除分支</span>$ <span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程分支</span>$ <span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>$ <span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span></code></pre><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有tag</span>$ <span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 新建一个tag在当前commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个tag在指定commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除本地tag</span>$ <span class="token function">git</span> tag -d <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程tag</span>$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看tag信息</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交指定tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交所有tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --tags<span class="token comment" spellcheck="true"># 新建一个分支，指向某个tag</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span></code></pre><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示有变更的文件</span>$ <span class="token function">git</span> status<span class="token comment" spellcheck="true"># 显示当前分支的版本历史</span>$ <span class="token function">git</span> log<span class="token comment" spellcheck="true"># 显示commit历史，以及每次commit发生变更的文件</span>$ <span class="token function">git</span> log --stat<span class="token comment" spellcheck="true"># 搜索提交历史，根据关键词</span>$ <span class="token function">git</span> log -S <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示某个commit之后的所有变动，每个commit占据一行</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --pretty<span class="token operator">=</span>format:%s<span class="token comment" spellcheck="true"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --grep feature<span class="token comment" spellcheck="true"># 显示某个文件的版本历史，包括文件改名</span>$ <span class="token function">git</span> log --follow <span class="token punctuation">[</span>file<span class="token punctuation">]</span>$ <span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示指定文件相关的每一次diff</span>$ <span class="token function">git</span> log -p <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示过去5次提交</span>$ <span class="token function">git</span> log -5 --pretty --oneline<span class="token comment" spellcheck="true"># 显示所有提交过的用户，按提交次数排序</span>$ <span class="token function">git</span> shortlog -sn<span class="token comment" spellcheck="true"># 显示指定文件是什么人在什么时间修改过</span>$ <span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示暂存区和工作区的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span><span class="token comment" spellcheck="true"># 显示暂存区和上一个commit的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示工作区与当前分支最新commit之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token comment" spellcheck="true"># 显示两次提交之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示今天你写了多少行代码</span>$ <span class="token function">git</span> <span class="token function">diff</span> --shortstat <span class="token string">"@{0 day ago}"</span><span class="token comment" spellcheck="true"># 显示某次提交的元数据和内容变化</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示某次提交发生变化的文件</span>$ <span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示某次提交时，某个文件的内容</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示当前分支的最近几次提交</span>$ <span class="token function">git</span> reflog</code></pre><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载远程仓库的所有变动</span>$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示所有远程仓库</span>$ <span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 显示某个远程仓库的信息</span>$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 增加一个新的远程仓库，并命名</span>$ <span class="token function">git</span> remote add <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 取回远程仓库的变化，并与本地分支合并</span>$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 上传本地指定分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 强行推送当前分支到远程仓库，即使有冲突</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --force<span class="token comment" spellcheck="true"># 推送所有分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --all</code></pre><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 恢复暂存区的指定文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 恢复某个commit的指定文件到暂存区和工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 恢复暂存区的所有文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置暂存区与工作区，与上一次commit保持一致</span>$ <span class="token function">git</span> reset --hard<span class="token comment" spellcheck="true"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ <span class="token function">git</span> reset --hard <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ <span class="token function">git</span> reset --keep <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个commit，用来撤销指定commit</span><span class="token comment" spellcheck="true"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 暂时将未提交的变化移除，稍后再移入</span>$ <span class="token function">git</span> stash$ <span class="token function">git</span> stash pop</code></pre><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成一个可供发布的压缩包</span>$ <span class="token function">git</span> archive</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、新建代码库&quot;&gt;&lt;a href=&quot;#一、新建代码库&quot; class=&quot;headerlink&quot; title=&quot;一、新建代码库&quot;&gt;&lt;/a&gt;一、新建代码库&lt;/h2&gt;&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bas
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="http://coder.liusixin.cn/tags/Git/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>webpack实践--长缓存优化</title>
    <link href="http://coder.liusixin.cn/posts/22ed3b4c/"/>
    <id>http://coder.liusixin.cn/posts/22ed3b4c/</id>
    <published>2017-08-25T02:56:58.000Z</published>
    <updated>2017-08-25T02:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-场景"><a href="#1-1-场景" class="headerlink" title="1.1 场景"></a>1.1 场景</h2><p>有时候，我们在开发项目时只会写有关 app 的代码，不会改 vender 第三方库源码，当我们改变 app 代码的时候，我们希望打包出来 bundle 不要被 app 所影响而去  改变它的版本号。比如页面已经缓存了 vue，但我们并没有改变 vue 的代码，只改变自己的业务代码，用户完全没有下载新的打包出来的 vue 的代码。</p><p><strong>改变 app 代码，vender 变化</strong></p><h2 id="1-2-解决"><a href="#1-2-解决" class="headerlink" title="1.2 解决"></a>1.2 解决</h2><ul><li>提取 vendor</li><li>hash -&gt; chunkhash(代码块 hash)</li><li>webpack runtime 或者 manifest</li></ul><p>接下来我们用代码演示</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/main.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.conf.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> <span class="token string">'./src/main'</span><span class="token punctuation">,</span>    vendor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash].js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'vender'</span><span class="token punctuation">,</span>      minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>打包结果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180519-024130-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>从打包结果来看，公共代码已经被抽离出来，但是哈希值还是一样，如果修改一个，另一个肯定也会跟着变化，我们使用 chunkhash</p><pre class=" language-js"><code class="language-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  filename<span class="token punctuation">:</span> <span class="token string">'[name].[chunkhash].js'</span><span class="token punctuation">}</span></code></pre><p>来看结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180519-024923-2x-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从结果看，两个文件哈希值不一样了，试试修改 main 文件的代码，你会发现，两个文件还是同时会改变。</p><p>这里我们需要把 webpack runtime 提取出来</p><pre class=" language-js"><code class="language-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'vender'</span><span class="token punctuation">,</span>    minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'runtime'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/123123123-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这时修改 main 的代码，发现 vender 不会再改变，这样就达到了我们第一个目的，改变业务代码，不改变 vender</p><h2 id="2-1-场景"><a href="#2-1-场景" class="headerlink" title="2.1 场景"></a>2.1 场景</h2><p><strong>引入新模块，模块顺序变化，vendor hash 变化</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/main.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> module <span class="token keyword">from</span> <span class="token string">'./module'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/module.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">'module'</span><span class="token punctuation">;</span></code></pre><p>打包发现，vendor 的哈希值还是会变化，即便没有被修改。</p><p>原因是在打包的同时，webpack 会给每个模块，每个 chunk 一个 id，id 发生变化的时候也会导致哈希发生变化</p><h2 id="2-2-解决"><a href="#2-2-解决" class="headerlink" title="2.2 解决"></a>2.2 解决</h2><ul><li>NamedChunksPlugin</li><li>NamedModulesPlugin</li></ul><p>来解决模块顺序的变化而导致的 vendor hash 的变化</p><pre class=" language-js"><code class="language-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedChunksPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'vender'</span><span class="token punctuation">,</span>    minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'runtime'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>可以看到，chunks id 从 0，1，2 变为了名字，修改 main 代码，也会发现 vendor 的哈希值没变，main 和 manifest 变化了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/1234-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/1235-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以通过 NamedModulesPlugin 看到更清晰的模块，chunk 是有哪些模块组成<br>，模块的顺序也会影响哈希值的生成</p><pre class=" language-js"><code class="language-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedChunksPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="3-1-场景"><a href="#3-1-场景" class="headerlink" title="3.1 场景"></a>3.1 场景</h2><p><strong>动态引入模块时，vendor hash 变化</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/async.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'async'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/main.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> module <span class="token keyword">from</span> <span class="token string">'./module'</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./async'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果来看，vendor 不会变化，最新版本可能做了改进，但是还是会给这个  模块新加了  一个 id 0 ，而且没有 chunkName</p><h2 id="3-2-解决"><a href="#3-2-解决" class="headerlink" title="3.2 解决"></a>3.2 解决</h2><ul><li>定义动态模块的 chunkName</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/main.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> module <span class="token keyword">from</span> <span class="token string">'./module'</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: 'async' */</span> <span class="token string">'./async'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><ul><li>独立打包 vendor</li><li>抽出 manifest(webpack runtime)</li><li>使用 NamedChunksPlugin 和 NamedModulePlugin</li><li>动态模块给定模块名称</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-1-场景&quot;&gt;&lt;a href=&quot;#1-1-场景&quot; class=&quot;headerlink&quot; title=&quot;1.1 场景&quot;&gt;&lt;/a&gt;1.1 场景&lt;/h2&gt;&lt;p&gt;有时候，我们在开发项目时只会写有关 app 的代码，不会改 vender 第三方库源码，当我们改变 app 
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="webpack" scheme="http://coder.liusixin.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack实践--打包速度优化</title>
    <link href="http://coder.liusixin.cn/posts/9f161534/"/>
    <id>http://coder.liusixin.cn/posts/9f161534/</id>
    <published>2017-08-24T11:56:58.000Z</published>
    <updated>2017-08-24T11:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 在打包过程中可能会有各种因素导致打包速度很慢进而影响开发体验，接下来我们就逐个分析。</p><h3 id="可能因素"><a href="#可能因素" class="headerlink" title="可能因素"></a>可能因素</h3><ul><li>文件多</li><li>依赖多</li><li>页面多</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>方法一<ul><li>分开 vendor(第三方代码)和 app(业务代码)</li><li>DllPlugin(如果业务代码引入第三方库，通过这两个插件可以解决重复打包)</li><li>DllReferencePlugin</li></ul></li><li>方法二<ul><li>UglifyJsPlugin(耗时，并行处理)<ul><li>parallel(默认线程数-1 的速度)</li><li>cache</li></ul></li></ul></li><li>方法三<ul><li>HappyRack(文件处理串行变并行)</li><li>HappyRack.ThreadPool(线程池)</li></ul></li><li>方法四<ul><li>babel-loader<ul><li>options.cacheDirectory(缓存)</li><li>include(尽可能的缩小范围)</li><li>exclude(尽可能的缩小范围)</li></ul></li></ul></li><li>其它<ul><li>减少 resolve</li><li>Devtool：去除 sourcemap</li><li>cache-loader</li><li>升级 node</li><li>升级 webpack</li></ul></li></ul><p>我们以 vue 项目为例</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    vue<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token string">'vue-router'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    ui<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'element-ui'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/dll/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].dll.js'</span><span class="token punctuation">,</span>    library<span class="token punctuation">:</span> <span class="token string">'[name]'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/dll/'</span><span class="token punctuation">,</span> <span class="token string">'[name]-manifest.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'[name]'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.prod.conf.js</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    manifest<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../src/dll/ui-manifest.json'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    manifest<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../src/dll/vue-manifest.json'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  parallel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  sourceMap<span class="token punctuation">:</span> 去掉<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> i happypack -D</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HappyPack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'happypack'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>  loader<span class="token punctuation">:</span> <span class="token string">'happypack/loader?id=vue'</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> vueLoaderConfig<span class="token punctuation">}</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span>    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>      option<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./vue-loader.conf'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><blockquote><p>happypack 会并行处理 loader，但是如果文件过少反而会增加打包时间，一般在文件较多的大型项目下使用</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack 在打包过程中可能会有各种因素导致打包速度很慢进而影响开发体验，接下来我们就逐个分析。&lt;/p&gt;
&lt;h3 id=&quot;可能因素&quot;&gt;&lt;a href=&quot;#可能因素&quot; class=&quot;headerlink&quot; title=&quot;可能因素&quot;&gt;&lt;/a&gt;可能因素&lt;/h3&gt;&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="webpack" scheme="http://coder.liusixin.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>造轮子系列：JS封装拖拽组件</title>
    <link href="http://coder.liusixin.cn/posts/b1ea6a64/"/>
    <id>http://coder.liusixin.cn/posts/b1ea6a64/</id>
    <published>2017-08-20T05:57:39.000Z</published>
    <updated>2017-08-20T05:57:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装一个拖拽对象"><a href="#封装一个拖拽对象" class="headerlink" title="封装一个拖拽对象"></a>封装一个拖拽对象</h2><h3 id="1-如何让一个-DOM-元素动起来"><a href="#1-如何让一个-DOM-元素动起来" class="headerlink" title="1. 如何让一个 DOM 元素动起来"></a>1. 如何让一个 DOM 元素动起来</h3><p>拖拽的本质就是让 DOM 元素能够跟着鼠标运动起来。</p><p>在页面中创建一个 class 名为 drag 的 div 标签，它的基本样式如下:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>拖拽封装<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.drag</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>drag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>由于 <code>left/top</code> 会导致频繁的重排与回流，因此我们在处理元素运动时控制 <code>translate</code> 的值。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.drag</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先要考虑兼容性，需要判断当前浏览器环境支持的 <code>transform</code> 属性是哪一种</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取当前浏览器支持的 transform 兼容写法</span><span class="token keyword">function</span> <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> transform <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>    divStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">,</span>    _transforms <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">'transform'</span><span class="token punctuation">,</span>      <span class="token string">'webkitTransform'</span><span class="token punctuation">,</span>      <span class="token string">'MozTransform'</span><span class="token punctuation">,</span>      <span class="token string">'msTransform'</span><span class="token punctuation">,</span>      <span class="token string">'OTransform'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    len <span class="token operator">=</span> _transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> divStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 找到之后立即返回，结束函数</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>transform <span class="token operator">=</span> _transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果没有找到，就直接返回空字符串</span>  <span class="token keyword">return</span> transform<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该方法用于获取当前浏览器支持的 <code>transform</code> 属性。 如果返回空字符串，则表示该浏览器不支持 <code>transform</code>，这个时候就要考虑使用 <code>left/top</code>。</p><h3 id="2-如何获取元素的初始位置"><a href="#2-如何获取元素的初始位置" class="headerlink" title="2. 如何获取元素的初始位置"></a>2. 如何获取元素的初始位置</h3><p>获取元素的初始位置，需要声明一个专门用来获取元素样式的功能函数。获取元素样式的方法在 IE 中与其他浏览器中有所不同，所以需要考虑兼容性:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// IE通过 currentStyle 来获取元素的样式，</span>  <span class="token comment" spellcheck="true">// 其他浏览器通过 getComputedStyle 来获取</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span>defaultView<span class="token punctuation">.</span>getComputedStyle    <span class="token operator">?</span> document<span class="token punctuation">.</span>defaultView<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">[</span>property<span class="token punctuation">]</span>    <span class="token punctuation">:</span> elem<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有了这个方法，然后来实现一个获取元素位置的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getTargetPos</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> transform <span class="token operator">=</span> <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>transform<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> transformValue <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> transform<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>transformValue <span class="token operator">==</span> <span class="token string">'none'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      elem<span class="token punctuation">.</span>style<span class="token punctuation">[</span>transform<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'translate(0, 0)'</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> temp <span class="token operator">=</span> transformValue<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/-?\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token string">'position'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'static'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'relative'</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token string">'left'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token string">'left'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>        y<span class="token punctuation">:</span> y      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在拖拽过程中，需要不停地设置目标元素的位置，这样它才能够移动起来，因此还需要声明一个设置元素位置的方法。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// pos = { x: 200, y: 100 }</span><span class="token keyword">function</span> <span class="token function">setTargetPos</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> transform <span class="token operator">=</span> <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>transform<span class="token punctuation">)</span> <span class="token punctuation">{</span>    elem<span class="token punctuation">.</span>style<span class="token punctuation">[</span>transform<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'translate('</span> <span class="token operator">+</span> pos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">'px, '</span> <span class="token operator">+</span> pos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">'px)'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> pos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> pos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> elem<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有了这几个工具方法后，就可以使用更为完善的方式来实现上述要求的效果了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> drag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.drag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>drag<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> curPos <span class="token operator">=</span> <span class="token function">getTargetPos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTargetPos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> curPos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> curPos<span class="token punctuation">.</span>y  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="拖拽的原理"><a href="#拖拽的原理" class="headerlink" title="拖拽的原理"></a>拖拽的原理</h4><p>结合 <code>mousedown</code>、<code>mousemove</code>、<code>mouseup</code> 这三个事件来实现拖拽。在这些事件触发的回调函数中得到了一个事件对象，通过事件对象获取当前鼠标所处的位置。</p><ul><li><p>当鼠标按下 <code>mousedown</code> 时，记住鼠标的初始位置与目标元素的初始位置。当鼠标移动时，目标元素也跟着移动，因此鼠标与目标元素的位置有如下关系: <code>移动后鼠标位置-鼠标初始位置=移动后目标元素位置-目标元素初始位置</code>；</p></li><li><p>如果鼠标位置的差值用变量 <code>dis</code> 来表示，那么目标元素的位置就等于: <code>移动后目标元素位置=dis+目标元素的初始位置</code>；</p></li><li><p>通过事件对象中提供的鼠标位置，在鼠标移动时可以计算出鼠标移动位置的差值，然后根据上面的关系，计算出目标元素的当前位置，这样拖拽就能够实现了。</p></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>第一步：准备工作</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取目标元素对象</span><span class="token keyword">var</span> drag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.drag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 声明2个变量用来保存鼠标初始位直的x, y坐标</span><span class="token keyword">var</span> startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 声明2个变量用来保存目标元素初始位直的X, y坐标</span><span class="token keyword">var</span> sourceX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> sourceY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><ul><li>第二步：功能函数</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取当前浏览器支持的 transform 兼容写法</span><span class="token keyword">function</span> <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取元素属性</span><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取元素的初始位直</span><span class="token keyword">function</span> <span class="token function">getTargetPos</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 设置元素的初始位直</span><span class="token keyword">function</span> <span class="token function">setTargetPos</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> potions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>第三步：声明三个事件的回调</li></ul><pre class=" language-js"><code class="language-js">drag<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绑定在 mousedown 上的回调，event为传入的事件对象</span><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取鼠标初始位直</span>  startX <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>  startY <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取元素初始位置</span>  <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token function">getTargetPos</span><span class="token punctuation">(</span>drag<span class="token punctuation">)</span><span class="token punctuation">;</span>  sourceX <span class="token operator">=</span> pos<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  sourceY <span class="token operator">=</span> pos<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 绑定</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取鼠标当前位置</span>  <span class="token keyword">var</span> currentX <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>  <span class="token keyword">var</span> currentY <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 计算差值</span>  <span class="token keyword">var</span> distanceX <span class="token operator">=</span> currentX <span class="token operator">-</span> startX<span class="token punctuation">;</span>  <span class="token keyword">var</span> distanceY <span class="token operator">=</span> currentY <span class="token operator">-</span> startY<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 计算并设直元素当前位置</span>  <span class="token function">setTargetPos</span><span class="token punctuation">(</span>drag<span class="token punctuation">,</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token punctuation">(</span>sourceX <span class="token operator">+</span> distanceX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token punctuation">(</span>sourceY <span class="token operator">+</span> distanceY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">end</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span></code></pre><p>至此，一个简单的拖拽就实现了。</p><h2 id="使用面向对象进行封装"><a href="#使用面向对象进行封装" class="headerlink" title="使用面向对象进行封装"></a>使用面向对象进行封装</h2><p>我们的目标是，只要声明一个拖拽实例，然后传入目标元素就自动具备可以被拖拽的功能。</p><p>为了避免变量污染，我们需要将模块放置在一个函数自执行方式模拟的块级作用域中。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来我们如何用面向对象的思维合理地处理属性与方法的位置，需要考虑以下问题：</p><ul><li><strong>构造函数中</strong>：属性与方法为当前实例所单独拥有，只能被当前实例访问，并且每声明一个实例，其中的方法都会被重新创建一次。</li><li><strong>原型中</strong>： 属性与方法为所有实例共同拥有，可以被所有实例访问，新声明的实例不会重复创建方法。</li><li><strong>模块作用域中</strong>：属性和方法不能被任何实例访问，但是能被内部方法访问，新声明的实例不会重复创建相同的方法。</li></ul><p>对于方法的判断则比较简单，因为构造函数中的方法总是在声明一个新的实例时被重复创建，因此声明方法时应尽量避免出现在构造函数中。如果你的方法中需要用到构造函数中的变量，或者想要公开，那么就需要放在原型中。如果方法需要私有不被外界访问，那么就放置在模块作用域中。</p><p>使用面向对象封装上面的几点必须认真思考。如果在封装时没有思考清楚，很可能会遇到很多意想不到的 bug。</p><p>直接上代码：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这是一个私有属性，不需要被实例访问</span>  <span class="token keyword">var</span> transform <span class="token operator">=</span> <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Drag</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 放在构造函数中的属性，被每一个实例所单独拥有</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token keyword">typeof</span> selector <span class="token operator">==</span> <span class="token string">'Object'</span> <span class="token operator">?</span> selector <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sourceX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sourceY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 原型</span>  Drag<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">:</span> Drag<span class="token punctuation">,</span>    init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 初始时需要做哪些事情</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDrag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 稍作改造，仅用于获取当前元素的属性，类似于getName</span>    getStyle<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span>defaultView<span class="token punctuation">.</span>getComputedStyle <span class="token operator">?</span> document<span class="token punctuation">.</span>defaultView<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用来获取当前元素的位直信息，注意与之前的不同之处</span>    getPosition<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transform<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> transformValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transformValue <span class="token operator">==</span> <span class="token string">'none'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">[</span>transform<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'translate(0, 0)'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> temp <span class="token operator">=</span> transformValue<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/-?\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          pos <span class="token operator">=</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            y<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token string">'position'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'static'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'relative'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          pos <span class="token operator">=</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            y<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用来设直当前元素的位置</span>    setPosition<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transform<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">[</span>transform<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'translate('</span> <span class="token operator">+</span> pos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">'px, '</span> <span class="token operator">+</span> pos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">'px)'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> pos<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> pos<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 该方法用来绑定事件</span>    setDrag<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        self<span class="token punctuation">.</span>startX <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>        self<span class="token punctuation">.</span>startY <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        <span class="token keyword">var</span> pos <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        self<span class="token punctuation">.</span>sourceX <span class="token operator">=</span> pos<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        self<span class="token punctuation">.</span>sourceY <span class="token operator">=</span> pos<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> currentX <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>        <span class="token keyword">var</span> currentY <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        <span class="token keyword">var</span> distanceX <span class="token operator">=</span> currentX <span class="token operator">-</span> self<span class="token punctuation">.</span>startX<span class="token punctuation">;</span>        <span class="token keyword">var</span> distanceY <span class="token operator">=</span> currentY <span class="token operator">-</span> self<span class="token punctuation">.</span>startY<span class="token punctuation">;</span>        self<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          x<span class="token punctuation">:</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>sourceX <span class="token operator">+</span> distanceX<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          y<span class="token punctuation">:</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>sourceY <span class="token operator">+</span> distanceY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">end</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// do other things</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 私有方法，仅仅用来获取 transform 的兼容写法</span>  <span class="token keyword">function</span> <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> transform <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>      divStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">,</span>      transformArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'transform'</span><span class="token punctuation">,</span> <span class="token string">'webkitTransform'</span><span class="token punctuation">,</span> <span class="token string">'MozTransform'</span><span class="token punctuation">,</span> <span class="token string">'msTransform'</span><span class="token punctuation">,</span> <span class="token string">'OTransform'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>      len <span class="token operator">=</span> transformArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transformArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> divStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> transform <span class="token operator">=</span> transformArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> transform<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 对外暴露方法</span>  window<span class="token punctuation">.</span>Drag <span class="token operator">=</span> Drag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用时只需</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用</span><span class="token keyword">new</span> <span class="token class-name">Drag</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样一个拖拽对象就封装完成了，封装过程代码都有注释详解，很简单。</p><h2 id="将拖曳对象扩展为一个-jQuery-插件"><a href="#将拖曳对象扩展为一个-jQuery-插件" class="headerlink" title="将拖曳对象扩展为一个 jQuery 插件"></a>将拖曳对象扩展为一个 jQuery 插件</h2><p>jQuery 中可以使用 <code>$.extend</code> 扩展 jQuery 工具方法，来使用 <code>$.fn.extend</code> 扩展原型方法。当然，这里的拖拽插件扩展为原型方法是最合适的。</p><p>在上面封装的代码基础上我们再加一些</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过扩展方法将拖曳扩展为 jQuery 的一个实例方法</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    canDrag<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Drag</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 注意:为了保证 jQuery 所有的方法都能够链式访问， </span>      <span class="token comment" spellcheck="true">// 每一个方法的最后都需妥返回 this, 即返回 jQuery 实例</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就能够很轻松地让目标 DOM 元素具备拖拽能力了，使用时只需</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#target'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">canDrag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;封装一个拖拽对象&quot;&gt;&lt;a href=&quot;#封装一个拖拽对象&quot; class=&quot;headerlink&quot; title=&quot;封装一个拖拽对象&quot;&gt;&lt;/a&gt;封装一个拖拽对象&lt;/h2&gt;&lt;h3 id=&quot;1-如何让一个-DOM-元素动起来&quot;&gt;&lt;a href=&quot;#1-如何让一个-DOM-
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="造轮子系列" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E9%80%A0%E8%BD%AE%E5%AD%90%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="jQuery" scheme="http://coder.liusixin.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的服务器缓存策略</title>
    <link href="http://coder.liusixin.cn/posts/cd5a0d4f/"/>
    <id>http://coder.liusixin.cn/posts/cd5a0d4f/</id>
    <published>2017-08-18T12:42:27.000Z</published>
    <updated>2017-08-18T12:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要了解缓存首先我们先了解下浏览器的执行机制是怎样的，先看一张图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-3f0f58a98ce21319.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>浏览器对我们的静态资源，比如说 js css html 图片 字体 等都是有缓存策略的，如果说浏览器自身有缓存，它就会从自己本身的缓存里读了，我们也可以通过网络层类似于我们的服务器包括 Nginx 还有各种各样的静态资源服务器来设置我们的缓存。</li><li>如果本机的浏览器有缓存的话，那么他直接就在这个缓存里就获取到了，然后呈现给用户</li><li>那么这个缓存还需要查看，如果是在网络上会查看它是否是过期的：<ol><li>如果不是过期的，它也是从本地的缓存中读取之后就可以了；</li><li>如果是过期的就需要看一下这个资源有没有 Etag 这样的东西，Etag 是浏览器向服务器发送请求时的一个请求报头，服务器那边也会响应这个请求报头，然后两边共同的匹配一下资源是否过期，如果有 Etag 的话，它就会向浏览器注入 If-None-Match 这样的头。然后向我们的 webserver 发过去，然后服务器那边做一个基础的策略：是否是匹配的 Etag ，如果是匹配的就返回一个 304，如果没有匹配就给 Etag 这个文件一个戳，然后返回 200 更新，这样下次再请求的时候有了这个 Etag 就不会再把整个的资源再重新拉回来了。</li><li>如果没有发现 Etag 的话，在我们服务器还可以设 Expires ，Expires 这个东西就是过期时间，他发现 Last-Modified 这样一个策略，它会向我们的服务器发送一个 If-Modified-Since ，就是说上次的修改时间，然后和服务器的 Expires 做一个对比，如果发现过期了就返回一个新的，如果是没过期就返回一个 304。</li><li>如果是上面的 Etag 和 Last-Modified 两个值都没有，那么他就会直接向我们的 web服务器发送一个请求，然后是请求响应–缓存协商</li><li>如果是上面的 Etag 和 Last-Modified 这两个值都进行设置了，那么就是会将两个值都比较，都满足了之后才会最终得到一个响应，没有谁先谁后的问题，那么当我们设置对应的文件的时候，你会发现很多对应的服务器都是同时的对他们进行设置的，就是设置了 Etag 又设置了 Last-Modified ，所以说当你这个文件有对应的修改的时候，你还要及时的去修改这个 Last-Modified 就是里面的一个 Expires 的东西。</li><li>Etag 相比于 Expires 有很多优点，它是一个基于文件的一个戳的比较，可以实现一个实时的更新，Expires 这个东西实际上是做不到那种秒秒级别的，它是一个 Unix 的一个时间戳，他做不到那种特别精细的时间的控制。</li><li>现在的话你也可以在 Header 里面设 control ，可以直接重写掉 Expires 这样的东西。</li><li>如果是一个整个的项目，你不是运维工程师的话，你可以跟运维去说：我需要设置这个文件对应的强缓，就比如说：这个文件 30 年不过期，例如 jquery 这种长时间不过期的文件，这个的话一般就用 Expires 的比较多，就是说过期时间设置较长这个就是强缓，那么 Etag 的话一般是针对的我们的业务的文件。</li></ol></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ul><li>你需要知道的是：在任何的其他的服务器里面，它们这个的逻辑、思维是一样的，关键是要去看你是怎么去配置的。</li><li>操作 Nginx 的基础是你已经在服务器端安装并配置好了，这里以 Centos 为例。</li></ul><p><strong>编辑nginx.conf</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-4b130ea412d1ad38.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>找到对应的静态资源路径</strong></p><p>比如 <code>/usr/share/nginx/</code> 下的 <code>html</code> 文件夹下 <code>index.html</code>，我们在 body 中加入 <code>jquery</code> 文件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.2.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>同时在同级目录下添加 img 文件夹，放入几张图片。</p><p>在 <code>index.html</code> 中添加这些 <code>img</code> 标签引入图片。配置nginx.conf 文件。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-a34a2a533047951e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>在请求所有的目录的路径中匹配 图片 正则表达式，如果匹配的话就是下面的 第一行是 文件的具体路径；第二行是过期时间 30天。</p><p>还有一个需要注意的是：再进行验证的时候不能把下图中的这个 <code>Disable cache</code> 勾选上，这个勾选上的话就是禁用缓存了，这里我们实现的是需要缓存的，所以是绝对不能勾选的</p><p><strong>来分析下请求到的东西</strong></p><ul><li><code>document</code><br><img src="http://cdn-blog.liusixin.cn/9064013-32fd9786edf42026.png" alt=""><ul><li>请求报文中的 <code>Accept-Encoding</code> 这个可以看到是支持 gzip 压缩的。</li><li>返回报文中的 <code>ETag</code> 加了一个戳，这个是 nginx 默认就开启的，如果是想要关闭的话，在 nginx.conf 文件中的 http 对象里加 etag: off; 即可，开启就是 on，不加的话默认的就是 on</li><li>可以看到下面请求报文中有一个 If-None-Match 的值也是和上面的 Etag 的值是一样的。</li></ul></li><li><code>jquery</code><br><img src="http://cdn-blog.liusixin.cn/9064013-328e1800ede99170.png" alt=""><ul><li>因为这这里默认开启了 <code>Etag</code> 所以当你下次刷新的时候，它会跟服务器做对比，如果 <code>Etag</code> 的值是一样的说明没有改变就返回的是 304 ，可以看到下面请求报文中有一个 <code>If-None-Match</code> 的值也是和上面的 Etag 的值是一样的</li></ul></li><li>再次刷新浏览器，查看 <code>document</code><br><img src="http://cdn-blog.liusixin.cn/9064013-2bc9122ba1eb38e1.png" alt=""><ul><li>这个返回的是 304 是因为我们的 <code>index.html</code> 文件没有改变，<code>ETag</code> 的值也没有发生改变，如果 <code>Etag</code> 值是一样的说明没有改变就返回的是 304 ，可以看到下面请求报文中有一个 <code>If-None-Match</code> 的值也是和上面的 <code>Etag</code> 的值是一样的</li></ul></li><li>开启<code>gzip</code>，同时为了看出效果我们在第二个命令行窗口中修改 <code>index.html</code> 文件之后再刷新浏览器<ul><li>也会发现 <code>document</code> 返回的报文中多了一个 <code>gzip</code> 的属性，然后是可以看到下面请求报文中有一个 <code>If-None-Match</code> 的值和上面的 <code>Etag</code> 的值已经不一样的，这个的机制是以  <code>If-None-Match</code> 后面的戳去匹配 <code>Etag</code> 也就是服务器响应的戳，发现是不一样的就会重新将更新后的资源拿过来 状态码也是 200<br><img src="http://cdn-blog.liusixin.cn/9064013-f46f88dfd4c03450.png" alt=""></li><li>如果是没有这个 <code>Etag</code> ，它会校验 <code>Last-Modified</code> 和 <code>If-Modified-Since</code> 的戳是否一样，服务器来返回相应的状态。</li></ul></li></ul><p><strong>接下来在第一个命令行窗口中在 nginx.conf 文件中增加一个 <code>epirse</code>，过期时间的属性，对比一下效果</strong></p><ul><li>这个时候再刷新浏览器查看<ul><li>这个时候会发现返回报文中多了一个 Expires 过期时间的属性，后面的值刚好是今天再加上 30 天之后的具体日期<br><img src="http://cdn-blog.liusixin.cn/9064013-5303db4c06044de7.png" alt=""></li></ul></li><li>还可以在 nginx.conf 文件中加一句话：告诉浏览器不要缓存文件 <code>add_header Cache-Control no-cache;</code><br><img src="http://cdn-blog.liusixin.cn/9064013-e9a371ea740bf499.png" alt=""></li><li>再刷新浏览器，第一次是 200 第二次是 304 ，还有就是服务器返回时也有明确的标识：<code>Cache-Control: no-cache</code> 就是告诉浏览器不要缓存，然后具体的资源文件是像服务器请求的，服务器来决定返回的状态码<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-eb583788192f686f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-cc3f355f290ef1ef.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将上面的东西都尝试的设置一遍之后，那么 Nginx 上比较关键的东西：<code>Gzip</code> 、<code>Etag</code>、 <code>Expires</code> （过期时间）、<code>Cache-Control</code> 这些就都配置好了；</p><p><code>Cache-Control</code> 下面还会有一些非常细致的东西：如果你在 <code>Cache-Control</code> 中配置了更多的过期时间就可以直接把 <code>Expires</code> 直接重写掉了，在一些不支持 <code>HTTP.1</code> 的浏览器里设置 <code>Expires</code> 是没有用的，所以你还是要再设置一个 <code>Cache-Control</code></p><p>百度官网的一个 js 文件的响应头部，有颜色的那些对我们来说都是需要掌握的东西<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-f83dc1adeea3ed85.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>掌握这个东西之后，对于以后来讲我们就可以跟运维去聊这个东西，比如说：我们的 jquery ，你就可以直接告诉他，我的这个jquery需要在页面上缓存多久多久，这个就可以设置一个 过期时间 <code>Expires</code> 或者是 <code>Cache-Control</code>，我的其他业务文件可能会临时变，所以需要配置 <code>Etag</code> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;要了解缓存首先我们先了解下浏览器的执行机制是怎样的，先看一张图：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
   
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="http://coder.liusixin.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的反向代理与负载均衡</title>
    <link href="http://coder.liusixin.cn/posts/75614776/"/>
    <id>http://coder.liusixin.cn/posts/75614776/</id>
    <published>2017-08-17T14:40:27.000Z</published>
    <updated>2017-08-17T14:40:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx 是一个非常轻量级的服务器，他虽轻但是他最大的优点就是可以承载大量的并发，所以说一般的话很少有用 Node 直接去做服务器让用户去访问的，因为 Node 本身就需要做非 常非常多的事情，虽然说简单的可以使用 Node 直接开启，但是对于负载和并发 Node 是弱项，就是反向代理和并发是 Node 整个的弱项，所以我们需要在前面用 Nginx 挡一层，这样的话对于我们整个的系统的运维架构来讲也是一个非常得力的一个助手，还有就是跟其他的比如说我们后层整个架构的设计属于运维的这一块，它也是有一种先天优势的这样的服务器</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>什么是反向代理与负载均衡<ul><li>反向代理</li><li>负载均衡</li></ul></li><li>Nginx 负载均衡的实现</li><li>HTTP UPstream 模块<ul><li>什么是 HTTP Upstream 模块</li><li>ip_hash 指令 – 落到哪个上</li><li>server 指令 – server 的权重</li><li>UPstream 指令</li></ul></li><li>其他负载均衡的方法</li></ul><h3 id="1-什么是反向代理与负载均衡"><a href="#1-什么是反向代理与负载均衡" class="headerlink" title="1. 什么是反向代理与负载均衡"></a>1. 什么是反向代理与负载均衡</h3><h4 id="1-1-反向代理"><a href="#1-1-反向代理" class="headerlink" title="1.1 反向代理"></a>1.1 反向代理</h4><ul><li>比如说平时我们上谷歌上不了然后需要翻墙，谷歌是我们明确的去要访问的站点，这个时候我们会用一些翻墙的工具（代理服务器），这个代理服务器帮我们取回谷歌给我们看，这个就是一个正向的代理。</li><li>那么反向 代理刚好是相反的：我们不知道去取哪一台机器，然后代理帮我们去取，然后把取到的内容返回给我们。</li><li>一个是明确的知道，一个是不知道，这就是正向代理和反向代理</li></ul><p>就是用自己的计算机 A 想访问国外的网站 B ，访问不了，就有一个中间的服务器 C 它去访问国外的网站 B ，其实如果是把这个 C 装到我们自己的电脑上，我们自己的电脑访问 C ，然后 C 再去访问 B ，这个时候这个 C 就叫代理服务器，这个时候就是正向代理，他有一个特点，就是我们一定知道要访问哪个网站。</p><p>还有就是当我们有一个服务器集群，而且服务器集群中的每台服务器的内容都是一样的时候，同样我们从个人的电脑访问到比如说 现在我们有四台 Node 的机器 ，但是我们无法访问，这个时候有第三方的服务器是可以访问到 那四个 Node 的机器的 ，这个时候我们就可以借助这个第三方的服务器去访问， 但是我们并不知道它最后会落到四台中的哪一台机器上，这个就是反向代理。</p><h4 id="1-2-负载均衡"><a href="#1-2-负载均衡" class="headerlink" title="1.2 负载均衡"></a>1.2 负载均衡</h4><p>跟上面的反向代理有一个息息相关的东西就是负载均衡，就是上面的四台机器，你不知道最终要找的是谁，但是 Nginx 知道，它会帮你找到压力最小的那个服务器然后返回给你，就这样的可以分担你的压力</p><h3 id="2-Nginx-负载均衡的实现"><a href="#2-Nginx-负载均衡的实现" class="headerlink" title="2. Nginx 负载均衡的实现"></a>2. Nginx 负载均衡的实现</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-5351f04fbffc7d00.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="3-HTTP-UPstream-模块"><a href="#3-HTTP-UPstream-模块" class="headerlink" title="3. HTTP UPstream 模块"></a>3. HTTP UPstream 模块</h3><h4 id="3-1-什么是-HTTP-UPstream-模块"><a href="#3-1-什么是-HTTP-UPstream-模块" class="headerlink" title="3.1 什么是 HTTP UPstream 模块"></a>3.1 什么是 HTTP UPstream 模块</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-da79718b6ee07a05.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="3-2-ip-hash-指令"><a href="#3-2-ip-hash-指令" class="headerlink" title="3.2 ip_hash 指令"></a>3.2 ip_hash 指令</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-a57f7167a6c858e0.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>比如用户落在这样一台服务器上了，然后下次用户一刷新又落到别的上面了，这个就不太对了，所以 ip_hash 是为了保证用户再次刷新的时候还能落到他之前落到的那台服务器上，这样就 ok 了</p><h4 id="3-3-server-指令"><a href="#3-3-server-指令" class="headerlink" title="3.3 server 指令"></a>3.3 server 指令</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-359a00ea79ff973f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以指定这台服务器的权重，就是说如果你知道了这台机器要比别的优秀，那么你可以给它的权重给标的高一点，那么更多的请求就会落到这个你认为优秀的机器上面，默认是 1:1:1 的，这个 1:1:1 可以举成 2:1:1 的例子来说明：就是现在有三台机器，第一台的权重被设置为了 2 后面两台都是 1 ，这样的话落到第一台的几率就是 2 / 3，后面两台的都是 1 / 3。</p><h4 id="3-4-UPstream-指令"><a href="#3-4-UPstream-指令" class="headerlink" title="3.4 UPstream 指令"></a>3.4 UPstream 指令</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-dad3a8ddda32b2dd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="4-其他负载均衡的方法"><a href="#4-其他负载均衡的方法" class="headerlink" title="4. 其他负载均衡的方法"></a>4. 其他负载均衡的方法</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-2672d961aea9e9b6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="macOS-部署-Nginx"><a href="#macOS-部署-Nginx" class="headerlink" title="macOS 部署 Nginx"></a>macOS 部署 Nginx</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-176cb5dcf31334ec.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个时候你会发现页面 title 的 icon 是 Jenkins 的头像，这个原因是因为如果你装过 Jenkins 的话，它是非常顽固的会不停的去折腾、重启你的 8080 端口，你如果是 kill 是杀不掉的，你需要用下面的命令就可以把它给停掉了</p><pre class=" language-shell"><code class="language-shell">## 停掉 jenkinssudo launchctl unload/Library/LaunchDaemons/org.jenkins-ci.plist## 停掉之后如果想启动 jenkinssystemctl start jenkins</code></pre><p>想要进行上面的 反向代理和负载均衡 还需要对 nginx 进行配置</p><p><code>/etc/nginx/</code> 这个是 macOS 下 nginx 的安装目录，其他系统的可能会不大一样</p><pre class=" language-shell"><code class="language-shell">## 先进入 nginx 目录cd /etc/nginx/## 查看该目录下的所有文件，可以在下图看到 nginx 目录ls</code></pre><p>可以看到里面有个 nginx.conf 的文件，这个就是 nginx 的配置文件<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-831c21bffcd953a4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ul><li><code>##user</code> 指的是哪个用户能用，可以将后面的 nobody 修改成你指定谁用的那个用户的用户名</li><li><code>worker_processes</code> 这个是你的一个工作的进程，其实实际上指的就是 CPU 的核数，如果你是 4 核的话，这个值就是 4，你需要看到自己的电脑是几核的处理器，然后你可以在这里面做相应的设置，最多就是 2 倍，一般就是标准的几核就是几个 或者 2 倍，这个不能乱设</li><li><code>error_log</code> 这个就是整个产生错误的日志<ul><li>nginx 的日志跟我们 Node 的日志比一点都不逊色，它们的区别是：nginx 可以完全的记录所有的请求的日志，因为它是一个向外去扩散的一个去做负载均衡的口子，你的那个 Node 是你的项目里的一些 log ，两个人都各自有分工。</li><li>这个 log 是会非常庞大的，所以像有的一些大公司会有专门去存 log 的服务器，那些数据挖掘的人或者是运维会每天去查这个日志，从这些日志里其实可以拿到很多很多的东西，所以这个日志是至关重要的，对于大公司来讲这个是比命还重要的东西，所以 nginx 的日志是万万不能丢的，任何语言里的日志它们都会分成 level（级别）。</li><li>上面的第一行就是 出错的日志 ，第二行是警告的，第三行是基本信息。</li></ul></li><li><code>pid</code> 这个是 nginx 非常重要的一个配置文件，这个就别动就好了</li><li><code>events -&gt; worker_connections</code> 这个就是整个的连接数，就是说你一下子往你的这个上面压多少</li><li><code>http</code> 模块 在这个里面可以去指定一下所谓的我们平时的 gzip 、Etag 等等都是从这里去开启的</li><li><code>server</code><ul><li><code>listen</code> 这里是监听 8080 端口</li><li><code>charset koi8-r</code>这个是它输出的语言</li><li><code>access_log</code> 这个是它的日志</li><li><code>location</code> 这个非常重要，里面的 root 不是指的同户名，而是当前的 html 文件夹，它会从下面的顺序依次开始找，直到找到对应的一个文件然后去给你吐</li><li><code>error_page</code> 这个是 Node 控制出错的，有时你会发现百度、腾讯或者是其他的一些公司的 404 是一样的，原因就是在这的，所有的请求都固定到这，然后他把一些出错都控制好 是这样的一个原因</li><li>下面还有一些 500 502 503 504 ，他都把这些出错导到 50x 去了，所以这些不是真正的内部的系统去做的。而是一些做负载均衡的服务器去做的</li><li><code>location ~ \.php$</code> 这些就是用正则去匹配一些更复杂的，就是你真正的路由都可以在这里面去写</li></ul></li></ul><pre class=" language-shell"><code class="language-shell">## 这个就是我们前端需要给运维做的东西，这个是从复杂的 nginx 里去抽出来的worker_processes 4; ## 这个是你的一个工作的进程，其实实际上指的就是 CPU 的核数events{    worker_connections 1024; ## 这个就是整个的连接数，就是说你一下子往你的这个上面压多少}## 上面两个其实你不给运维的话也是可以的，他都不要，你写了也没用，关键的就是下面的 httphttp{    ## 这个是负载均衡的所有的 server ，这里的 IP 地址需要写成你需要用到的真实有效的才行    upstream firsttest{        server 192.168.230.128;        server 192.168.230.129;    }    server{        ## 通过 server 监听的是 8080        listen 8080;        ## 当你访问 / 这个路由地址的时候 通过下面的  proxy_pass 代理去访问 firsttest 然后就可以了        location / {            proxy_pass http://firsttest;        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Nginx 是一个非常轻量级的服务器，他虽轻但是他最大的优点就是可以承载大量的并发，所以说一般的话很少有用 Node 直接去做服务器让用户去
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="运维" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="http://coder.liusixin.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>如何开发一个响应式页面</title>
    <link href="http://coder.liusixin.cn/posts/e5c359b0/"/>
    <id>http://coder.liusixin.cn/posts/e5c359b0/</id>
    <published>2017-08-13T05:58:59.000Z</published>
    <updated>2017-08-13T05:58:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍如何开发一个移动端响应式页面。</p></blockquote><h2 id="步骤-1-添加-viewport-meta-标签"><a href="#步骤-1-添加-viewport-meta-标签" class="headerlink" title="步骤 1 - 添加 viewport meta 标签"></a>步骤 1 - 添加 viewport meta 标签</h2><p>在页头 head 标签内添加 viewport meta 标签是实现响应式页面的第一步，以便优化在移动设备上的展示效果，其推荐的设置为：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="步骤-2-使用-Media-Queries"><a href="#步骤-2-使用-Media-Queries" class="headerlink" title="步骤 2 - 使用 Media Queries"></a>步骤 2 - 使用 Media Queries</h2><p>Media Queries 是为指定特性的浏览器视窗应用指定样式的手段，不同的样式代码，相当于为不同的设备应用了不同的 CSS 样式。</p><p><strong>参数</strong></p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">介绍</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>min-width | 当视窗宽度大于或等于指定值时，@media 规则下的样式将被应用<br>max-width | 当视窗宽度小于或等于指定值时，@media 规则下的样式将被应用<br>min-height | 当视窗高度大于或等于指定值时，@media 规则下的样式将被应用<br>max-height | 当视窗高度小于或等于指定值时，@media 规则下的样式将被应用<br>orientation=portrait | 当视窗高度大于或等于宽度时，@media 规则下的样式将被应用<br>orientation=landscape | 当视窗宽度大于高度时，@media 规则下的样式将被应用…</p><p><strong>用法</strong></p><h3 id="方法-1，使用-link-标签，根据指定特性引入特定的外部样式文件"><a href="#方法-1，使用-link-标签，根据指定特性引入特定的外部样式文件" class="headerlink" title="方法 1，使用 link 标签，根据指定特性引入特定的外部样式文件"></a>方法 1，使用 link 标签，根据指定特性引入特定的外部样式文件</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(max-width: 640px)<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>max-640px.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="方法-2，直接在-style-标签或-样式文件内使用-media-规则"><a href="#方法-2，直接在-style-标签或-样式文件内使用-media-规则" class="headerlink" title="方法 2，直接在 style 标签或 样式文件内使用 @media 规则"></a>方法 2，直接在 style 标签或 样式文件内使用 @media 规则</h3><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*当视窗宽度小于或等于 640px 时，这里的样式将生效*/</span><span class="token punctuation">}</span></code></pre><p><strong>样式断点</strong></p><p>Media Queries 所使用的查询参数的临界值又可称为「样式断点」。</p><p>依据目标设备的分辨率，制定一套合适的样式断点，并为不同的断点定制必要的 CSS 样式。 移动端优先的页面，可使用 min-width 查询参数从小到大来定义断点。常见的样式断点：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>mobile | 移动设备断点，视窗宽度 ≤ 768 px<br>tablet | 平板电脑设备断点，视窗宽度 ≥ 769 px<br>desktop | 桌面电脑断点，视窗宽度 ≥ 1024 px<br>widescreen | 宽屏电脑断点，视窗宽度 ≥ 1216 px<br>fullhd | 高清宽屏电脑断点，视窗宽度 ≥ 1408 px…</p><p><strong>如果针对 tablet 及以上的设备定制样式，我们就可以这样写了：</strong></p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 769px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* tablet 及以上的设备，页面背景色设置为红色 */</span>  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="步骤-3-使用-Viewport-单位及-rem"><a href="#步骤-3-使用-Viewport-单位及-rem" class="headerlink" title="步骤 3 - 使用 Viewport 单位及 rem"></a>步骤 3 - 使用 Viewport 单位及 rem</h2><p>Media Queries 只解决了「为不同特性的浏览器视窗使用不同的样式代码」的问题，而 Viewport 单位及 rem 的应用，则是为了解决第二个问题：让页面元素的尺寸能够依据浏览器视窗尺寸变化而平滑变化。</p><h3 id="方法-1-仅使用-vw-作为-CSS-长度单位"><a href="#方法-1-仅使用-vw-作为-CSS-长度单位" class="headerlink" title="方法 1 - 仅使用 vw 作为 CSS 长度单位"></a>方法 1 - 仅使用 vw 作为 CSS 长度单位</h3><p>在仅使用 vw 单位作为唯一 CSS 单位时，我们需遵守：</p><ul><li>利用 Sass 函数将设计稿元素尺寸的像素单位转换为 vw 单位</li></ul><pre class=" language-css"><code class="language-css">// iPhone <span class="token number">6</span>尺寸作为设计稿基准$<span class="token property">vw_base</span><span class="token punctuation">:</span> <span class="token number">375</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@function</span> <span class="token function">vw</span><span class="token punctuation">(</span>$px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token atrule"><span class="token rule">@return</span> <span class="token punctuation">(</span>$px / $vm_base<span class="token punctuation">)</span> * 100vw<span class="token punctuation">;</span></span><span class="token punctuation">}</span></code></pre><ul><li>无论是文本字号大小还是布局高宽、间距、留白等都使用 vw 作为 CSS 单位</li></ul><pre class=" language-scss"><code class="language-scss"><span class="token selector">.mod_nav </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token selector"><span class="token parent important">&amp;</span>_list </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">vw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token function">vw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token function">vw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内间距</span>        <span class="token selector"><span class="token parent important">&amp;</span>_item </span><span class="token punctuation">{</span>            <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">vw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字体大小</span>            <span class="token selector"><span class="token parent important">&amp;</span>_logo </span><span class="token punctuation">{</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">vw</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 宽度</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">vw</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 高度</span>                <span class="token selector">img </span><span class="token punctuation">{</span>                    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>                    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>                    <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token parent important">&amp;</span>_name </span><span class="token punctuation">{</span>                <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token function">vw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>1 物理像素线（也就是普通屏幕下 1px ，高清屏幕下 0.5px 的情况）采用 transform 属性 scale 实现</li></ul><pre class=" language-scss"><code class="language-scss"><span class="token selector">.mod_grid </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token selector"><span class="token parent important">&amp;</span>::after </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现1物理像素的下边框线</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token atrule"><span class="token rule">@media</span> only screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>            <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">0%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token number">...</span><span class="token punctuation">}</span></code></pre><ul><li>对于需要保持高宽比的图，应改用 padding-top 实现</li></ul><pre class=" language-scss"><code class="language-scss"><span class="token selector">.mod_banner </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用padding-top 实现宽高比为 100:750 的图片区域</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">percentage</span><span class="token punctuation">(</span><span class="token number">100</span>/<span class="token number">750</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token selector">img </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由此，我们不需要增加其他任何额外的脚本代码就能够轻易实现一个常见布局的响应式页面。</p><h3 id="方法-2-vw-搭配-rem，寻找最优解"><a href="#方法-2-vw-搭配-rem，寻找最优解" class="headerlink" title="方法 2 - vw 搭配 rem，寻找最优解"></a>方法 2 - vw 搭配 rem，寻找最优解</h3><p>方法 1 实现的响应式页面虽然看起来适配得很好，但是你会发现由于它是利用 Viewport 单位实现的布局，依赖于视窗大小而自动缩放，无论视窗过大还是过小，它也随着视窗过大或者过小，失去了最大最小宽度的限制，有时候不一定是我们所期待的展示效果。试想一下一个 750px 宽的设计稿在 1920px 的大屏显示器上的糟糕样子。</p><p>我们可以结合 rem 单位来实现页面的布局。rem 弹性布局的核心在于根据视窗大小变化动态改变根元素的字体大小，那么我们可以通过以下步骤来进行优化：</p><ol><li>给根元素的字体大小设置随着视窗变化而变化的 vw 单位，这样就可以实现动态改变其大小</li><li>其他元素的文本字号大小、布局高宽、间距、留白都使用 rem 单位</li><li>限制根元素字体大小的最大最小值，配合 body 加上最大宽度和最小宽度，实现布局宽度的最大最小限制…</li></ol><p>核心代码实现如下：</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// rem 单位换算：定为 75px 只是方便运算，750px-75px、640-64px、1080px-108px，如此类推</span><span class="token property"><span class="token variable">$vw_fontsize</span></span><span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// iPhone 6尺寸的根元素大小基准值</span><span class="token keyword">@function</span> <span class="token function">rem</span><span class="token punctuation">(</span><span class="token variable">$px</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">@return</span> <span class="token punctuation">(</span><span class="token variable">$px</span> <span class="token operator">/</span> <span class="token variable">$vw_fontsize</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根元素大小使用 vw 单位</span><span class="token property"><span class="token variable">$vw_design</span></span><span class="token punctuation">:</span> <span class="token number">750</span><span class="token punctuation">;</span><span class="token selector">html </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token variable">$vw_fontsize</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token variable">$vw_design</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同时，通过Media Queries 限制根元素最大最小值</span>    <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@media</span> screen <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">540</span>px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">108</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// body 也增加最大最小宽度限制，避免默认100%宽度的 block 元素跟随 body 而过大过小</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">540</span>px<span class="token punctuation">;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在实际工作过程中，考虑到设计以及开发成本，视觉设计师是不大可能为每种不同分辨率的设备分别设计不同的稿子的，拿移动端页面来说，通常会以 iPhone 6 的分辨率（宽为 750 px）作为基准分辨率来出设计稿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文主要介绍如何开发一个移动端响应式页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;步骤-1-添加-viewport-meta-标签&quot;&gt;&lt;a href=&quot;#步骤-1-添加-viewport-meta-标签&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
      <category term="响应式" scheme="http://coder.liusixin.cn/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="移动端" scheme="http://coder.liusixin.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>造轮子系列：封装一个简化版的jQuery</title>
    <link href="http://coder.liusixin.cn/posts/1d3e321c/"/>
    <id>http://coder.liusixin.cn/posts/1d3e321c/</id>
    <published>2017-08-11T14:28:44.000Z</published>
    <updated>2017-08-11T14:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery-封装详解"><a href="#jQuery-封装详解" class="headerlink" title="jQuery 封装详解"></a>jQuery 封装详解</h2><p><strong>我们来实现一个简化版的 jQuery 库</strong></p><p>一个库就是一个单独的模块，因此应使用自执行函数的方式模拟一个模块。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>既然能够在全局直接调用 jQuery，则说明 jQuery 被挂载在了全局对象上。 块中对外提供接口时，可以采取 <code>window.jQuery</code> 的方式。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span>window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span></code></pre><p>我们在使用过程中，使用了 $，其实只是多加了一个赋值操作。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span></code></pre><p>在使用过程中直接使用 $，其实相当于直接调用构造函数 jQuery 创建了一个实例，而没有用 new。 我们知道创建实例 new 关键字是必不可少的，由此说明 new 的操作被放在了 jQuery 方法中来实现，而 jQuery 并不是真正的构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ROOT<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 构造函数</span>  <span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在该方法中直接返回new创建的实例，</span>    <span class="token comment" spellcheck="true">// 因此这里的 init 才是真正的构造函数</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>    version<span class="token punctuation">:</span> <span class="token string">'1.0.0'</span><span class="token punctuation">,</span>    init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> elem<span class="token punctuation">,</span> selector<span class="token punctuation">;</span>      elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 在jQuery中返回的是一个由所有原型属性方法组成的数组，</span>      <span class="token comment" spellcheck="true">// 这里做了简化，直接返回this即可</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 在原型上添加一堆方法</span>    toArray<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    each<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    ready<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    first<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    slice<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...more</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让 init 方法的原型指向jQuery的原型</span>  jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  ROOT<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> ROOT<span class="token punctuation">.</span>$ <span class="token operator">=</span> jQuery<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的实现中，首先在 jQuery 构造函数中声明了一个 <code>fn</code> 属性，并将其指向了原型 <code>jQuery.prototype</code>。 随后在原型对象中添加了 <code>init</code> 方法。</p><pre class=" language-js"><code class="language-js">jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>之后又将 <code>init</code> 的原型指向了 <code>jQuery.prototype</code>。</p><pre class=" language-js"><code class="language-js">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">;</span></code></pre><p>而在构造函数 <code>jQuery</code> 中 ，则返回了 <code>init</code> 的实例对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>最后对外暴露接口时，将字符 <code>$</code> 与方法 <code>jQuery</code> 对等起来。</p><pre class=" language-js"><code class="language-js">ROOT<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> ROOT<span class="token punctuation">.</span>$ <span class="token operator">=</span> jQuery<span class="token punctuation">;</span></code></pre><p>因此当使用 <code>$(&#39;#test&#39;)</code> 创建一个 jQuery 实例时，实际上调用的是 <code>jQuery(&#39;#test&#39;)</code> 创建的一个 <code>init</code> 实例。这里正在构造函数的是原型中的 <code>init</code> 方法。</p><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><p>jQuery 提供了两个扩展接口来帮助自定义 jQuery 的方法，通常称自定义的 jQuery 方法为 jQuery 桶件。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ROOT<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 构造函数</span>  <span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在该方法中直接返回new创建的实例，</span>    <span class="token comment" spellcheck="true">// 因此这里的 init 才是真正的构造函数</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>    version<span class="token punctuation">:</span> <span class="token string">'1.0.0'</span><span class="token punctuation">,</span>    init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> elem<span class="token punctuation">,</span> selector<span class="token punctuation">;</span>      elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 在jQuery中返回的是一个由所有原型属性方法组成的数组，</span>      <span class="token comment" spellcheck="true">// 这里做了简化，直接返回this即可</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 在原型上添加一堆方法</span>    toArray<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    each<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    ready<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    first<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    slice<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...more</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让 init 方法的原型指向jQuery的原型</span>  jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 实现 jQuery 的两种扩展方法</span>  jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在jQuery源码中根据参数不同进行不同的判断，这里假设只有一种方式</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> copy<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      copy <span class="token operator">=</span> options<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>      target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// jQuery利用上面实现的扩展机制，添加了许多方法</span>  <span class="token comment" spellcheck="true">// 添加静态扩展方法，即工具方法</span>  jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    isFunction<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    parseHTML<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    parseJSON<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    ajax<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...more</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 添加原型方法</span>  jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    queue<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    promise<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    attr<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    prop<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    addClass<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    removeClass<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    val<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    css<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...more</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ROOT<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> ROOT<span class="token punctuation">.</span>$ <span class="token operator">=</span> jQuery<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的代码中，我们通过下面的方式简单实现了两个扩展方法。</p><pre class=" language-js"><code class="language-js">jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在jQuery源码中根据参数不同进行不同的判断</span>  <span class="token comment" spellcheck="true">// 而这里直接用了一种方式 ，所以就不用判断了</span>  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> copy<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> options<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>要理解它的实现，首先要明确知道内部 <code>this</code> 的指向。传人的参数 <code>options</code> 对象是一个 <code>key-value</code> 模式的对象。我们可以通过 <code>for in</code> 遍历 <code>options</code>，将 <code>key</code> 作为新的属性，<code>value</code>作为该属性对应的新方法，分别添加到 <code>jQuery</code> 与 <code>jQuery.fn</code> 中。</p><p>也就是说，当通过 <code>$.extend</code> 扩展 jQuery 时，方法被添加到了静态方法中;而通过 <code>$.fn.extend</code> 扩展 jQuery 时，方法被添加到了原型对象中。静态方法可以直接调用，因此也被称为工具方法。</p><pre class=" language-js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>原型方法必须通过声明的实例才能调用</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery-封装详解&quot;&gt;&lt;a href=&quot;#jQuery-封装详解&quot; class=&quot;headerlink&quot; title=&quot;jQuery 封装详解&quot;&gt;&lt;/a&gt;jQuery 封装详解&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;我们来实现一个简化版的 jQuery 库&lt;/stro
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="造轮子系列" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E9%80%A0%E8%BD%AE%E5%AD%90%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="jQuery" scheme="http://coder.liusixin.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>HTTP性能优化指南</title>
    <link href="http://coder.liusixin.cn/posts/9b8e26f4/"/>
    <id>http://coder.liusixin.cn/posts/9b8e26f4/</id>
    <published>2017-08-06T14:48:57.000Z</published>
    <updated>2017-08-06T14:48:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>浏览器渲染过程</li><li>DNS</li><li>TCP 三次握手</li><li>HTTP 缓存机制</li><li>CDN 与集群</li></ul><p><strong>还记得 HTTP 协议吗？</strong></p><ol><li>浏览器先输入一个网址</li><li>然后浏览器先会去互联网上找 DNS 服务器进行解析</li><li>从 DNS 服务器拿到服务器 IP 以后，在回到浏览器中</li><li>然后浏览器拿着 IP 去发送 HTTP 请求</li><li>服务器处理请求</li><li>服务器响应请求</li><li>浏览器处理响应</li><li>继续请求其它资源</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064121-105c0945a446d646.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从 prompt 到 response 是和网络相关的，从 processing 到 onload 是和浏览器相关的。</p><ol><li>prompt for unload</li></ol><ul><li>这一步是先把之前的页面干掉</li></ul><ol start="2"><li>redirect、upload</li></ol><ul><li>这一步是衔接前面的，也是和缓存相关的，浏览器发一个请求，是从缓存取，还是从服务器拿</li></ul><ol start="3"><li>app cache</li></ol><ul><li>如果要从缓存拿的话，我就处理本地应用 cache，如果没有就无所谓了</li></ul><ol start="4"><li>DNS</li></ol><ul><li>开始解析</li><li>解析结束</li><li>有这些事件我们就可以去在这些节点上进行优化</li></ul><ol start="5"><li>TCP 层面</li></ol><ul><li>三次握手</li><li>开始连接 connectStart</li><li>https 连接 secureConnectionStart</li><li>连接结束 connectEnd</li><li>然后服务器会拿到你的请求路径</li></ul><ol start="6"><li>Request 发送响应，但是连接还没完</li><li>Processing 处理文档</li></ol><ul><li>domLoading 开始载入 dom</li><li>dominteractive 把文档设置为交互状态</li><li>domContentLoaded 触发这个事件</li><li>domComplete 浏览器把文档设置为 complete（表示文档与网络相关的修改已经结束了）</li></ul><ol start="8"><li>onLoad (这个 onload 和，绑定那个 onload 事件是可以对应的)</li></ol><ul><li>loadEventStart</li><li>loadEventEnd</li></ul><blockquote><p>上面这是一次连接，然后下次再发请求的时候，回直接从 Request 开始。</p></blockquote><blockquote><p>是因为浏览器做了个优化，可以复用这个连接。</p></blockquote><blockquote><p>资源少就一个 tcp 连接，多任务就会打开多个 tcp 连接。keep-Alive 模式</p></blockquote><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><ul><li>网络：DNS、TCP 连接</li><li>传输</li><li>浏览器</li><li>缓存，包括浏览器本身的缓存和服务器中的缓存</li></ul><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ul><li>DNS 是域名系统，用于将域名转化为 IP</li><li>顶级域名</li><li>域名资源记录</li><li>域名服务器</li><li>域名解析</li></ul><h3 id="TCP-三次握手与四次挥手（如果少一次就不能保证，多一次就浪费。"><a href="#TCP-三次握手与四次挥手（如果少一次就不能保证，多一次就浪费。" class="headerlink" title="TCP 三次握手与四次挥手（如果少一次就不能保证，多一次就浪费。"></a>TCP 三次握手与四次挥手（如果少一次就不能保证，多一次就浪费。</h3><ul><li>三次握手<ul><li>你发起连接请求</li><li>服务源接受你发送的连接，然后服务源会给你发送一个数据</li><li>然后你再发一条数据，告诉服务端我收到了</li></ul></li><li>四次挥手<ul><li>浏览器给服务源发送数据说我要挂了。</li><li>服务源响应说我收到你的请求了可以挂，我也要挂了。</li><li>然后浏览器发送数据可以断开。</li><li>服务源断开连接。</li></ul></li></ul><h3 id="osiiso-模型和-TCP-IP-模型"><a href="#osiiso-模型和-TCP-IP-模型" class="headerlink" title="osiiso 模型和 TCP/IP 模型"></a>osiiso 模型和 TCP/IP 模型</h3><ul><li>应用层（data 数据。HTTP、FTP、DNS、DHCP）</li><li>表示层</li><li>会话层（TCPIC 把上面三个合并为应用层。HTTP 就在这层。这一层会加一个）</li><li>传输层（TCP 协议、UDP 协议）</li><li>网络层（它封装的是二进制，它是帮助你找到对方主机，IP、ICMP 这个是 ping 发的包）</li><li>数据链路层（这一块是做了封装，数据链路层传递的是电脉冲信号，也是有一种规则的。网卡的 MAC 地址。ARP 是在局域网广播 MAC 地址，也有这种攻击，如我叫小明。）</li><li>物理层（硬件、网卡、网线、承载你数据的基础设施。纯硬件）</li></ul><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><ul><li>-n 以 ip 地址显示</li><li>host 192.168.0.200 and 111.13.100.92</li><li>-i enp1s0 显卡地址</li></ul><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><ul><li>用命令行进行远程 http 通讯</li></ul><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><ul><li>主机模式</li><li>CDN 离你最近的那台服务器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器渲染过程&lt;/li&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;TCP 三次握手&lt;/li&gt;
&lt;li&gt;HTTP 缓存机制&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="HTTP" scheme="http://coder.liusixin.cn/tags/HTTP/"/>
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化--雅虎军规</title>
    <link href="http://coder.liusixin.cn/posts/8eb3b102/"/>
    <id>http://coder.liusixin.cn/posts/8eb3b102/</id>
    <published>2017-08-02T06:02:23.000Z</published>
    <updated>2017-08-02T13:38:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>1. 雅虎军规显而易见的就是雅虎公司出的，雅虎公司一直都是相应的各种规范上的践行者，有一种系列的书都是雅虎出的，它们每一本书的封面都有一只动物，下图是其中一本的示例，如果说你是想要一直从事前端这个行业的话，建议你把这一系列的书都看一下，这些书有些之前的是 雅虎 出的，后来就是 图灵 出的了</strong></p><p><strong>2. 参考网址:</strong></p><blockquote><p><a href="https://link.jianshu.com/?t=https://developer.yahoo.com/performance/rules.html" rel="external nofollow noopener noreferrer" target="_blank">雅虎军规官网地址：英文版</a></p></blockquote><blockquote><p><a href="https://link.jianshu.com/?t=https://github.com/creeperyang/blog/issues/1" rel="external nofollow noopener noreferrer" target="_blank">雅虎军规：中文翻译版</a></p></blockquote><p><strong>3. 什么是雅虎军规？</strong></p><blockquote><p>随着移动端现在的崛起，已经不止是上面的 35 条军规了，还有非常非常多的军规，这些军规是你必须要践行的，因为像上面的 35 条军规一样，这些都是在进行网站性能优化中必须掌握的，不是说一定要全都用上，只是说这些能用的你要尽量的用上，这些军规可以结合一些使前端工程自动化的工具来进行开发，自动化就是说：能用框架或者是自动化工具解决的问题，从来不用人工去介入。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-减少-HTTP-请求次数"><a href="#1-减少-HTTP-请求次数" class="headerlink" title="1. 减少 HTTP 请求次数"></a>1. 减少 HTTP 请求次数</h3><p><strong>对 js 和 css 请求数量进行优化</strong></p><p>将多个 js 文件合并成可以是两三个 js 文件，这样请求就会减少了，相应的 css link 也是这个道理</p><p><strong>雪碧图</strong></p><p>在和美工配合的时候页面上的图标之类的可以进行合并，将多个图片合并到一个画布上，这样就可以减少很多的请求。</p><h3 id="2-减少-DNS-的查找次数"><a href="#2-减少-DNS-的查找次数" class="headerlink" title="2. 减少 DNS 的查找次数"></a>2. 减少 DNS 的查找次数</h3><p><strong>什么是 DNS 的查找次数？</strong></p><blockquote><p>假如说我们访问 map.baidu.com 的时候，这个网址是需要进行查找的，他需要通过你输入的这个网址去查找相应的域名（IP），之后才会到真正的服务器上</p></blockquote><p><strong>一般 DNS 的设置都是运维工程师来负责的，但是对于我们前端也是有几点需要注意的</strong></p><ul><li>尽量不要让页面上的 DNS 过多，因为查找起来很慢</li><li>我们前端可以使用 <a href="https://link.jianshu.com/?t=http://skyhome.cn/div_css/301.html" rel="external nofollow noopener noreferrer" target="_blank">DNS 预解析的方法提升页面速度</a></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-b3f833117ecafae0.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上面的 meta 将 控制 dns 预解析 的值设置为了 on 这样就可以开启 dns 预解析<br>下面的 link 可以强制主机名查询 ，假设在页面其他位置如果引用了 该 link 的 dns 中的资源的话， 实际上在其引用之前就已经提前将其所需要的 DNS 给解析好了，这样的话就可以直接找到资源，不需要再解析 DNS 耗时了，速度也就会非常的快了，这也是我们前端可以做到的一点，下图的是其在 京东 官网上的使用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-949b3f78437d95fd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="3-避免跳转"><a href="#3-避免跳转" class="headerlink" title="3. 避免跳转"></a>3. 避免跳转</h3><p><strong>什么是避免跳转？</strong></p><blockquote><p>这个就是说人家好不容易到你这台机器上来了，发现你这个页面不是之前的页面了，然后你这边再次做了一个跳转 打开了别的页面，尽量不要做成这种不必要的多次跳转</p></blockquote><p><strong>跳转时会建立一个 301 或者是 302 的请求报头</strong></p><p>下图的示例是我在浏览器上以开发者模式下的手机模式输入了 PC 端的网址，打开之后会发现请求报头是 302，这个 302 被永久的建立在了这个 Header 上 ，如果没有这个 Header 的话，浏览器也分不清到底是 301 还是 302 ，他就是靠这个来标识的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-ec7e6810fa7415b9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>301 或者 302 这样的状态码可以参考 <a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/HTTP状态码/5053660?fr=aladdin" rel="external nofollow noopener noreferrer" target="_blank">HTTP 状态码_百度百科</a> 中的说明进行了解，在做性能优化这方面，一些常见的状态码是必须要了解的<br>为了去向全栈工程师发展，这个东西是必会的，全栈的话会让你在公司或者是开发项目时所占的权重会更高一些</p><h3 id="4-可缓存的-AJAX"><a href="#4-可缓存的-AJAX" class="headerlink" title="4. 可缓存的 AJAX"></a>4. 可缓存的 AJAX</h3><p><strong>什么是可缓存的 AJAX？</strong></p><blockquote><p>这个就是说我们在进行这样的请求的时候，可以把这样的 AJAX 进行一次缓存</p></blockquote><p><strong>实现的方法</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-0d0211082997c922.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>gzip 组件</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-6794ef983ff85206.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>一般前台请求的资源都会在后台通过 gzip 组件将资源压缩之后再发送回来，然后再在客户端这边来解压，这样再传输过程中相应的资源文件就会变小很多</p><p><strong>设置 ETags</strong></p><blockquote><p>这个全称为：Entity Tag，意思是实体标签，从名字上看，是对于某种实体的一个标识。它属于 HTTP 协议的一部分，也就是所有的 Web 服务器都应该（也确实能）支持这个特性。它的作用是用一个特殊的字符串来标识某个资源的“版本”，客户端（浏览器）来请求的时候，可以比较，如果 ETag 一致，则表示该资源并没有修改过，客户端（浏览器）可以使用自己缓存的版本。</p></blockquote><p><strong>如何实现 AJAX 的缓存，具体可参考 <a href="https://link.jianshu.com/?t=https://www.cnblogs.com/tedzhao/archive/2012/08/23/Ajax_Browser_Cache.html" rel="external nofollow noopener noreferrer" target="_blank">Ajax 请求与浏览器缓存 - ted - 博客园</a> ，这个实现是需要服务端来进行配合的，但是这个整个的过程你得知道，还有如果想要实现 AJAX 缓存的话请求方式尽量设置成 get ，</strong></p><h3 id="5-推迟加载内容"><a href="#5-推迟加载内容" class="headerlink" title="5. 推迟加载内容"></a>5. 推迟加载内容</h3><p>具体可参考 <a href="https://link.jianshu.com/?t=http://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;sf=2&amp;fmq=1480332039000_R_D&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=微距摄影" rel="external nofollow noopener noreferrer" target="_blank">微距摄影_百度图片搜索</a> ，这个网站使用的就是滚动加载的方式，你在往下滚动时下面的图片的边滚动边请求的</p><h3 id="6-预加载"><a href="#6-预加载" class="headerlink" title="6. 预加载"></a>6. 预加载</h3><blockquote><p>参考：<a href="https://link.jianshu.com/?t=http://www.cnblogs.com/suyuwen1/p/5506397.html" rel="external nofollow noopener noreferrer" target="_blank">详解 HTML5 中 rel 属性的 prefetch 预加载功能使用</a></p></blockquote><h3 id="7-减少-DOM-元素数量"><a href="#7-减少-DOM-元素数量" class="headerlink" title="7. 减少 DOM 元素数量"></a>7. 减少 DOM 元素数量</h3><blockquote><p>要尽量的去控制页面的 HTML 的数量，最好的方式是遵循 一个标签三个元素的方式：div before after</p></blockquote><h3 id="8-根据域名划分页面内容"><a href="#8-根据域名划分页面内容" class="headerlink" title="8. 根据域名划分页面内容"></a>8. 根据域名划分页面内容</h3><blockquote><p>尽量不要把所有的资源都放在同一台服务器上，至少将 js css images 这些静态的东西放在一个 CDN 的服务器上，这样就需要多个机器来支撑这样的分离</p></blockquote><h3 id="9-使-iframe-的数量最小"><a href="#9-使-iframe-的数量最小" class="headerlink" title="9. 使 iframe 的数量最小"></a>9. 使 iframe 的数量最小</h3><blockquote><p>iframe 在页面中能尽量不用的话就不用，这个标签可以在页面页面中插入一个新的 HTML 文档，iframe 也有相应的优缺点</p></blockquote><h3 id="10-不要出现-404-错误"><a href="#10-不要出现-404-错误" class="headerlink" title="10. 不要出现 404 错误"></a>10. 不要出现 404 错误</h3><blockquote><p>这个意思就是页面尽量不要丢东西，HTTP 请求是会耗时的即使这个资源已经不存在了</p></blockquote><h3 id="11-使用内容分发网络"><a href="#11-使用内容分发网络" class="headerlink" title="11. 使用内容分发网络"></a>11. 使用内容分发网络</h3><blockquote><p>这个就是上面所说的 CDN ，也就是说如果服务器有多余的话就一定要将 html js css 这些静态的资源单独放到一个静态资源服务器中，这样可以让用户最快的去访问到</p></blockquote><h3 id="12-为文件头指定-Expires-或-Cache-Control"><a href="#12-为文件头指定-Expires-或-Cache-Control" class="headerlink" title="12. 为文件头指定 Expires 或 Cache-Control"></a>12. 为文件头指定 Expires 或 Cache-Control</h3><blockquote><p>这个就是将该缓存的东西在浏览器中缓存起来，这样的话下次访问时如果请求的资源没发生改变就会直接用缓存里的，不会再去重新的请求耗时了</p></blockquote><h3 id="13-Gzip-压缩文件内容"><a href="#13-Gzip-压缩文件内容" class="headerlink" title="13. Gzip 压缩文件内容"></a>13. Gzip 压缩文件内容</h3><blockquote><p>将 Gzip 组件压缩网站的 js css 文件的状态设置为 on，如果没有开启的话需要告诉后台让其开启</p></blockquote><h3 id="14-配置-ETag"><a href="#14-配置-ETag" class="headerlink" title="14. 配置 ETag"></a>14. 配置 ETag</h3><blockquote><p>这个和上面提到的是一样的</p></blockquote><h3 id="15-尽早刷新输出缓存"><a href="#15-尽早刷新输出缓存" class="headerlink" title="15. 尽早刷新输出缓存"></a>15. 尽早刷新输出缓存</h3><blockquote><p>早一点刷新 buffer（尽早给浏览器数据）。</p></blockquote><blockquote><p>当用户请求一个页面，服务器一般要花 200-500ms 来拼凑整个页面。这段时间，浏览器是空闲的（等数据返回）。在 php，有个方法 flush()允许你传输部分准备好的 html 响应给浏览器。这样的话浏览器就可以开始下载组件，而同时后台可以继续生成页面剩下的部分。这种好处更多是在忙碌的后台或轻前端网站可以看到。</p></blockquote><blockquote><p>一个比较好的 flush 的位置是在 head 之后，因为浏览器可以加载其中的样式和脚本文件，而后台继续生成页面剩余部分。</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//这个示例是用的 PHP 做的中间层</span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- css, js --></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!-- content --></span></span></code></pre><h3 id="16-使用-GET-来完成-AJAX-请求"><a href="#16-使用-GET-来完成-AJAX-请求" class="headerlink" title="16. 使用 GET 来完成 AJAX 请求"></a>16. 使用 GET 来完成 AJAX 请求</h3><blockquote><p>ajax 请求用 get。</p></blockquote><blockquote><p><a href="https://link.jianshu.com/?t=http://mail.yahoo.com/" rel="external nofollow noopener noreferrer" target="_blank">Yahoo! Mail</a> 团队发现当使用<code>XMLHttpRequest</code>，POST 被浏览器实现为两步：首先发送头部，然后发送数据。所以使用 GET 最好，仅用一个 TCP 包发送（除非 cookie 太多）。IE 的 url 长度限制是 2K。</p></blockquote><blockquote><p>POST 不提交任何数据跟 GET 行为类似，但从语义上讲，获取数据应该用 GET，提交数据到服务器用 POST。</p></blockquote><h3 id="17-把样式表置于顶部"><a href="#17-把样式表置于顶部" class="headerlink" title="17. 把样式表置于顶部"></a>17. 把样式表置于顶部</h3><blockquote><p>研究雅虎网页性能时发现把样式表移到<code>&lt;head&gt;</code>里会让页面更快。这是因为把样式表移到<code>&lt;head&gt;</code>里允许页面逐步渲染。</p></blockquote><blockquote><p>关注性能的前端工程师希望页面被逐步渲染，这时因为，我们希望浏览器尽早渲染获取到的任何内容。这对大页面和网速慢的用户很重要。给用户视觉反馈，比如进度条的重要性已经被大量研究和记录。在我们的情况中，<code>HTML</code>页面就是进度条。当浏览器逐步加载页面头部，导航条，logo 等等，这些都是给等待页面的用户的视觉反馈。这优化了整体用户体验。</p></blockquote><blockquote><p>把样式表放在文档底部的问题是它阻止了许多浏览器的逐步渲染，包括 IE。这些浏览器阻止渲染来避免在样式更改时需要重绘页面元素。所以用户会卡在白屏。</p></blockquote><blockquote><p><a href="https://link.jianshu.com/?t=http://www.w3.org/TR/html4/struct/links.html#h-12.3" rel="external nofollow noopener noreferrer" target="_blank">HTML 规范</a>清楚表明样式应该在<code>&lt;head&gt;</code>里。</p></blockquote><h3 id="18-避免使用-CSS-表达式"><a href="#18-避免使用-CSS-表达式" class="headerlink" title="18. 避免使用 CSS 表达式"></a>18. 避免使用 CSS 表达式</h3><blockquote><p>CSS 表达式是强大的（可能也是危险的）设置动态 CSS 属性的方法。IE5 开始支持，IE8 开始不赞成使用。例如，背景颜色可以设置成每小时轮换：</p></blockquote><pre class=" language-less"><code class="language-less"><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">expression</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">%2</span> ? <span class="token string">'#B8D4FF'</span><span class="token punctuation">:</span> <span class="token string">'#F08A00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>CSS 表达式的问题是它们可能比大多数人预期的计算的更频繁。它们不仅在页面载入和调整大小时重新计算，也在滚动页面甚至是用户在页面上移动鼠标时计算。比如在页面上移动鼠标可能轻易计算超过 10000 次。</p></blockquote><blockquote><p>要避免 CSS 表达式计算太多次，可以在它第一次计算后替换成确切值，或者用事件处理函数而不是 CSS 表达式。</p></blockquote><h3 id="19-使用外部-JavaScript-和-CSS"><a href="#19-使用外部-JavaScript-和-CSS" class="headerlink" title="19. 使用外部 JavaScript 和 CSS"></a>19. 使用外部 JavaScript 和 CSS</h3><blockquote><p>尽量不要在 html 行内写 js 或者 css</p></blockquote><h3 id="20-削减-JavaScript-和-CSS"><a href="#20-削减-JavaScript-和-CSS" class="headerlink" title="20. 削减 JavaScript 和 CSS"></a>20. 削减 JavaScript 和 CSS</h3><blockquote><p>使用一些工具将 js 和 css 分别进行压缩和大打包</p></blockquote><h3 id="21-用-代替-import"><a href="#21-用-代替-import" class="headerlink" title="21. 用  代替 @import"></a>21. 用 <link> 代替 @import</h3><blockquote><p>之前的一个最佳原则是说 CSS 应该在顶部来允许逐步渲染。<br>但是在 IE 用@import 和把 CSS 放到页面底部行为一致，所以最好别用。</p></blockquote><h3 id="22-避免使用滤镜"><a href="#22-避免使用滤镜" class="headerlink" title="22. 避免使用滤镜"></a>22. 避免使用滤镜</h3><blockquote><p>这个是 IE 独有的东西，但是不到万不得已尽量不要使用，因为这个对渲染性能要求很高</p></blockquote><h3 id="23-把脚本置于页面底部"><a href="#23-把脚本置于页面底部" class="headerlink" title="23. 把脚本置于页面底部"></a>23. 把脚本置于页面底部</h3><h3 id="24-剔除重复脚本"><a href="#24-剔除重复脚本" class="headerlink" title="24. 剔除重复脚本"></a>24. 剔除重复脚本</h3><h3 id="25-减少-DOM-访问"><a href="#25-减少-DOM-访问" class="headerlink" title="25. 减少 DOM 访问"></a>25. 减少 DOM 访问</h3><blockquote><p>这个示例就是说你在 js 中使用了某个 DOM 元素，你可以先将其储存起来，这样的话下次再用的时候就会相应的快一点</p></blockquote><h3 id="26-开发智能事件处理程序"><a href="#26-开发智能事件处理程序" class="headerlink" title="26. 开发智能事件处理程序"></a>26. 开发智能事件处理程序</h3><blockquote><p>有时候页面看起来不那么响应（响应速度慢），是因为绑定到不同元素的大量事件处理函数执行太多次。这是为什么使用事件委托是一种好方法，事件委托就是将事件绑定给相应的父级，多个子集可以根据相应的区别去执行不同的事件</p></blockquote><blockquote><p>另外，你不必等到 onload 事件来开始处理 DOM 树，DOMContentLoaded 更快。大多时候你需要的只是想访问的元素已在 DOM 树中，所以你不必等到所有图片被下载。</p></blockquote><h3 id="27-减少-Cookie-体积"><a href="#27-减少-Cookie-体积" class="headerlink" title="27. 减少 Cookie 体积"></a>27. 减少 Cookie 体积</h3><blockquote><p>比如说在你每次在某个网站中的链接相互跳转的时候这些个 cookie 会把所有的 cookie 全部都带到服务器去然后服务器会把这些东西再带回了，相当的麻烦，所以若是不是特别必要的东西建议写在 local storage 里面</p></blockquote><h3 id="28-对于页面内容使用无-cookie-域名"><a href="#28-对于页面内容使用无-cookie-域名" class="headerlink" title="28. 对于页面内容使用无 cookie 域名"></a>28. 对于页面内容使用无 cookie 域名</h3><blockquote><p>当浏览器请求静态图片并把 cookie 一起发送到服务器时，cookie 此时对服务器没什么用处。所以这些 cookie 只是增加了网络流量。所以你应该保证静态组件的请求是没有 cookie 的。可以创建一个子域名来托管所有静态组件。</p></blockquote><blockquote><p>比如说在页面中请求了一个图片，这个图片的域名需要使用不会记录到 cookie 中的（基本上是说和 cookie 中设置的 domain 域名不一样），这样的话就比较的轻，不会带来带去的了，这个图片使用的域名就是专门存放图片的地方</p></blockquote><h3 id="29-优化图像"><a href="#29-优化图像" class="headerlink" title="29. 优化图像"></a>29. 优化图像</h3><blockquote><p>用一些工具把图像压缩</p></blockquote><blockquote><p>图片的背后是很多的二进制数据来构成的，你可以将一张图片拖进一个编辑器里查看会发现都是 01 组合成的二进制码，这里面会有比如说是哪个软件处理的、处理时间等等一些无用的东西，可以通过压缩来把它们都干掉，我目前在项目中使用的是 <a href="https://link.jianshu.com/?t=https://tinypng.com/" rel="external nofollow noopener noreferrer" target="_blank">TinyPNG</a> 在线压缩，你也可以将它扩展到 PhotoShop 软件中使用</p></blockquote><h3 id="30-优化-CSS-Spirite"><a href="#30-优化-CSS-Spirite" class="headerlink" title="30. 优化 CSS Spirite"></a>30. 优化 CSS Spirite</h3><h3 id="31-不要在-HTML-中缩放图像"><a href="#31-不要在-HTML-中缩放图像" class="headerlink" title="31. 不要在 HTML 中缩放图像"></a>31. 不要在 HTML 中缩放图像</h3><blockquote><p>不要因为你可以设置图片的宽高就去用比你需要的大得多的图片。如果你需要</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycat.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>My Cat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>那么，就用 100x100px 的图片，而不是 500x500px 的。</p><h3 id="32-favicon-ico-要小而且可缓存"><a href="#32-favicon-ico-要小而且可缓存" class="headerlink" title="32. favicon.ico 要小而且可缓存"></a>32. favicon.ico 要小而且可缓存</h3><blockquote><p>favicon.ico 是在你服务器根路径的图片。邪恶的是即使你不关心它，浏览器仍然会请求它。所以最好不要响应 404。另外由于在同一服务器，每次请求 favicon.ico 时也会带上 cookie。这个图片还会影响下载顺序，比如在 IE，如果你在 onload 时下载额外的组件，fcvicon 会在这些组件之前被下载。</p></blockquote><p><strong>怎么减轻 favicon.ico 的缺点？</strong></p><ul><li>小，最好 1K 以下</li><li>设置 Expires 头部。也许可以安全地设置为几个月。</li></ul><h3 id="33-保持单个内容小于-25K"><a href="#33-保持单个内容小于-25K" class="headerlink" title="33. 保持单个内容小于 25K"></a>33. 保持单个内容小于 25K</h3><blockquote><p>这个限制与 iPhone 不缓存大于 25K 的组件相关。注意，这是非压缩（uncompressed）的文件大小。在这里 minification（压缩，不要与 compress 混淆）很重要，因为 gzip 无法满足（iPhone）。</p></blockquote><h3 id="34-打包组件成复合文本"><a href="#34-打包组件成复合文本" class="headerlink" title="34. 打包组件成复合文本"></a>34. 打包组件成复合文本</h3><blockquote><p>这个的意思就是建议将 js 和 css 打包到一起，然后再通过其他的一些方法将他们区分开，现在已经有很多前端自动化构建工具可以实现了 比如 webpack</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 雅虎军规显而易见的就是雅虎公司出的，雅虎公司一直都是相应的各种规范上的践行者，有一种系列的书都是雅虎出的，它们每一本书
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据结构与算法总结</title>
    <link href="http://coder.liusixin.cn/posts/b56bb73b/"/>
    <id>http://coder.liusixin.cn/posts/b56bb73b/</id>
    <published>2017-07-28T08:38:51.000Z</published>
    <updated>2017-07-28T08:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>数组</li><li>栈</li><li>队列</li><li>链表</li><li>集合</li><li>字典</li><li>散列表</li><li>树</li></ul><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h1><h2 id="创建和初始化数组"><a href="#创建和初始化数组" class="headerlink" title="创建和初始化数组"></a>创建和初始化数组</h2><p>由于数组太常见了，一些基本的使用就不说明了</p><p><strong>求斐波拉契数列前二十个数字</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fibonacci <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{1}</span>fibonacci<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{2}</span>fibonacci<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{3}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fibonacci<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fibonacci<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">////{4}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fibonacci<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//{5}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{6}</span><span class="token punctuation">}</span></code></pre><h2 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加元素</span><span class="token comment" spellcheck="true">// 尾部添加</span>numbers<span class="token punctuation">[</span>numbers<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 首部添加</span>numbers<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对应的 你懂得</span>numbers<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在数组的任意位置上添加和删除元素</span><span class="token comment" spellcheck="true">// 使用splice方法，简单地通过指定位置/索引，就可以删除相应位置和数量的元素</span>numbers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把数字2、3、4插入数组里</span>numbers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// splice方法接收的第一个参数，表示想要删除或插入的元素的索引值。第二个参数是删除 元素的个数(这个例子里，我们的目的不是删除元素，所以传入0)。第三个参数往后，就是要添 加到数组里的值(元素2、3、4)。输出会发现值又变成了从3到12。</span></code></pre><h2 id="二维数组和多维数组"><a href="#二维数组和多维数组" class="headerlink" title="二维数组和多维数组"></a>二维数组和多维数组</h2><p>JavaScript只支持一维数组，并不支持矩阵。但是，我们可以像上面的代码一样，用数组套数组，实现矩阵或任一多维数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">printMatrix</span><span class="token punctuation">(</span>myMatrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myMatrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> myMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>以此类推，也可以用这种方式来处理多维数组。假如我们要创建一个3×3的矩阵，每一格里包含矩阵的i(行)、j(列)及z(深度)之和:</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> matrix3x3x3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  matrix3x3x3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    matrix3x3x3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> z <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      matrix3x3x3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> z<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JavaScript数组方法参考"><a href="#JavaScript数组方法参考" class="headerlink" title="JavaScript数组方法参考"></a>JavaScript数组方法参考</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center">concat</td><td style="text-align:left">连接2个或更多数组，并返回结果</td></tr><tr><td style="text-align:center">every</td><td style="text-align:left">对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true</td></tr><tr><td style="text-align:center">filter</td><td style="text-align:left">对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组</td></tr><tr><td style="text-align:center">forEach</td><td style="text-align:left">对数组中的每一项运行给定函数。这个方法没有返回值</td></tr><tr><td style="text-align:center">join</td><td style="text-align:left">将所有的数组元素连接成一个字符串</td></tr><tr><td style="text-align:center">indexOf</td><td style="text-align:left">返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1</td></tr><tr><td style="text-align:center">lastIndexOf</td><td style="text-align:left">返回在数组中搜索到的与给定参数相等的元素的索引里最大的值</td></tr><tr><td style="text-align:center">map</td><td style="text-align:left">对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td style="text-align:center">reverse</td><td style="text-align:left">颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在 的第一个</td></tr><tr><td style="text-align:center">slice</td><td style="text-align:left">传入索引值，将数组里对应索引范围内的元素作为新数组返回</td></tr><tr><td style="text-align:center">some</td><td style="text-align:left">对数组的每一项运行指定函数，如果有真则为真</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:left">按照字母顺序对数组进行排序，支持传入指定排序函数作为参数</td></tr><tr><td style="text-align:center">toString</td><td style="text-align:left">将数组作为字符串返回</td></tr><tr><td style="text-align:center">valueOf</td><td style="text-align:left">和toString类似，将数组作为字符串返回</td></tr></tbody></table><h3 id="迭代器函数"><a href="#迭代器函数" class="headerlink" title="迭代器函数"></a>迭代器函数</h3><p><strong>JavaScript内置了许多数组可用的迭代方法。对于本节的例子，我们需要数组和函数。假如有 一个数组，它值是从1到15，如果数组里的元素可以被2整除(偶数)，函数就返回true，否则返回false</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isEven <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组numbers的第一个元素是1，它不是2的倍数(1是奇数)，因此isEven 函 数返回false，然后every执行结束。</span>numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//numbers数组中第一个偶数是2(第二个元素)。第一个被迭代的元素是1,isEven会返回false。第二个被迭代的元素是2，isEven返回true——迭代结束。</span><span class="token comment" spellcheck="true">// 如果要迭代整个数组，可以用forEach方法。它和使用for循环的结果相同:</span>numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myMap <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[false, true, false, true, false, true, false, true, false, true, false, true, false, true, false]</span><span class="token keyword">var</span> evenNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[2, 4, 6, 8, 10, 12, 14]</span>numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>previous<span class="token punctuation">,</span> current<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> previous <span class="token operator">+</span> current<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//120</span></code></pre><h3 id="搜索和排序"><a href="#搜索和排序" class="headerlink" title="搜索和排序"></a>搜索和排序</h3><p>首先，我们想反序输出数组numbers(它本来的排序是1, 2, 3, 4,…15)。要实现这样的功能， 可以用reverse方法，然后数组内元素就会反序。</p><pre class=" language-js"><code class="language-js">numbers<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在，输出numbers的话就会看到<code>[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code>。然后，我们用sort方法:</p><pre class=" language-js"><code class="language-js">numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于一些自定义排序可以这么玩</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">30</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Ana'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Chris'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">25</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">comparePerson</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>age <span class="token operator">></span> b<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friends<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparePerson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="2-栈"><a href="#2-栈" class="headerlink" title="2. 栈"></a>2. 栈</h1><blockquote><p>栈是一种遵从先进后出(LIFO)原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p></blockquote><p>而栈主要是在编程语言的编译器里用来保存变量和方法调用等。</p><h2 id="创建栈"><a href="#创建栈" class="headerlink" title="创建栈"></a>创建栈</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存栈内元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标记可以插入新元素的位置</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>push <span class="token operator">=</span> push<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//入栈操作</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pop <span class="token operator">=</span> pop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//出栈操作</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>peek <span class="token operator">=</span> peek<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回栈顶元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> clear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清空栈</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈的长度</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//向栈中压入元素 同时让指针top+1 一定注意++</span><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//出栈操作 同时将top-1</span><span class="token keyword">function</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回栈顶元素，变量top值减1 返回不删除</span><span class="token keyword">function</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回栈内元素个数</span><span class="token keyword">function</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//清空一个栈</span><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="回文算法"><a href="#回文算法" class="headerlink" title="回文算法"></a>回文算法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//回文算法</span><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> rword <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rword<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>rword <span class="token operator">==</span> word<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> word <span class="token operator">=</span> <span class="token string">"12321"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h1 id="3-队列"><a href="#3-队列" class="headerlink" title="3. 队列"></a>3. 队列</h1><blockquote><p>队列是遵循先入先出(FIFO)原则的有序的项。队列在尾部添加新元素，并在顶部移除元素。最新添加的元素必须排列在队列的尾部</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>enqueue <span class="token operator">=</span> enqueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//像队尾增加一个元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dequeue <span class="token operator">=</span> dequeue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除队列元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> front<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取队首的元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>back <span class="token operator">=</span> back<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取队尾的元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>toString <span class="token operator">=</span> toString<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示队列中的所有元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>empty <span class="token operator">=</span> empty<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断队列是否为空</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> reStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    reStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> reStr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="算法：实现方块舞的舞伴分配问题"><a href="#算法：实现方块舞的舞伴分配问题" class="headerlink" title="算法：实现方块舞的舞伴分配问题"></a>算法：实现方块舞的舞伴分配问题</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 实现方块舞的舞伴分配问题 */</span><span class="token keyword">function</span> <span class="token function">Patient</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> priarity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>code <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>priarity<span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>      priarity <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>priarity<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> retStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" code"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> retStr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> pa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Patient</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pa1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Patient</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pa2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Patient</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pa3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Patient</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> quePatient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>quePatient<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>quePatient<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>pa1<span class="token punctuation">)</span><span class="token punctuation">;</span>quePatient<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>pa2<span class="token punctuation">)</span><span class="token punctuation">;</span>quePatient<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>pa3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一个人"</span> <span class="token operator">+</span> quePatient<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quePatient<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="3-链表"><a href="#3-链表" class="headerlink" title="3. 链表"></a>3. 链表</h1><p>链表是一种动态的数据结构，这就意味着我们可以从中任意添加和移除元素，他也可以按需扩容。</p><p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用(也称指针或链接)组成。</p><p>相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然而，链表需要使用指针，因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何位置的任何元素，而要想访问链表中间的一个元素，需要从起点(表头)开始迭代列表直到找到所需的元素。</p><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">LList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>find <span class="token operator">=</span> find<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> insert<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> display<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>findPrevious <span class="token operator">=</span> findPrevious<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> remove<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>element <span class="token operator">!=</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>    currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> currNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>newElement<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    currNode<span class="token operator">=</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">findPrevious</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>element<span class="token operator">!=</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> currNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> preNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findPrevious</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>preNode<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> cities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token string">'first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'third'</span><span class="token punctuation">,</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cities<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'third'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cities.remove('second');</span><span class="token comment" spellcheck="true">// cities.display();</span></code></pre><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>next<span class="token punctuation">,</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">LList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>find <span class="token operator">=</span> find<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> insert<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> display<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> remove<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>displReverse <span class="token operator">=</span> displReverse<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>findLast <span class="token operator">=</span> findLast<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>element <span class="token operator">!=</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> currNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>newElement<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  newNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> currNode<span class="token punctuation">;</span>  currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    newNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> newNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    currNode<span class="token operator">=</span>currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    currNode<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    currNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> currNode<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>    currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    currNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    currNode<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    currNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">findLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> currNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">displReverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> currNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>pre<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currNode<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> cities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">,</span><span class="token string">'first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'third'</span><span class="token punctuation">,</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cities<span class="token punctuation">.</span><span class="token function">displReverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="4-集合"><a href="#4-集合" class="headerlink" title="4. 集合"></a>4. 集合</h1><blockquote><p>集合是由一组无序且唯一(即不能重复)的项组成的。这个数据结构使用了与有限集合相同 的数学概念，但应用在计算机科学的数据结构中。</p></blockquote><ul><li>结合是一种包含不同元素数据结构</li><li>在很多编程语言中并不把集合当成一种数据类型，当你想要创建一个数据结构，用来保存一段独一无二的文字的时候集合就非常有用</li><li>集合的成员是无序的</li><li>集合中不允许相同成员存在</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> remove<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> show<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>union <span class="token operator">=</span> union<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并集</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>intersect <span class="token operator">=</span> intersect<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交集</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>difference <span class="token operator">=</span> difference<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//补集</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>contains <span class="token operator">=</span> contains<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subset <span class="token operator">=</span> subset<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//全集  </span>  <span class="token keyword">var</span> tempSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    tempSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">set</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tempSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      tempSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> tempSet<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">contains</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//交集  </span>  <span class="token keyword">var</span> tempSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      tempSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> tempSet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">difference</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//补集  </span>  <span class="token keyword">var</span> tempSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      tempSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> tempSet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">subset</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">set</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小丽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//console.log(names.show());</span><span class="token keyword">var</span> cis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'小张'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>cis<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"并集+++++++"</span><span class="token operator">+</span>it<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>cis<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"交集+++++++"</span><span class="token operator">+</span>it<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>cis<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"补集+++++++"</span><span class="token operator">+</span>it<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">subset</span><span class="token punctuation">(</span>cis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h1 id="5-字典"><a href="#5-字典" class="headerlink" title="5. 字典"></a>5. 字典</h1><ul><li>字典以一种键-值对形式存储</li><li>JavaScript的Object类就是以字典的形式设计的。我们要实现一个Dictionary类，这样会比Object方便，比如显示字典中的所有元素，对属性进行排序等</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>find <span class="token operator">=</span> find<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> clear<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> remove<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>showAll <span class="token operator">=</span> showAll<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> datakeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> keys <span class="token keyword">in</span> datakeys<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>datakeys<span class="token punctuation">[</span>keys<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>datakeys<span class="token punctuation">[</span>keys<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> datakeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> keys <span class="token keyword">in</span> datakeys<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>datakeys<span class="token punctuation">[</span>keys<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> pbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pbook<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pbook<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pbook<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pbook<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//console.log(pbook.find('c'));</span>pbook<span class="token punctuation">.</span><span class="token function">showAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h1 id="6-散列"><a href="#6-散列" class="headerlink" title="6. 散列"></a>6. 散列</h1><blockquote><p>散列算法的作用是尽可能快地在数据结构中找到一个值。在之前的章节中，你已经知道如果 要在数据结构中获得一个值(使用get方法)，需要遍历整个数据结构来找到它。如果使用散列函数，就知道值的具体位置，因此能够快速检索到该值。散列函数的作用是给定一个键值，然后返回值在表中的地址。</p></blockquote><ul><li>散列后的数据可以快速插入取用</li><li>在散列表上插入、删除和取用数据非常快，但是查找数据却效率低下，比如查找一组数据中的最大值和最小值</li><li>JavaScript散列表基于数组设计，理想情况散列函数会将每一个键值映射为唯一的数组索引，数组长度有限制，更现实的策略是将键均匀分布</li></ul><h2 id="散列关键概念"><a href="#散列关键概念" class="headerlink" title="散列关键概念"></a>散列关键概念</h2><ul><li>数组长度是预先设定的，可以随时增加，所有元素根据和该元素对应的键，保存数组特定位置</li><li>即使使用高效的散列函数，仍然存在两个键值相同的情况，这种现象成为碰撞</li><li>对数组的长度应该是一个质数，所有的策略都基于碰撞</li><li>开链法：两个键相同保存位置一样。开辟第二数组，也称第二个数组为链</li><li>线性探测法属于开放寻址散列，查找散列位置如果当前位置没有继续寻找下一个位置。存储数据较大较适合。数组大小 &gt;= 1.5<em> 数据（开链法），数组大小 &gt;=2</em> 数据（线性探测法</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 线性探测法</span><span class="token keyword">function</span> <span class="token function">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">137</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>simpleHash <span class="token operator">=</span> simpleHash<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>put <span class="token operator">=</span> put<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>showDistro <span class="token operator">=</span> showDistro<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>betterHash <span class="token operator">=</span> betterHash<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>buildChians <span class="token operator">=</span> buildChians<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">buildChians</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//除留余数法</span><span class="token keyword">function</span> <span class="token function">simpleHash</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    total<span class="token operator">+</span><span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> total<span class="token operator">%</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">betterHash</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> H <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    total <span class="token operator">+</span><span class="token operator">=</span> H <span class="token operator">*</span> total <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    total <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> total<span class="token operator">%</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">simpleHash</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">!=</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>      pos<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">simpleHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showDistro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"键值是-》"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"值是【"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>simpleHash<span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> hTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"japan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"america"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nicha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hTable<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'nicha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hTable<span class="token punctuation">.</span><span class="token function">showDistro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h1 id="8-树"><a href="#8-树" class="headerlink" title="8. 树"></a>8. 树</h1><p>非顺序数据结构我们之前学习的有散列表，现在，我们接着学习另一个非顺序数据结构，树。树是一种分层数据的抽象模型。现实生活中最常见的树的例子是家谱，或是公司的组织架构图</p><p>位于树顶部的节点叫做根节点，它没有父节点。节点分为内部节点和外部节点，至少有一个子节点的节点成为内部节点，一个子节点也没有的成为外部节点也叫做叶节点。</p><p>一个节点可以有祖先和后代，一个节点(除了根节点)的祖先包括父节点、祖父节点、曾祖 父节点等。一个节点的后代包括子节点、孙子节点、曾孙节点等。</p><p>节点的一个属性是深度，节点的深度取决于它的祖先节点的数量。树的高度取决于所有节点深度的最大值。</p><h2 id="二叉树和二叉搜索树"><a href="#二叉树和二叉搜索树" class="headerlink" title="二叉树和二叉搜索树"></a>二叉树和二叉搜索树</h2><p>二叉树中的节点最多只能有两个子节点:一个是左侧子节点，另一个是右侧子节点。这些定 义有助于我们写出更高效的向/从树中插入、查找和删除节点的算法。二叉树在计算机科学中的 应用非常广泛。</p><p>二叉搜索树(BST)是二叉树的一种，但是它只允许你在左侧节点存储(比父节点)小的值， 在右侧节点存储(比父节点)大(或者等于)的值。</p><p>而我们今天主要研究的就是二叉搜索树</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> show<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> insert<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>inOrder <span class="token operator">=</span> inOrder<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getMin <span class="token operator">=</span> getMin<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getMax <span class="token operator">=</span> getMax<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>find <span class="token operator">=</span> find<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> remove<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">var</span> parent<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      parent <span class="token operator">=</span> current<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&lt;</span>current<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          parent<span class="token punctuation">.</span>left <span class="token operator">=</span> n<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          parent<span class="token punctuation">.</span>right <span class="token operator">=</span> n<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">||</span> root<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> current<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">||</span> root<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> current<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>data <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span> node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> tempNode <span class="token operator">=</span> <span class="token function">getmin</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>data <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&lt;</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//console.log(nums.getMin())</span>nums<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">inOrder</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;链表&lt;/li&gt;
&lt;li&gt;集合&lt;/li&gt;
&lt;li&gt;字典&lt;/l
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="数据结构与算法" scheme="http://coder.liusixin.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript忍者秘籍--函数操作</title>
    <link href="http://coder.liusixin.cn/posts/d9b9b5eb/"/>
    <id>http://coder.liusixin.cn/posts/d9b9b5eb/</id>
    <published>2017-07-25T07:13:29.000Z</published>
    <updated>2017-07-25T07:13:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总结《JavaScript 忍者秘籍》中函数相关的运用</p></blockquote><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名函数的介绍不用多说，通常，匿名函数的使用情况是：创建一个供以后使用的函数。</p><p>简单的举个例子如下：</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> templateObj <span class="token operator">=</span> <span class="token punctuation">{</span>  shout<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'作为方法的匿名函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>templateObj<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'这也是一个匿名函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>就是函数自调用，或者调用另外一个函数，但是函数调用树的某一处又重新调用了自己，就产生了递归</p><h3 id="普通命名函数的递归"><a href="#普通命名函数的递归" class="headerlink" title="普通命名函数的递归"></a>普通命名函数的递归</h3><p>拿普通命名函数的递归最好的举例就是用最简单的递归需求：检测回文。</p><p>回文的定义：一个字符串，不管从哪一个方向读，结果一样。检测的工作有很多，我们可以创建一个函数，用待检测的回文字符逆序生成出一个字符，然后检测二者是否相同，如果相同，则为回文字符。</p><p>但是这种方法需要分配并创建新的字符，还有一种更简洁的方法：</p><ul><li>单个和零个字符都是回文</li><li>如果字符串的第一个字符和最后一个字符相同，并且除了两个字符以外，别的字符也满足该要求，那么我们就可以检测出来了这个是回文了</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> txt<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="方法中的递归"><a href="#方法中的递归" class="headerlink" title="方法中的递归"></a>方法中的递归</h3><p>所谓的方法，自然离不开对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span>  chirp<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> fn<span class="token punctuation">.</span><span class="token function">chirp</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-chirp'</span> <span class="token punctuation">:</span> <span class="token string">'chirp'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">chirp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//chirp-chirp-chirp</span></code></pre><p>在上述代码中，我们通过对象 fn.chirp 方法的递归调用了自己。但是，因为我们在函数上用了非直接引用，也就是 fn 对象的 chirp 属性，所以才能够实现递归，这也就引出来一个问题：<strong>引用丢失</strong></p><h3 id="引用丢失的问题"><a href="#引用丢失的问题" class="headerlink" title="引用丢失的问题"></a>引用丢失的问题</h3><p>上面的示例代码，依赖于一个进行递归调用的对象属性引用。与函数的实际名称不同，因为这种引用可能是暂时的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span>  chirp<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> fn<span class="token punctuation">.</span><span class="token function">chirp</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-chirp'</span> <span class="token punctuation">:</span> <span class="token string">'chirp'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> samurai <span class="token operator">=</span> <span class="token punctuation">{</span>  chirp<span class="token punctuation">:</span> fn<span class="token punctuation">.</span>chirp<span class="token punctuation">}</span><span class="token punctuation">;</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>samurai<span class="token punctuation">.</span><span class="token function">chirp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'chirp-chirp-chirp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// false</span></code></pre><p>如上，执行结果会弹出 false，因为这时候 samurai.chirp 引用的同样是空对象，这就是引用丢失问题。</p><p>通过完善之前对匿名函数的粗略定义，我们可以修复解决这个问题。在匿名函数中，我们不在使用显式的 fn 引用。这里我们使用 this。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span>  chirp<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">chirp</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-chirp'</span> <span class="token punctuation">:</span> <span class="token string">'chirp'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>当函数作为方法被调用的时候，函数的上下文指的是该方法的对象。</p><p>使用 this 调用，可以让我们的匿名函数更加的强大且灵活。</p><h3 id="内联命名函数"><a href="#内联命名函数" class="headerlink" title="内联命名函数"></a>内联命名函数</h3><p>上面我们解决了作为函数方法为递归时候的一个完美操作。其实这样写也还是有问题的，问题在于给对象定义方法的时候，方法名称是写死的，如果属性名称不一样，也一样会丢失引用。</p><p>这里我们采用另一种解决方案，给匿名函数起名</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span>  chirp<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">signal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">signal</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-chirp'</span> <span class="token punctuation">:</span> <span class="token string">'chirp'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> samurai <span class="token operator">=</span> <span class="token punctuation">{</span>  chirps<span class="token punctuation">:</span> fn<span class="token punctuation">.</span>chirp<span class="token punctuation">}</span><span class="token punctuation">;</span>fn <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>samurai<span class="token punctuation">.</span><span class="token function">chirps</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'chirp-chirp-chirp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以如上的解决办法，就完美解决了我们之前说到所有问题。内联函数还有一个很重要的一点，就是尽管可以给内联函数进行命名，但是这些名称只能在自身函数内部才可见。</p><h2 id="将函数视为对象"><a href="#将函数视为对象" class="headerlink" title="将函数视为对象"></a>将函数视为对象</h2><p>JavaScript 中的函数和其他语言中的函数有所不同，JavaScript 赋予了函数很多的特性，其中最重要的特性之一就是函数作为第一类型对象。</p><p>所以，我们可以给函数添加属性，甚至可以添加方法。</p><h3 id="函数存储"><a href="#函数存储" class="headerlink" title="函数存储"></a>函数存储</h3><p>有时候，我们可能需要存储一组相关但又独立的函数，事件回调管理是最为明显的例子。向这个集合添加函数时候，我们得知道哪些函数在集合中存在，否则不添加。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>  nextId<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  cache<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      fn<span class="token punctuation">.</span>id <span class="token operator">=</span> store<span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>fn<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><h3 id="自记忆函数"><a href="#自记忆函数" class="headerlink" title="自记忆函数"></a>自记忆函数</h3><p>缓存记忆是构造函数的过程，这种函数能够记住先前计算的结果。通过避免重复的计算，极大地提高性能。</p><p><strong>缓存记忆昂贵的计算结果</strong></p><p>作为一个简单的例子，这里我来判断一个数字是否为素数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPrime<span class="token punctuation">.</span>answers<span class="token punctuation">)</span> isPrime<span class="token punctuation">.</span>answers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">.</span>answers<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> isPrime<span class="token punctuation">.</span>answers<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> prime <span class="token operator">=</span> value <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1 不是素数</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      prime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">.</span>answers<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> prime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">.</span>answers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>可以通过下面的<code>isPrime.answers[value]</code>判断出缓存是否成功。</p><p>缓存记忆有两个主要的优点：</p><ul><li>在函数调用获取之前计算结果的时候，最终用户享有性能优势</li><li>发生在幕后，完全无缝，最终用户和开发者都无需任何特殊的操作或者为此做任何初始化工作。</li></ul><p>当然，也会有缺点：</p><ul><li>为了提高性能，任何类型的缓存肯定会牺牲内存</li><li>纯粹主义者可能认为缓存这个问题不应该与业务逻辑放到一起。一个函数或者方法只应该做一件事。</li><li>很难测试和测量一个算法的性能。（比如我们这个“简单”的例子）</li></ul><p><strong>缓存 DOM 记忆</strong></p><p>通过元素标签名来获取 DOM 元素是一个非常常见的操作。但是性能可能不是特别好。所以从上面的缓存记忆我们可以进行如下的操作：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getElements</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>getElements<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> getElements<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>getElements<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span>    getElements<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的代码很简单，而且这个简单的缓存的代码产生了 5 倍以上的性能提升。</p><p>我们可以将状态和缓存信息存储在一个封装的独立位置上，不仅在代码组织上有好处，而且外部存储或缓存对象无需污染作用域，就可以获取性能的提升。</p><h3 id="伪造数组方法"><a href="#伪造数组方法" class="headerlink" title="伪造数组方法"></a>伪造数组方法</h3><p>有时候我们想创建一个包含一组数据的对象。如果只是集合，则只需要创建一个数组即可。但是在某些情况下，除了集合本身，可能会有更多的状体需要保存。</p><p>一种选择是，每次创建对象新版本的时候都创建一个新数组，然后将元数据作为属性或者方法添加到这个新数组上。但是这个操作太常规了。</p><p>欣赏如下骚操作：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> elems <span class="token operator">=</span> <span class="token punctuation">{</span>      length<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      gather<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    elems<span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elems<span class="token punctuation">.</span>length<span class="token punctuation">,</span> elems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>    elems<span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elems<span class="token punctuation">.</span>length<span class="token punctuation">,</span> elems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>通常，<code>Array.prototype.push()</code>是通过其函数上下文操作其自身数组的。这里我们通过 call 方法通过自己的对象代理了函数的上下文。push 的方法会增加 length 的值（会认为他就是数组的 length 属性），然后给对象添加一个数字属性，并将其引用到传入的元素上。</p><h2 id="可变函数的参数列表"><a href="#可变函数的参数列表" class="headerlink" title="可变函数的参数列表"></a>可变函数的参数列表</h2><p>JavaScript 灵活且强大的特性之一是函数可以接受任意数量的参数。虽然 JavaScript 没有函数的重载，但是参数列表的灵活性是获取其他语言类似重载功能的关键所在</p><h3 id="使用apply-支持可变参数"><a href="#使用apply-支持可变参数" class="headerlink" title="使用apply()支持可变参数"></a>使用<code>apply()</code>支持可变参数</h3><p>需求：查找数组中的最大值、最小值</p><p>一开始，我认为 Math 中提供的<code>min()</code>,<code>max()</code>可以满足，但是貌似他并不能够找到数组中的最大值最小值，难道：<code>Math.min(arr[0],arr[1],arr[3]...)??</code></p><p>别闹了，来看看怎么做</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">smallest</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">largest</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">smallest</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">largest</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span></code></pre><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>函数的隐式传递，arguments，也正是因为这个 arguments 的存在，才让函数有能力处理不同数量的参数。即使我们只定义固定数量的形参，通过 arguments 参数我们还是可以访问到实际传给函数的所有的参数。</p><p><strong>检测并遍历参数</strong></p><p>方法的重载通常是通过在同名的方法里声明不同的实例来达到目的。但是在 javascript 中并非如此，在 javaScript 中，我们重载函数的时候只有一个实现。只不过这个实现内部是通过函数实际传入的参数的特性和个数来达到相应目的的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> merged <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Liusixin'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">26</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    city<span class="token punctuation">:</span> <span class="token string">'Beijing'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过如上代码，我们将传递给函数的对象都合并到一个对象中。在 javascript 中，没有强制函数声明多少个参数就得传入多少个参数。函数是否可以成功处理这些参数，完全取决于函数本身的定义。</p><p>注意，我们要做的事情是想让第二个或者第 n 个参数上的属性合并到第一个对象中，所以这个遍历是从 1 开始的。</p><h3 id="利用参数个数进行函数的重载"><a href="#利用参数个数进行函数的重载" class="headerlink" title="利用参数个数进行函数的重载"></a>利用参数个数进行函数的重载</h3><p>基于函数的参数，有很多种办法进行函数的重载。一种通用的方法是，根据传入参数的类型执行不同的操作。另一种办法是，可以通过某些特定参数是否存在来进行判断。还有一种是通过传入参数个数来进行判断。</p><p>假如对象上有一个方法，根据传入参数的个数来执行不同的操作，冗长且呆呆的函数应该张这样：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span>  whatever<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">//do something</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">//do something</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">//do something</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">//do something</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种方式，看起来非常的呆呆的。所以我们换一种方式来说下。</p><p>如果按照如下思路，添加重载的方法会怎样呢。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">addMethod</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token string">'whatever'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*do something*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addMethod</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token string">'whatever'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*do something*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addMethod</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token string">'whatever'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*do something*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里我们使用同样的名称（whatever）将方法添加到该对象上，只不过每个重载的函数是单独的。注意每一个重载的函数参数是不同的。通过这种方式，我们真正为每一个重载都创建了一个独立的匿名函数。漂亮且简洁。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addMethod</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> old <span class="token operator">=</span> object<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  object<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>length <span class="token operator">===</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> old <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> old<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先我们保存原有的函数，针对传参个数做处理，避免不匹配。然后创建一个新的匿名函数，如果该匿名函数的形参和实参个数匹配，就调用这个函数，否则调用原来的函数。</p><p>这里的<code>fn.length</code>是返回函数定义时候定义的形参个数。</p><p><code>adMethod</code>第一次调用会创建个新的匿名函数进行调用的时候将会调用这个 fn 函数。此时 fn 是一个新的对象，第二次调用<code>addMethod</code>的时候，会将之前的同名函数缓存到变量<code>old</code>中，然后将新创建的匿名函数作为方法。新方法首先检查传入的个数是否为 1，如果是则调用新传入的 fn，如果不是，则调用旧的。重新调用该函数的时候将在此检查参数个数是否为 0。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addMethod</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> old <span class="token operator">=</span> object<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  object<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>length <span class="token operator">===</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> old <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> old<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">{</span>  values<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">addMethod</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token string">'find'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addMethod</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token string">'find'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addMethod</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token string">'find'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> first <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> last<span class="token punctuation">)</span> ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后使用如上的技巧的时候需要注意下面几点：</p><p>重载是适用于不同数量的参数，不区分类型、参数名称或者其他东西<br>这样的重载方法会有一些函数调用的开销。我们要考虑在高性能时的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;总结《JavaScript 忍者秘籍》中函数相关的运用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;匿名函数&quot;&gt;&lt;a href=&quot;#匿名函数&quot; class=&quot;headerlink&quot; title=&quot;匿名函数&quot;&gt;&lt;/a&gt;匿名函数&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Generator函数 -&gt; async 函数</title>
    <link href="http://coder.liusixin.cn/posts/ea9682c7/"/>
    <id>http://coder.liusixin.cn/posts/ea9682c7/</id>
    <published>2017-07-20T13:22:35.000Z</published>
    <updated>2017-07-20T13:22:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考链接：<a href="http://www.ruanyifeng.com/blog/2015/04/generator.html" rel="external nofollow noopener noreferrer" target="_blank">阮一峰的网络日志</a></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">yield</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { value: 3, done: false }</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { value: undefined, done: true}</span></code></pre><p>上面代码中，调用 Generator 函数，会返回一个内部指针（即遍历器）g 。这是 Generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针 g 的 next 方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的 yield 语句，上例是执行到 x + 2 为止。<br>换言之，next 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，会返回一个对象，表示当前阶段的信息（ value 属性和 done 属性）。value 属性是 yield 语句后面表达式的值，表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。</p><blockquote><p>参考资料：<a href="http://www.html-js.com/article/1711" rel="external nofollow noopener noreferrer" target="_blank">yield 原理</a></p></blockquote><p>如下示例代码，在浏览器中打断点可以一窥 yield 执行方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fib2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//状态0，第一次调用next，返回0，并改变状态</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//状态1，第二次调用next，返回1，并改变状态</span>  <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    p2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    cur <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//状态2，后面调用next，返回相应的几个，状态不在改变</span>    p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> cur<span class="token punctuation">;</span>    cur <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> fibIter2 <span class="token operator">=</span> <span class="token function">fib2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibIter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>进阶示例</strong></p><p>示例 1：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">yield</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { value: 3, done: false }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{ value: undefined, done: true}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { value: undefined, done: true}</span></code></pre><p>示例 2：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Iterator 遍历</span><span class="token comment" spellcheck="true">//Generator（生成器）是ES6标准引入的新的数据类型。一个generator看上去像一个函数，但可以返回多次</span><span class="token comment" spellcheck="true">//1.类似于将异步变成同步，使函数可以按顺序依次执行，用的已经不多了，有新的东西替代了</span><span class="token keyword">let</span> chi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token string">'冰淇淋'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'汉堡'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(xiaochuan().next());//Object {value: "冰淇淋", done: false}</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">chi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object {value: "冰淇淋", done: false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object {value: "汉堡", done: false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object {value: undefined, done: true}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>yield 返回的是一个指针对象 .next() 执行 -&gt; 发现 yeild 语句执行后返回，返回的值便是当时这个阶段 后面表达式的值，直到执行完毕 done:true 为止。</p><p><strong>扩展 - async 函数</strong></p><blockquote><p><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" rel="external nofollow noopener noreferrer" target="_blank">async 函数的含义和用法（阮一峰的网络日志）</a></p></blockquote><p>Generator 函数，依次读取两个文件。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> readFile <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> gen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>写成 async 函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> asyncReadFile <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/04/generator.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="es6" scheme="http://coder.liusixin.cn/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>web项目常见问题汇总及解决方案</title>
    <link href="http://coder.liusixin.cn/posts/11633c1a/"/>
    <id>http://coder.liusixin.cn/posts/11633c1a/</id>
    <published>2017-07-14T05:15:21.000Z</published>
    <updated>2017-07-30T12:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="meta-基础知识"><a href="#meta-基础知识" class="headerlink" title="meta 基础知识"></a>meta 基础知识</h2><p><strong>H5 页面窗口自动调整到设备宽度，并禁止用户缩放页面</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//一、HTML页面结构</span><span class="token operator">&lt;</span>meta  name<span class="token operator">=</span><span class="token string">"viewport"</span>  content<span class="token operator">=</span><span class="token string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span><span class="token comment" spellcheck="true">// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span><span class="token comment" spellcheck="true">// initial-scale    默认缩放比例，为一个数字，可以带小数</span><span class="token comment" spellcheck="true">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span><span class="token comment" spellcheck="true">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span><span class="token comment" spellcheck="true">// user-scalable    是否允许手动缩放</span><span class="token comment" spellcheck="true">//二、JS动态判断</span><span class="token keyword">var</span> phoneWidth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> phoneScale <span class="token operator">=</span> phoneWidth <span class="token operator">/</span> <span class="token number">640</span><span class="token punctuation">;</span><span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/Android (\d+\.\d+)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>version <span class="token operator">></span> <span class="token number">2.3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>      <span class="token string">'&lt;meta name="viewport" content="width=640, minimum-scale = '</span> <span class="token operator">+</span>        phoneScale <span class="token operator">+</span>        <span class="token string">', maximum-scale = '</span> <span class="token operator">+</span>        phoneScale <span class="token operator">+</span>        <span class="token string">', target-densitydpi=device-dpi">'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>      <span class="token string">'&lt;meta name="viewport" content="width=640, target-densitydpi=device-dpi">'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>    <span class="token string">'&lt;meta name="viewport" content="width=640, user-scalable=no, target-densitydpi=device-dpi">'</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>H5 空白页基本 meta 标签</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 设置缩放 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no, minimal-ui<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-capable<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-status-bar-style<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --></span>&lt;meta name="format-detection"content="telephone=no, email=no" /></code></pre><p><strong>PC 端基础 meta 标签</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 页面关键词--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>your tags<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 页面描述--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150 words<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--    all：文件将被检索，且页面上的链接可以被查询；    none：文件将不被检索，且页面上的链接不可以被查询；    index：文件将被检索；    follow：页面上的链接可以被查询；    noindex：文件将不被检索；    nofollow：页面上的链接不可以被查询。 --></span> <span class="token comment" spellcheck="true">&lt;!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0;url<span class="token punctuation">=</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>页面缓存设置</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 清除缓存 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pragma<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cache-control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expires<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p><strong>其他 meta 标签</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 启用360浏览器的极速模式(webkit) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 避免IE使用兼容模式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HandheldFriendly<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 微软的老式浏览器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MobileOptimized<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- uc强制竖屏 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen-orientation<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- QQ强制竖屏 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-orientation<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- UC强制全屏 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-screen<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- QQ强制全屏 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-fullscreen<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- UC应用模式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>browsermode<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- QQ应用模式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-page-mode<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- windows phone 点击无高光 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-tap-highlight<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 定义网页作者 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>googlebot<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>verify<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>移动端如何定义字体 font-family</strong></p><pre class=" language-scss"><code class="language-scss">@ --------------------------------------中文字体的英文名称@ 宋体      SimSun@ 黑体      SimHei@ 微信雅黑   Microsoft Yahei@ 微软正黑体 Microsoft JhengHei@ 新宋体    NSimSun@ 新细明体  MingLiU@ 细明体    MingLiU@ 标楷体    DFKai-SB@ 仿宋     FangSong@ 楷体     KaiTi@ 仿宋_GB<span class="token number">2312</span>  FangSong_GB<span class="token number">2312</span>@ 楷体_GB<span class="token number">2312</span>  KaiTi_GB<span class="token number">2312</span>  @@ <span class="token selector">说明：中文字体多数使用宋体、雅黑，英文用Helveticabody </span><span class="token punctuation">{</span> <span class="token property">font-family</span><span class="token punctuation">:</span> Microsoft Yahei,SimSun,Helvetica<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>打电话发短信写邮件怎么实现</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 一、打电话</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"tel:0755-10086"</span><span class="token operator">></span>打电话给<span class="token punctuation">:</span><span class="token number">0755</span><span class="token operator">-</span><span class="token number">10086</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//  二、发短信，winphone系统无效</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"sms:10086"</span><span class="token operator">></span>发短信给<span class="token punctuation">:</span> <span class="token number">10086</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">// 三、写邮件</span><span class="token comment" spellcheck="true">//注：在添加这些功能时，第一个功能以"?"开头，后面的以"&amp;"开头</span><span class="token comment" spellcheck="true">//1.普通邮件</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com;384900096@qq.com"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//5.包含主题，用?subject=</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com?subject=邮件主题"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//7.内容包含链接，含http(s)://等的文本自动转化为链接</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com?body=http://www.baidu.com"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//8.内容包含图片（PC不支持）</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com?body=&lt;img src='images/1.jpg' />"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment" spellcheck="true">//9.完整示例</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src='images/1.jpg' />"</span><span class="token operator">></span>点击我发邮件<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><strong>移动端 touch 事件（区分 webkit 和 winphone）</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */</span><span class="token comment" spellcheck="true">// 以下支持webkit</span>touchstart——当手指触碰屏幕时候发生。不管当前有多少只手指<span class="token function">touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可以阻止默认情况的发生：阻止页面滚动touchend——当手指离开屏幕时触发<span class="token function">touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一个提示框，此时会触发该事件，这个事件比较少用<span class="token comment" spellcheck="true">//TouchEvent说明：</span>touches：屏幕上所有手指的信息targetTouches：手指在目标区域的手指信息changedTouches：最近一次触发该事件的手指信息touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息<span class="token comment" spellcheck="true">//参数信息(changedTouches[0])</span>clientX、clientY在显示区的坐标target：当前元素<span class="token comment" spellcheck="true">//事件响应顺序</span>ontouchstart  <span class="token operator">></span> ontouchmove  <span class="token operator">></span> ontouchend <span class="token operator">></span> onclick<span class="token comment" spellcheck="true">// 以下支持winphone 8</span>MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html<span class="token punctuation">{</span><span class="token operator">-</span>ms<span class="token operator">-</span>touch<span class="token operator">-</span>action<span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>可以阻止默认情况的发生：阻止页面滚动MSPointerUp——当手指离开屏幕时触发</code></pre><p><strong>移动端 click 屏幕产生 200-300ms 的延时响应</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//解决方案：</span>fastclick可以解决在手机上点击事件的300ms延迟zepto的touch模块，tap事件也是为了解决在click的延迟问题</code></pre><p><strong>Rentina 显示屏原理及设计方案</strong></p><pre class=" language-js"><code class="language-js">说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由<span class="token number">1</span>个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点<span class="token number">1</span>个变为<span class="token number">4</span>个。在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的<span class="token number">2</span>倍。那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud<span class="token operator">-</span>size把图片缩小为原来的<span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token comment" spellcheck="true">//例如图片宽高为：200px*200px，那么写法如下</span><span class="token punctuation">.</span>css<span class="token punctuation">{</span>width<span class="token punctuation">:</span>100px<span class="token punctuation">;</span>height<span class="token punctuation">:</span>100px<span class="token punctuation">;</span>background<span class="token operator">-</span>size<span class="token punctuation">:</span>100px 100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</span><span class="token punctuation">.</span>css<span class="token punctuation">{</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>20px<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//image-set设计Rentina背景图</span>image<span class="token operator">-</span><span class="token keyword">set</span><span class="token punctuation">,</span>webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。<span class="token punctuation">.</span>css <span class="token punctuation">{</span>    background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span>images<span class="token operator">/</span>bg<span class="token punctuation">.</span>jpg<span class="token punctuation">)</span> no<span class="token operator">-</span>repeat center<span class="token punctuation">;</span>    background<span class="token punctuation">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>image<span class="token operator">-</span><span class="token keyword">set</span><span class="token punctuation">(</span>    <span class="token function">url</span><span class="token punctuation">(</span>images<span class="token operator">/</span>bg<span class="token punctuation">.</span>jpg<span class="token punctuation">)</span> 1x<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//支持image-set普通屏</span>    <span class="token function">url</span><span class="token punctuation">(</span>images<span class="token operator">/</span>bg<span class="token operator">-</span>2x<span class="token punctuation">.</span>jpg<span class="token punctuation">)</span> 2x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//支持image-set的Rentinan</span><span class="token punctuation">}</span></code></pre><p><strong>点击元素产生背景或边框怎么去掉</strong></p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；</span><span class="token comment" spellcheck="true">//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；</span><span class="token comment" spellcheck="true">//winphone系统,点击标签产生的灰色半透明背景，能通过设置&lt;meta name="msapplication-tap-highlight" content="no">去掉；</span><span class="token comment" spellcheck="true">//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签</span><span class="token selector">a,button,input,textarea </span><span class="token punctuation">{</span>    <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-user-modify</span><span class="token punctuation">:</span>read-write-plaintext-only<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 也可以</span><span class="token selector">* </span><span class="token punctuation">{</span> <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//winphone下</span>&lt;meta name=<span class="token string">"msapplication-tap-highlight"</span> content=<span class="token string">"no"</span>></code></pre><p><strong> 美化表单元素 </strong></p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//一、使用appearance改变webkit浏览器的默认外观</span><span class="token selector">input,select </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//二、winphone下，使用伪元素改变表单元素默认外观</span><span class="token comment" spellcheck="true">//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰</span><span class="token selector">select::-ms-expand </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰</span><span class="token selector">input[type='radio']::-ms-check,input[type='checkbox']::-ms-check </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰</span><span class="token selector">input[type='text']::-ms-clear,input[type='tel']::-ms-clear,input[type='number']::-ms-clear </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong> 移动端字体单位 font-size 选择 px 还是 rem </strong></p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// 如需适配多种移动设备，建议使用rem。以下为参考值：</span><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">62.5%</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//10*16 = 62.5%</span><span class="token comment" spellcheck="true">//设置12px字体   这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.2</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>超实用的 CSS 样式</strong></p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//去掉webkit的滚动条——display: none;</span><span class="token comment" spellcheck="true">//其他参数</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollba <span class="token comment" spellcheck="true">//滚动条整体部分</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-thumb   <span class="token comment" spellcheck="true">//滚动条内的小方块</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-track   <span class="token comment" spellcheck="true">//滚动条轨道</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-button  <span class="token comment" spellcheck="true">//滚动条轨道两端按钮</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-track-piece  <span class="token comment" spellcheck="true">//滚动条中间部分，内置轨道</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-corner       <span class="token comment" spellcheck="true">//边角，两个滚动条交汇处</span><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-resizer            <span class="token comment" spellcheck="true">//两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</span><span class="token comment" spellcheck="true">// 禁止长按链接与图片弹出菜单</span><span class="token selector">a,img </span><span class="token punctuation">{</span>  <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 禁止ios和android用户选中文字</span><span class="token selector">html,body </span><span class="token punctuation">{</span>  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 改变输入框placeholder的颜色值</span><span class="token selector">::-webkit-input-placeholder </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* WebKit browsers */</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">:-moz-placeholder </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Mozilla Firefox 4 to 18 */</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">::-moz-placeholder </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Mozilla Firefox 19+ */</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">:-ms-input-placeholder </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Internet Explorer 10+ */</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input:focus::-webkit-input-placeholder </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// android上去掉语音输入按钮</span><span class="token selector">input::-webkit-input-speech-button </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 阻止windows Phone的默认触摸事件</span><span class="token comment" spellcheck="true">/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/</span><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">-ms-touch-action</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//禁止winphone默认触摸事件</span></code></pre><p><strong>取消 input 在 ios 下，输入的时候英文首字母的默认大写</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">autocapitalize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">autocorrect</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><strong>手机拍照和上传图片</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> accept<span class="token operator">=</span><span class="token string">"images/*"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> accept<span class="token operator">=</span><span class="token string">"video/*"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p><strong>屏幕旋转的事件和样式</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//JS处理</span><span class="token keyword">function</span> <span class="token function">orientInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> orientChk <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">></span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token operator">?</span><span class="token string">'landscape'</span><span class="token punctuation">:</span><span class="token string">'portrait'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>orientChk <span class="token operator">==</span><span class="token string">'lapdscape'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里是横屏下需要执行的事件</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里是竖屏下需要执行的事件</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">orientInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'onorientationchange'</span> <span class="token keyword">in</span> window<span class="token operator">?</span><span class="token string">'orientationchange'</span><span class="token punctuation">:</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>orientInit<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//CSS处理</span><span class="token comment" spellcheck="true">//竖屏时样式</span>@media all and <span class="token punctuation">(</span>orientation<span class="token punctuation">:</span>portrait<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//横屏时样式</span>@media all and <span class="token punctuation">(</span>orientation<span class="token punctuation">:</span>landscape<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span></code></pre><p><strong>audio 元素和 video 元素在 ios 和 andriod 中无法自动播放</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//音频，写法一</span><span class="token operator">&lt;</span>audio src<span class="token operator">=</span><span class="token string">"music/bg.mp3"</span> autoplay loop controls<span class="token operator">></span>你的浏览器还不支持哦<span class="token operator">&lt;</span><span class="token operator">/</span>audio<span class="token operator">></span><span class="token comment" spellcheck="true">//音频，写法二</span><span class="token operator">&lt;</span>audio controls<span class="token operator">=</span><span class="token string">"controls"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">"music/bg.ogg"</span> type<span class="token operator">=</span><span class="token string">"audio/ogg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>    <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">"music/bg.mp3"</span> type<span class="token operator">=</span><span class="token string">"audio/mpeg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>    优先播放音乐bg<span class="token punctuation">.</span>ogg，不支持在播放bg<span class="token punctuation">.</span>mp3<span class="token operator">&lt;</span><span class="token operator">/</span>audio<span class="token operator">></span><span class="token comment" spellcheck="true">//JS绑定自动播放（操作window时，播放音乐）</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//微信下兼容处理</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小结</span><span class="token comment" spellcheck="true">//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常</span><span class="token comment" spellcheck="true">//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间</span></code></pre><p><strong>重力感应事件</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 运用HTML5的deviceMotion，调用重力感应事件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>DeviceMotionEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'devicemotion'</span><span class="token punctuation">,</span> deviceMotionHandler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> speed <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> z <span class="token operator">=</span> lastX <span class="token operator">=</span> lastY <span class="token operator">=</span> lastZ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deviceMotionHandler</span><span class="token punctuation">(</span>eventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> acceleration <span class="token operator">=</span> event<span class="token punctuation">.</span>accelerationIncludingGravity<span class="token punctuation">;</span>  x <span class="token operator">=</span> acceleration<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  y <span class="token operator">=</span> acceleration<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  z <span class="token operator">=</span> acceleration<span class="token punctuation">.</span>z<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> lastX<span class="token punctuation">)</span> <span class="token operator">></span> speed <span class="token operator">||</span>    Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> lastY<span class="token punctuation">)</span> <span class="token operator">></span> speed <span class="token operator">||</span>    Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>z <span class="token operator">-</span> lastZ<span class="token punctuation">)</span> <span class="token operator">></span> speed  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里是摇动后要执行的方法</span>    <span class="token function">yaoAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  lastX <span class="token operator">=</span> x<span class="token punctuation">;</span>  lastY <span class="token operator">=</span> y<span class="token punctuation">;</span>  lastZ <span class="token operator">=</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yaoAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span></code></pre><p><strong>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>WeixinJSBridge<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            WeixinJSBridge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">'setFontSizeCallback'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'fontSize'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        WeixinJSBridge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">'setFontSizeCallback'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'fontSize'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小</span>body <span class="token punctuation">{</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>text<span class="token operator">-</span>size<span class="token operator">-</span>adjust<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token operator">!</span>important<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最好的解决方案：最好使用rem或百分比布局</span></code></pre><p><strong>定位的坑</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//fixed定位</span><span class="token comment" spellcheck="true">//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</span><span class="token comment" spellcheck="true">//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</span><span class="token comment" spellcheck="true">//3.ios4下不支持position:fixed</span><span class="token comment" spellcheck="true">//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"wrapper"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>               <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>               <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"iscroll.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> myscroll<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">loaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        myscroll<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">iScroll</span><span class="token punctuation">(</span><span class="token string">"wrapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>loaded<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//position定位</span><span class="token comment" spellcheck="true">//Android下弹出软键盘弹出时，影响absolute元素定位</span><span class="token comment" spellcheck="true">//解决方案:</span><span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ua<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.ipt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.css'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'visibility'</span><span class="token punctuation">:</span><span class="token string">'hidden'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'blur'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.css'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'visibility'</span><span class="token punctuation">:</span><span class="token string">'visible'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>播放视频不全屏</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--1.ios7+支持自动播放2.支持Airplay的设备（如：音箱、Apple TV)播放x-webkit-airplay="true"3.播放视频不全屏webkit-playsinline="true"--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">x-webkit-airplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">webkit-playsinline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">preload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><p><strong>JS 判断设备</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>  <span class="token keyword">var</span> agent <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Android'</span><span class="token punctuation">,</span>    <span class="token string">'iPhone'</span><span class="token punctuation">,</span>    <span class="token string">'SymbianOS'</span><span class="token punctuation">,</span>    <span class="token string">'Windows Phone'</span><span class="token punctuation">,</span>    <span class="token string">'iPad'</span><span class="token punctuation">,</span>    <span class="token string">'iPod'</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">,</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> agent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>agent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">deviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">deviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>JS 判断微信浏览器</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isWeixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/MicroMessenger/i</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'micromessenger'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>android 2.3 bug</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉</span><span class="token comment" spellcheck="true">//2.after和before伪类无法使用动画animation</span><span class="token comment" spellcheck="true">//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值</span><span class="token comment" spellcheck="true">//4.translate百分比的写法和scale在一起会导致失效，例如：</span><span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><strong>android 4.x bug</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写</span><span class="token comment" spellcheck="true">//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</span><span class="token comment" spellcheck="true">//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</span><span class="token comment" spellcheck="true">//4.android无法同时播放多音频audio</span></code></pre><p><strong>消除 transition 闪屏</strong></p><pre class=" language-scss"><code class="language-scss"><span class="token selector">.css </span><span class="token punctuation">{</span>  <span class="token property">-webkit-transform-style</span><span class="token punctuation">:</span> preserve-<span class="token number">3</span>d<span class="token punctuation">;</span>  <span class="token property">-webkit-backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-perspective</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>开启硬件加速</strong></p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。</span><span class="token selector">.css </span><span class="token punctuation">{</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-moz-transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-ms-transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>渲染优化</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.禁止使用iframe（阻塞父文档onload事件）</span><span class="token comment" spellcheck="true">//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）</span><span class="token comment" spellcheck="true">//使用CSS3代码代替JS动画；</span><span class="token comment" spellcheck="true">//开启GPU加速；</span><span class="token comment" spellcheck="true">//使用base64位编码图片(不小图而言，大图不建议使用)</span><span class="token comment" spellcheck="true">// 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于：</span><span class="token comment" spellcheck="true">//1.减少HTTP请求；</span><span class="token comment" spellcheck="true">//2.避免文件跨域；</span><span class="token comment" spellcheck="true">//3.修改及时生效；</span></code></pre><p><strong>腾讯方案</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> autoScale <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> ratio <span class="token operator">=</span> <span class="token number">320</span><span class="token operator">/</span><span class="token number">504</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//这是设计稿的宽高比（504是Iphone的高度去掉标题栏高度）</span>        winW <span class="token operator">=</span> document<span class="token punctuation">.</span>getElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>        winH <span class="token operator">=</span> document<span class="token punctuation">.</span>getElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>        ratio2 <span class="token operator">=</span> winW<span class="token operator">/</span>winH<span class="token punctuation">,</span>        scale<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ratio<span class="token operator">&lt;</span>ratio2<span class="token punctuation">)</span><span class="token punctuation">{</span>        scale <span class="token operator">=</span> <span class="token punctuation">(</span>winH<span class="token operator">/</span><span class="token number">504</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        scale <span class="token operator">=</span> <span class="token punctuation">(</span>winW<span class="token operator">/</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">var</span> cssText <span class="token operator">=</span> <span class="token string">'-webkit-transform: scale('</span><span class="token operator">+</span>scale<span class="token operator">+</span><span class="token string">');-webkit-transform-origin: top; opacity:1;'</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.wrap'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> cssText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token operator">/</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">!==</span> <span class="token number">320</span><span class="token operator">/</span><span class="token number">504</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">autoScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.page'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'opacity'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//添加一定时长以确保宽高获取正确</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'onorientationchange'</span> <span class="token keyword">in</span> window<span class="token operator">?</span><span class="token string">'orientationchange'</span><span class="token punctuation">:</span><span class="token string">'resize'</span><span class="token punctuation">,</span> autoScale<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">detectOrientatioin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//切换横竖屏</span><span class="token keyword">function</span> <span class="token function">detectOrientatioin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>orientation<span class="token operator">==</span><span class="token number">180</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>orientation<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//竖屏</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>orientation<span class="token operator">==</span><span class="token number">90</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>orientation<span class="token operator">==</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//横屏</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;meta-基础知识&quot;&gt;&lt;a href=&quot;#meta-基础知识&quot; class=&quot;headerlink&quot; title=&quot;meta 基础知识&quot;&gt;&lt;/a&gt;meta 基础知识&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;H5 页面窗口自动调整到设备宽度，并禁止用户缩放页面&lt;/strong
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Express创建web服务器总结</title>
    <link href="http://coder.liusixin.cn/posts/7aa0b5e/"/>
    <id>http://coder.liusixin.cn/posts/7aa0b5e/</id>
    <published>2017-06-20T13:03:50.000Z</published>
    <updated>2017-06-20T13:03:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nodejs 搭建 web 站点的一些记录</p></blockquote><h2 id="1-exports-和-module-exports"><a href="#1-exports-和-module-exports" class="headerlink" title="1. exports 和 module.exports"></a>1. exports 和 module.exports</h2><p><code>require</code> 用来加载代码，而 <code>exports</code> 和 <code>module.exports</code> 则用来导出代码。</p><p>有时候我们可能会迷惑于 <code>exports</code> 和 <code>module.exports</code> 的区别，我们先来巩固下 js 的基础。示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// { name: 1 }</span><span class="token comment" spellcheck="true">// { name: 1 }</span><span class="token comment" spellcheck="true">// { name: 2 }</span><span class="token comment" spellcheck="true">// { name: 2 }</span><span class="token comment" spellcheck="true">// { name: 2 }</span><span class="token comment" spellcheck="true">// { name: 3 }</span></code></pre><blockquote><p>a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。</p></blockquote><p>明白了上述例子后，我们只需知道三点就知道 <code>exports</code> 和 <code>module.exports</code> 的区别了：</p><ol><li><code>module.exports</code> 初始值为一个空对象 <code>{}</code></li><li><code>exports</code> 是指向的 <code>module.exports</code> 的引用</li><li><code>require()</code> 返回的是 <code>module.exports</code> 而不是 <code>exports</code></li></ol><p>我们经常看到这样的写法：</p><pre class=" language-js"><code class="language-js">exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>上面的代码等价于:</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports</code></pre><blockquote><p><code>module.exports</code> 指向新的对象时，<code>exports</code> 断开了与 <code>module.exports</code> 的引用，那么通过 <code>exports = module.exports</code> 让 <code>exports</code> 重新指向 <code>module.exports</code>。</p></blockquote><h2 id="2-promise"><a href="#2-promise" class="headerlink" title="2. promise"></a>2. promise</h2><p>网上有许多关于 Promise 的资料：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a> （基础）</li><li><a href="http://liubin.org/promises-book/" rel="external nofollow noopener noreferrer" target="_blank">http://liubin.org/promises-book/</a> （开源 Promise 迷你书）</li><li><a href="http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/" rel="external nofollow noopener noreferrer" target="_blank">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a> （进阶）</li><li><a href="https://promisesaplus.com/" rel="external nofollow noopener noreferrer" target="_blank">https://promisesaplus.com/</a> （官方定义规范）</li></ul><p>Promise 用于异步流程控制，生成器与 yield 也能实现流程控制（基于 co）。async/await 结合 Promise 也可以实现流程控制，有兴趣请查阅 <a href="http://es6.ruanyifeng.com/#docs/async#async函数" rel="external nofollow noopener noreferrer" target="_blank">《ECMAScript6 入门》</a>。</p><h3 id="2-1-深入-Promise"><a href="#2-1-深入-Promise" class="headerlink" title="2.1 深入 Promise"></a>2.1 深入 Promise</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/30797777" rel="external nofollow noopener noreferrer" target="_blank">Promise 必知必会（十道题）</a></li><li><a href="https://zhuanlan.zhihu.com/p/25178630" rel="external nofollow noopener noreferrer" target="_blank">深入 Promise(一)——Promise 实现详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/25198178" rel="external nofollow noopener noreferrer" target="_blank">深入 Promise(二)——进击的 Promise</a></li><li><a href="https://zhuanlan.zhihu.com/p/25199781" rel="external nofollow noopener noreferrer" target="_blank">深入 Promise(三)——命名 Promise</a></li></ul><h2 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3. 环境变量"></a>3. 环境变量</h2><p>环境变量不属于 Node.js 的知识范畴，只不过我们在开发 Node.js 应用时经常与环境变量打交道，所以这里简单介绍下。</p><p>环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数。在 Mac 和 Linux 的终端直接输入 env，会列出当前的环境变量，如：<code>USER = xxx</code>。简单来讲，环境变量就是传递参数给运行程序的。</p><p>在 Node.js 中，我们经常这么用:</p><pre class=" language-sh"><code class="language-sh">NODE_ENV = test node app</code></pre><p>通过以上命令启动程序，指定当前环境变量 <code>NODE_ENV</code> 的值为 test，那么在 app.js 中可通过 <code>process.env</code> 来获取环境变量:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//test</span></code></pre><p>另一个常见的例子是使用 <a href="https://www.npmjs.com/package/debug" rel="external nofollow noopener noreferrer" target="_blank">debug</a> 模块时:</p><pre class=" language-sh"><code class="language-sh">DEBUG = * node app</code></pre><p>Windows 用户需要首先设置环境变量，然后再执行程序：</p><pre class=" language-sh"><code class="language-sh">set DEBUG = *set NODE_ENV = testnode app</code></pre><p>或者使用 <a href="https://www.npmjs.com/package/cross-env" rel="external nofollow noopener noreferrer" target="_blank">cross-env</a>：</p><pre class=" language-sh"><code class="language-sh">npm i cross-env -g</code></pre><p>使用方式：</p><pre class=" language-sh"><code class="language-sh">cross-env NODE_ENV = test node app</code></pre><h2 id="4-package-json"><a href="#4-package-json" class="headerlink" title="4. package.json"></a>4. package.json</h2><p>package.json 对于 Node.js 应用来说是一个不可或缺的文件，它存储了该 Node.js 应用的名字、版本、描述、作者、入口文件、脚本、版权等等信息。npm 官网有 package.json 每个字段的详细介绍：<a href="https://docs.npmjs.com/files/package.json" rel="external nofollow noopener noreferrer" target="_blank">https://docs.npmjs.com/files/package.json</a>。</p><h3 id="4-1-semver"><a href="#4-1-semver" class="headerlink" title="4.1 semver"></a>4.1 semver</h3><p>语义化版本（semver）即 dependencies、devDependencies 和 peerDependencies 里的如：<code>&quot;co&quot;: &quot;^4.6.0&quot;</code>。</p><p>semver 格式：<code>主版本号.次版本号.修订号</code>。版本号递增规则如下：</p><ul><li><code>主版本号</code>：做了不兼容的 API 修改</li><li><code>次版本号</code>：做了向下兼容的功能性新增</li><li><code>修订号</code>：做了向下兼容的 bug 修正</li></ul><p>更多阅读：</p><ol><li><a href="http://semver.org/lang/zh-CN/" rel="external nofollow noopener noreferrer" target="_blank">http://semver.org/lang/zh-CN/</a></li><li><a href="http://taobaofed.org/blog/2016/08/04/instructions-of-semver/" rel="external nofollow noopener noreferrer" target="_blank">http://taobaofed.org/blog/2016/08/04/instructions-of-semver/</a></li></ol><p>作为 Node.js 的开发者，我们在发布 npm 模块的时候一定要遵守语义化版本的命名规则，即：有 breaking change 发大版本，有新增的功能发小版本，有小的 bug 修复或优化则发修订版本。</p><h2 id="5-Npm-使用注意事项"><a href="#5-Npm-使用注意事项" class="headerlink" title="5. Npm 使用注意事项"></a>5. Npm 使用注意事项</h2><h3 id="5-1-npm-init"><a href="#5-1-npm-init" class="headerlink" title="5.1 npm init"></a>5.1 npm init</h3><p>使用 <code>npm init</code> 初始化一个空项目是一个好的习惯，即使你对 package.json 及其他属性非常熟悉，<code>npm init</code> 也是你开始写新的 Node.js 应用或模块的一个快捷的办法。<code>npm init</code> 有智能的默认选项，比如从根目录名称推断模块名称，通过 <code>~/.npmrc</code> 读取你的信息，用你的 Git 设置来确定 repository 等等。</p><h3 id="5-2-npm-install"><a href="#5-2-npm-install" class="headerlink" title="5.2 npm install"></a>5.2 npm install</h3><p><code>npm install</code> 是我们最常用的 npm 命令之一，因此我们需要好好了解下这个命令。终端输入 <code>npm install -h</code> 查看使用方式:</p><blockquote><p>小提示: <code>npm i</code> 是 <code>npm install</code> 的简写，建议使用 <code>npm i</code>。</p></blockquote><p>直接使用 <code>npm i</code> 安装的模块是不会写入 package.json 的 dependencies (或 devDependencies)，需要额外加个参数:</p><ol><li><code>npm i express --save</code>/<code>npm i express -S</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 dependencies )</li><li><code>npm i express --save-dev</code>/<code>npm i express -D</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 devDependencies )</li><li><code>npm i express --save --save-exact</code> (安装 express，同时将 <code>&quot;express&quot;: &quot;4.14.0&quot;</code> 写入 dependencies )</li></ol><p>第三种方式将固定版本号写入 dependencies，建议线上的 Node.js 应用都采取这种锁定版本号的方式，因为你不可能保证第三方模块下个小版本是没有验证 bug 的，即使是很流行的模块。</p><blockquote><p>后面会介绍更安全的 <code>npm shrinkwrap</code> 的用法。</p></blockquote><p>运行以下命令：</p><pre class=" language-sh"><code class="language-sh">npm config set save-exact true</code></pre><p>这样每次 <code>npm i xxx --save</code> 的时候会锁定依赖的版本号，相当于加了 <code>--save-exact</code> 参数。</p><blockquote><p>小提示：<code>npm config set</code> 命令将配置写到了 ~/.npmrc 文件，运行 <code>npm config list</code> 查看。</p></blockquote><h3 id="5-3-npm-scripts"><a href="#5-3-npm-scripts" class="headerlink" title="5.3 npm scripts"></a>5.3 npm scripts</h3><p>npm 提供了灵活而强大的 scripts 功能，见 <a href="https://docs.npmjs.com/misc/scripts" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。</p><p>npm 的 scripts 有一些内置的缩写命令，如常用的：</p><ul><li><code>npm start</code> 等价于 <code>npm run start</code></li><li><code>npm test</code> 等价于 <code>npm run test</code></li></ul><h3 id="5-4-npm-shrinkwrap"><a href="#5-4-npm-shrinkwrap" class="headerlink" title="5.4 npm shrinkwrap"></a>5.4 npm shrinkwrap</h3><p>前面说过要锁定依赖的版本，但这并不能完全防止意外情况的发生，因为锁定的只是最外一层的依赖，而里层依赖的模块的 package.json 有可能写的是 <code>&quot;mongoose&quot;: &quot;*&quot;</code>。为了彻底锁定依赖的版本，让你的应用在任何机器上安装的都是同样版本的模块（不管嵌套多少层），通过运行 <code>npm shrinkwrap</code>，会在当前目录下产生一个 <code>npm-shrinkwrap.json</code>，里面包含了通过 node_modules 计算出的模块的依赖树及版本。只要目录下有 <code>npm-shrinkwrap.json</code> 则运行 <code>npm install</code> 的时候会优先使用 <code>npm-shrinkwrap.json</code> 进行安装，没有则使用 <code>package.json</code> 进行安装。</p><p>更多阅读：</p><ol><li><a href="https://docs.npmjs.com/cli/shrinkwrap" rel="external nofollow noopener noreferrer" target="_blank">https://docs.npmjs.com/cli/shrinkwrap</a></li><li><a href="http://tech.meituan.com/npm-shrinkwrap.html" rel="external nofollow noopener noreferrer" target="_blank">http://tech.meituan.com/npm-shrinkwrap.html</a></li></ol><blockquote><p>注意: 如果 <code>node_modules</code> 下存在某个模块（如直接通过 <code>npm install xxx</code> 安装的）而 package.json 中没有，运行 <code>npm shrinkwrap</code> 则会报错。另外，<code>npm shrinkwrap</code> 只会生成 <code>dependencies</code> 的依赖，不会生成 <code>devDependencies</code> 的。</p></blockquote><h2 id="6-初始化一个-Express-项目"><a href="#6-初始化一个-Express-项目" class="headerlink" title="6. 初始化一个 Express 项目"></a>6. 初始化一个 Express 项目</h2><p>首先，我们新建一个目录 myblog，在该目录下运行 <code>npm init -y</code> 生成一个 package.json，如下所示：</p><p>然后安装 express 并写入 package.json：</p><pre class=" language-sh"><code class="language-sh">npm i express@4.14.0 --save</code></pre><p>新建 index.js，添加如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello, express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is starting at port:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码的意思是：生成一个 express 实例 app，挂载了一个根路由控制器，然后监听 3000 端口并启动程序。运行 <code>node index</code>，打开浏览器访问 <code>localhost:3000</code> 时，页面应显示 hello, express。</p><p>这是最简单的一个使用 express 的例子，后面会介绍路由及模板的使用。</p><h3 id="6-1-supervisor"><a href="#6-1-supervisor" class="headerlink" title="6.1 supervisor"></a>6.1 supervisor</h3><p>在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 <a href="https://www.npmjs.com/package/supervisor" rel="external nofollow noopener noreferrer" target="_blank">supervisor</a> 可以解决这个繁琐的问题，全局安装 supervisor：</p><pre class=" language-sh"><code class="language-sh">npm i -g supervisor</code></pre><p>运行 <code>supervisor index</code> 启动程序，supervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。</p><h2 id="7-路由"><a href="#7-路由" class="headerlink" title="7. 路由"></a>7. 路由</h2><p>前面我们只是挂载了根路径的路由控制器，现在修改 index.js 如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello, express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/users/:name'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello, '</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is starting at port:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码的意思是：当访问根路径时，依然返回 hello, express，当访问如 <code>localhost:3000/users/liusixin</code> 路径时，返回 hello, liusixin。路径中 <code>:name</code> 起了占位符的作用，这个占位符的名字是 name，可以通过 <code>req.params.name</code> 取到实际的值。</p><blockquote><p>小提示：express 使用了 <a href="https://www.npmjs.com/package/path-to-regexp" rel="external nofollow noopener noreferrer" target="_blank">path-to-regexp</a> 模块实现的路由匹配。</p></blockquote><p>不难看出：req 包含了请求来的相关信息，res 则用来返回该请求的响应，更多请查阅 <a href="http://expressjs.com/en/4x/api.html" rel="external nofollow noopener noreferrer" target="_blank">express 官方文档</a>。下面介绍几个常用的 req 的属性：</p><ul><li><code>req.query</code>: 解析后的 url 中的 querystring，如 <code>?name=haha</code>，req.query 的值为 <code>{name: &#39;haha&#39;}</code></li><li><code>req.params</code>: 解析 url 中的占位符，如 <code>/:name</code>，访问 /haha，req.params 的值为 <code>{name: &#39;haha&#39;}</code></li><li><code>req.body</code>: 解析后请求体，需使用相关的模块，如 <a href="https://www.npmjs.com/package/body-parser" rel="external nofollow noopener noreferrer" target="_blank">body-parser</a>，请求体为 <code>{&quot;name&quot;: &quot;haha&quot;}</code>，则 req.body 为 <code>{name: &#39;haha&#39;}</code></li></ul><h3 id="7-1-express-Router"><a href="#7-1-express-Router" class="headerlink" title="7.1 express.Router"></a>7.1 express.Router</h3><p>上面只是很简单的路由使用的例子（将所有路由控制函数都放到了 index.js），但在实际开发中通常有几十甚至上百的路由，都写在 index.js 既臃肿又不好维护，这时可以使用 express.Router 实现更优雅的路由解决方案。在 myblog 目录下创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js。最后代码如下：</p><p><strong>index.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> userRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is starting at port:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>routes/index.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello, express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p><strong>routes/users.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:name'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello, '</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>以上代码的意思是：我们将 <code>/</code> 和 <code>/users/:name</code> 的路由分别放到了 routes/index.js 和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 <code>app.use</code> 挂载到不同的路径。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。</p><p>更多 express.Router 的用法见 <a href="http://expressjs.com/en/4x/api.html#router" rel="external nofollow noopener noreferrer" target="_blank">express 官方文档</a>。</p><h2 id="8-模板引擎"><a href="#8-模板引擎" class="headerlink" title="8. 模板引擎"></a>8. 模板引擎</h2><p>模板引擎（Template Engine）是一个将页面模板和数据结合起来生成 html 的工具。上例中，我们只是返回纯文本给浏览器，现在我们修改代码返回一个 html 页面给浏览器。</p><h3 id="8-1-ejs"><a href="#8-1-ejs" class="headerlink" title="8.1 ejs"></a>8.1 ejs</h3><p>模板引擎有很多，<a href="https://www.npmjs.com/package/ejs" rel="external nofollow noopener noreferrer" target="_blank">ejs</a> 是其中一种，因为它使用起来十分简单，而且与 express 集成良好，所以我们使用 ejs。安装 ejs：</p><pre class=" language-sh"><code class="language-sh">npm i ejs --save</code></pre><p>修改 index.js 如下：</p><p><strong>index.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置存放模板文件的目录</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置模板引擎为 ejs</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> userRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is starting at port:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 <code>app.set</code> 设置模板引擎为 ejs 和存放模板的目录。在 myblog 下新建 views 文件夹，在 views 下新建 users.ejs，添加如下代码：</p><p><strong>views/users.ejs</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">body </span><span class="token punctuation">{</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">14</span>px <span class="token string">"Lucida Grande"</span>, Helvetica, Arial, sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&lt;%= name.toUpperCase() %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hello, &lt;%= name %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>修改 routes/users.js 如下：</p><p><strong>routes/users.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:name'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>通过调用 <code>res.render</code> 函数渲染 ejs 模板，res.render 第一个参数是模板的名字，这里是 users 则会匹配 views/users.ejs，第二个参数是传给模板的数据，这里传入 name，则在 ejs 模板中可使用 name。<code>res.render</code> 的作用就是将模板和数据结合生成 html，同时设置响应头中的 <code>Content-Type: text/html</code>，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示。现在我们访问 <code>localhost:3000/users/haha</code>，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/WX20180813-202558@2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上面代码可以看到，我们在模板 <code>&lt;%= name.toUpperCase() %&gt;</code> 中使用了 JavaScript 的语法 <code>.toUpperCase()</code> 将名字转化为大写，那这个 <code>&lt;%= xxx %&gt;</code> 是什么东西呢？ejs 有 3 种常用标签：</p><ol><li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li><li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML 内容</li><li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li></ol><blockquote><p>注意：<code>&lt;%= code %&gt;</code> 和 <code>&lt;%- code %&gt;</code> 都可以是 JavaScript 表达式生成的字符串，当变量 code 为普通字符串时，两者没有区别。当 code 比如为 <code>&lt;h1&gt;hello&lt;/h1&gt;</code> 这种字符串时，<code>&lt;%= code %&gt;</code> 会原样输出 <code>&lt;h1&gt;hello&lt;/h1&gt;</code>，而 <code>&lt;%- code %&gt;</code> 则会显示 H1 大的 hello 字符串。</p></blockquote><p>下面的例子解释了 <code>&lt;% code %&gt;</code> 的用法：</p><p><strong>Data</strong></p><pre class=" language-js"><code class="language-js">supplies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mop'</span><span class="token punctuation">,</span> <span class="token string">'broom'</span><span class="token punctuation">,</span> <span class="token string">'duster'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>Template</strong></p><pre class=" language-ejs"><code class="language-ejs"><ul><% for(var i=0; i<supplies.length; i++) {%>   <li><%= supplies[i] %></li><% } %></ul></code></pre><p><strong>Result</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>mop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>broom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>duster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>更多 ejs 的标签请看 <a href="https://www.npmjs.com/package/ejs#tags" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。</p><h3 id="8-2-includes"><a href="#8-2-includes" class="headerlink" title="8.2 includes"></a>8.2 includes</h3><p>我们使用模板引擎通常不是一个页面对应一个模板，这样就失去了模板的优势，而是把模板拆成可复用的模板片段组合使用，如在 views 下新建 header.ejs 和 footer.ejs，并修改 users.ejs：</p><p><strong>views/header.ejs</strong></p><pre class=" language-ejs"><code class="language-ejs"><!DOCTYPE html><html>  <head>    <style type="text/css">      body {padding: 50px;font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;}    </style>  </head>  <body></code></pre><p><strong>views/footer.ejs</strong></p><pre class=" language-ejs"><code class="language-ejs">  </body></html></code></pre><p><strong>views/users.ejs</strong></p><pre class=" language-ejs"><code class="language-ejs"><%- include('header') %>  <h1><%= name.toUpperCase() %></h1>  <p>hello, <%= name %></p><%- include('footer') %></code></pre><p>我们将原来的 users.ejs 拆成出了 header.ejs 和 footer.ejs，并在 users.ejs 通过 ejs 内置的 include 方法引入，从而实现了跟以前一个模板文件相同的功能。</p><p><strong>拆分模板组件通常有两个好处：</strong></p><ol><li>模板可复用，减少重复代码</li><li>主模板结构清晰</li></ol><blockquote><p>注意：要用 <code>&lt;%- include(&#39;header&#39;) %&gt;</code> 而不是 <code>&lt;%= include(&#39;header&#39;) %&gt;</code></p></blockquote><h2 id="9-Express-浅析"><a href="#9-Express-浅析" class="headerlink" title="9. Express 浅析"></a>9. Express 浅析</h2><p>express 的精髓在于中间件机制。</p><h3 id="9-1-中间件与-next"><a href="#9-1-中间件与-next" class="headerlink" title="9.1 中间件与 next"></a>9.1 中间件与 next</h3><p>express 中的中间件（middleware）就是用来处理请求的，当一个中间件处理完，可以通过调用 <code>next()</code> 传递给下一个中间件，如果没有调用 <code>next()</code>，则请求不会往下传递，如内置的 <code>res.render</code> 其实就是渲染完 html 直接返回给客户端，没有调用 <code>next()</code>，从而没有传递给下一个中间件。看个小例子，修改 index.js 如下：</p><p><strong>index.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is starting at port:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时访问 <code>localhost:3000</code>，终端会输出：</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>通过 <code>app.use</code> 加载中间件，在中间件中通过 next 将请求传递到下一个中间件，next 可接受一个参数接收错误信息，如果使用了 <code>next(error)</code>，则会返回错误而不会传递到下一个中间件，修改 index.js 如下：</p><p><strong>index.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is starting at port:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时访问 <code>localhost:3000</code>，终端会输出错误信息。</p><blockquote><p>小提示：<code>app.use</code> 有非常灵活的使用方式，详情见 <a href="http://expressjs.com/en/4x/api.html#app.use" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。</p></blockquote><p>express 有成百上千的第三方中间件，在开发过程中我们首先应该去 npm 上寻找是否有类似实现的中间件，尽量避免造轮子，节省开发时间。下面给出几个常用的搜索 npm 模块的网站：</p><ol><li><a href="http://npmjs.com" rel="external nofollow noopener noreferrer" target="_blank">http://npmjs.com</a>(npm 官网)</li><li><a href="http://node-modules.com" rel="external nofollow noopener noreferrer" target="_blank">http://node-modules.com</a></li><li><a href="https://npms.io" rel="external nofollow noopener noreferrer" target="_blank">https://npms.io</a></li><li><a href="https://nodejsmodules.org" rel="external nofollow noopener noreferrer" target="_blank">https://nodejsmodules.org</a></li></ol><blockquote><p>express@4 之前的版本基于 connect 这个模块实现的中间件的架构，express@4 及以上的版本则移除了对 connect 的依赖自己实现了，理论上基于 connect 的中间件（通常以 <code>connect-</code> 开头，如 <code>connect-mongo</code>）仍可结合 express 使用。</p><p>注意：中间件的加载顺序很重要！比如：通常把日志中间件放到比较靠前的位置，后面将会介绍的 <code>connect-flash</code> 中间件是基于 session 的，所以需要在 <code>express-session</code> 后加载。</p></blockquote><h3 id="9-2-错误处理"><a href="#9-2-错误处理" class="headerlink" title="9.2 错误处理"></a>9.2 错误处理</h3><p>上面的例子中，应用程序为我们自动返回了错误栈信息（express 内置了一个默认的错误处理器），假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件，修改 index.js 如下：</p><p><strong>index.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误处理</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Something broke!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is starting at port:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时访问 <code>localhost:3000</code>，浏览器会显示 <code>Something broke!</code>。</p><blockquote><p>关于 express 的错误处理，详情见 <a href="http://expressjs.com/en/guide/error-handling.html" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Nodejs 搭建 web 站点的一些记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-exports-和-module-exports&quot;&gt;&lt;a href=&quot;#1-exports-和-module-exports&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="Express" scheme="http://coder.liusixin.cn/tags/Express/"/>
    
      <category term="Nodejs" scheme="http://coder.liusixin.cn/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>浅谈前端数据推送</title>
    <link href="http://coder.liusixin.cn/posts/b0b31bc4/"/>
    <id>http://coder.liusixin.cn/posts/b0b31bc4/</id>
    <published>2017-06-06T06:13:47.000Z</published>
    <updated>2017-06-06T06:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>comet</li><li>websocket</li><li>sse</li></ul><h2 id="1-comet"><a href="#1-comet" class="headerlink" title="1. comet"></a>1. comet</h2><p>之前参与项目里，见到过有人用 ajax 长轮询来做实时数据推送。但是这样做有一个弊端就是会建立很多 TCP 连接，这样会给系统带来比较大的 IO 负担。</p><p>有没有一种方式，我们只进行一次 TCP 连接，在这一次 TCP 连接中，服务器不断给客户端吐数据。下面我们就来介绍一下 comet 推送方式：</p><p><strong>我们用 php 来做服务端</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:appliacation/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control:max-age=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让前端接收没有缓冲，因为我们要实时获取数据</span>    <span class="token comment" spellcheck="true">// 我们用一种方式，让它连上之后不释放</span>    <span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token variable">$radom</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$radom</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token function">ob_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把当前资源释放掉</span>        <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿到释放掉的资源，吐浏览器</span>        <span class="token comment" spellcheck="true">// 一直让它输出，而且是一个流式输出</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><strong>js 怎样捕捉一直在发送阶段</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> getXmlHttpRequest <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">getXmlHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检测readyState为3的时候，我们就能把responseText输出出来</span>        <span class="token comment" spellcheck="true">// 而且每次一都能把上次全部内容都打印出来</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"data.php"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>js 用普通 ajax 去请求</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">'data.php'</span><span class="token punctuation">,</span>            dataType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">conn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>服务端我们不去断掉连接</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:appliacation/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control:max-age=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'ok'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'我是测试文本'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>或者我们用下面这种方式，用一个 while 循环，我们可以通过前端给来的参数去判断执行过少次。</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:appliacation/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control:max-age=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'ok'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'我是测试文本'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 切记要退出，不然前端拿不到数据</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><strong>因为只要不断掉，我们再去请求还是连接的上一次请求，只不过这是用前端实现了轮询效果，刚才我们用后端 flush()来实现的这件事</strong></p><h2 id="2-websocket"><a href="#2-websocket" class="headerlink" title="2. websocket"></a>2. websocket</h2><p>websocket 它是一种长连接，通过 websocket 我们能实现后端向前端推送数据，前端也可以向后端推送数据。这里我们主要讲前端 H5 websocket 怎样和 nodejs 配合。</p><blockquote><p>为什么要用到 socket.io 呢？</p></blockquote><p>因为它承载了 socket 大部分功能，而且相对稳定</p><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><ul><li>第一步我们建一个 express 项目</li></ul><pre class=" language-shell"><code class="language-shell">$ npm install express --save$ npm install -g express-generatorexpress</code></pre><ul><li>第二步我们要在项目文件里安装 socket.io</li></ul><pre class=" language-shell"><code class="language-shell">$ npm install socket.io --save</code></pre><ul><li>第三步我们在 node_module 里面找到 socket.io.js 这个文件，这是给前端用的<ul><li>文件在 node_modules/socket.io-client/dist/socket.io.js</li></ul></li></ul><p><strong>接下来我们在 app.js 中引入 socket.io</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> io <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'socket.io'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// view engine setup</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'jade'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>  socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通知客户端已连接</span>  <span class="token comment" spellcheck="true">// 对message事件的监听</span>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is msg:'</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'server ready'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 监听退出事件</span>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">sendfile</span><span class="token punctuation">(</span><span class="token string">'views/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"socket server listen"</span> <span class="token operator">+</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'port'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>在 views 文件夹里建 index.html</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  hello  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascripts/socket.io.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascripts/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>在静态文件 javascripts 文件夹下建 main.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 建立websocket连接</span>  <span class="token keyword">var</span> socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 收到server的连接确认</span>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'已连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h3><ul><li>在 app.js 文件中用 socket.io 监听 server 端口</li><li>在 main.js 文件中建立 websocket 连接</li><li>app.js 会在 connect 事件中监听到连接，并触发 open（自己定义的）事件</li><li>此时前端监听到 open 事件</li><li>同时前端也可以用 socket 连接用 send 方法向后端推送消息</li><li>后端会在 message 事件中监听到前端推送过来的消息</li></ul><blockquote><p>参考资料：<a href="https://link.jianshu.com/?t=https://socket.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">socket.io 官网 api</a></p></blockquote><h2 id="3-sse"><a href="#3-sse" class="headerlink" title="3. sse"></a>3. sse</h2><blockquote><p><a href="https://link.jianshu.com/?t=https://www.w3.org/TR/eventsource/" rel="external nofollow noopener noreferrer" target="_blank">Server-Sent Events(简称 SSE)</a></p></blockquote><p>SSE 是一种能让浏览器通过 http 连接自动收到服务器端更新的技术，SSE EventSource 接口被 W3C 制定为 HTML5 的一部分。</p><blockquote><p>它是能完成服务器端向客户端单向推送消息，但是 IE 不支持</p></blockquote><h3 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h3><ul><li>php 代码</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">// 以event-steam的方式输出</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type:text/event-stream;charset='utf-8'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指定哪个域来访问</span>    <span class="token function">header</span><span class="token punctuation">(</span>"Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/");</span>    <span class="token keyword">echo</span> <span class="token string">"data:现在北京时间是"</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\r\n\r\n"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><ul><li>html 代码</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> source<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span>argument<span class="token punctuation">)</span> <span class="token punctuation">{</span>  source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">'http://localhost/sse/data.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 建立连接</span>  source<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接已建立'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readyState<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后端实时推送的数据</span>  source<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'从服务器实时获取的数据'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 出错的监听</span>  source<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里主要是 new 一个 EventSource 实例，然后监听 onopen 事件，这个事件是监听连接已建立，然后通过 onmessage 事件来监听后端推送过来的消息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;comet&lt;/li&gt;
&lt;li&gt;websocket&lt;/li&gt;
&lt;li&gt;sse&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-comet
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="数据推送" scheme="http://coder.liusixin.cn/tags/%E6%95%B0%E6%8D%AE%E6%8E%A8%E9%80%81/"/>
    
      <category term="HTML5" scheme="http://coder.liusixin.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>前端调试技巧--Audits 和 Chrome 性能插件</title>
    <link href="http://coder.liusixin.cn/posts/c588c1ac/"/>
    <id>http://coder.liusixin.cn/posts/c588c1ac/</id>
    <published>2017-05-27T15:45:46.000Z</published>
    <updated>2017-05-27T15:45:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Audits-和-Chrome-性能插件"><a href="#Audits-和-Chrome-性能插件" class="headerlink" title="Audits 和 Chrome 性能插件"></a>Audits 和 Chrome 性能插件</h2><h3 id="Audits"><a href="#Audits" class="headerlink" title="Audits"></a>Audits</h3><blockquote><p>Audits 其实就是分析当前网页的性能的，比如说雅虎军规，这个东西能够大致给我们分析出来一些我们做的不好的地方而且能给我们一些解决意见</p></blockquote><blockquote><p>雅虎军规参考网址：<a href="https://github.com/creeperyang/blog/issues/1" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/creeperyang/blog/issues/1</a></p></blockquote><ul><li><strong>Audits 面板</strong></li><li><strong>performanceTracer – Chrome 插件</strong></li><li><strong>Page Speed – Chrome 插件</strong></li><li><p><strong>performance.timming</strong></p><ul><li>这是代码形式的一个 API ，是谷歌提供给我们的在浏览器里面我们可以通过网页去检测的。</li><li>上面这个插件光学是没什么用的，得需要先了解浏览器的整个的执行机制，下图就是 整个的一个网页从我们用户输入到输出的时候这之间经过的很多的过程，上面的 performance.timing 很好的捕捉到了这样的一个节点，这个节点里面我们主要观察的是 DNS 这一阶段，就是查找 DNS 之间，然后是 握手的时间，请求的时间，输出的时间，还有就是 onload 的时间，那么中间隔着的 DNS TCP Request Response 这几个时间是需要我们非常非常关注的，如果我们是专注于性能开发的，这几个点做的非常漂亮，那么这样整个一个网页的性能是非常高的，所以做网页性能的时候这几个点一定要卡住。</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-a3c830aa628cac4f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>接着上一篇中的案例进行讲解，在右侧的开发者工具中找到 Audits 面板，之后就可以让他来帮我们分析一下，接下来点击下面的 【RUN】 按钮</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-bca430cd39283577.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-fb716eff921cdf7c.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果说想要漂亮一点的就可以下载一个 performanceTracer 这样的一个东西，它可以将 我们上面说到的 timing 的 API 也就是上面的 【浏览器的整个的执行机制图】 里面的东西。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-4115843e7bef9f41.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>但是如果作为一个专业的性能开发人员来讲的话 performanceTracer 是远远不够我们进行网页加载时的性能监测用的，所以一般会装一个东西叫做 Page Speed，它可以是浏览器加载的更快（Make the web faster）</p><p>下载完后点击面板下面显示的 【START ANALYZING】（开始分析） 按钮，它就会自动的去分析你当前的网页，下图是分析之后自动的将结果给呈现了出来</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-13bcdb6ff7e68050.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>它连怎么优化都帮你做到或者是提示了。</p><p>如果是上面的插件还不够用的话，这个时候就需要借助一个东西 performance.timing 这个是浏览器自带的 API 可以在控制台中直接输出，可以看到所有的值都在下面列出来了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-397483947afb64e5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Audits-和-Chrome-性能插件&quot;&gt;&lt;a href=&quot;#Audits-和-Chrome-性能插件&quot; class=&quot;headerlink&quot; title=&quot;Audits 和 Chrome 性能插件&quot;&gt;&lt;/a&gt;Audits 和 Chrome 性能插件&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="调试" scheme="http://coder.liusixin.cn/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端调试技巧--断点以及捕捉事件绑定</title>
    <link href="http://coder.liusixin.cn/posts/eff2d234/"/>
    <id>http://coder.liusixin.cn/posts/eff2d234/</id>
    <published>2017-05-27T14:36:46.000Z</published>
    <updated>2017-05-27T14:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>断点以及捕捉事件绑定</li><li>Audits 和 Chrome 性能插件</li><li>Timeline 掌握帧渲染模式<ul><li>可以看到整个的 webkit 在渲染整个层或者是每一帧的时候是如何使我们的网页达到 60FPS 这样高性能渲染模式的</li></ul></li><li>Profiles 分析具体问题<ul><li>包括 NodeJS 的性能泄露等等，NodeJS 的性能问题有内存泄露这样的问题，都可以通过 Profiles 这个来解决掉</li></ul></li></ul><h2 id="1-断点以及捕捉事件绑定"><a href="#1-断点以及捕捉事件绑定" class="headerlink" title="1. 断点以及捕捉事件绑定"></a>1. 断点以及捕捉事件绑定</h2><p>这里用一个 demo 文件来演示上面的所有东西，新建一个 index.html 并编辑如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Chrome 高级调试技巧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/4.0.0-beta.2/css/bootstrap.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.2.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body</span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#test-div</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#333</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> default<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInput<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-test<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一段文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn-test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#exampleInput'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// $('#test-div').hide();</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里把文件放入 xampp 中并开启服务，在谷歌浏览器中输入 localhost/debugtest/ 打开页面，在 input 中输入内容并点击 【测试成功】按钮，显示如下证明一切正常<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-e3cc544f8e8bfd21.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>在开发者工具中，找到 Sources（资源） -&gt; 在找到 localhost -&gt; debugtest -&gt; index.html，在右侧的文本文件中用鼠标在 33 行的前面点击一下这个就是打上断点了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-619e88bddc10c1c3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>之后再点击左侧的【测试成功】按钮，代码在运行到上面的 33 行处就会暂停了，点击下面被红色圆圈圈中的就可以一步一步的向下调试，它的右侧是一步一步的向上调试，它的左侧的是可以跳出当前的 function 可以进入到下一个 function 里面进行调试</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-81a13538234f1506.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击上图中的向下调试按钮，它会进入到 alert 里面的 <code>$(&#39;#exampleInput&#39;).val()</code> 进入到 jquery 中去找这个里面的值这样的执行函数中去了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-db3786803b478b99.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击到了最后，没有执行的函数之后，结果就弹出来了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-72f07ab7fc0e21d9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果说不想调试的这么多，在页面刚开始运行到断点的时候，直接点第二个按钮就跳出整个函数了</p><h3 id="寻找事件监听"><a href="#寻找事件监听" class="headerlink" title="寻找事件监听"></a>寻找事件监听</h3><p>接下来是找到当前元素所绑定的事件</p><p>在我在【测试成功】按钮上使用鼠标右键选中【检查】选项的时候，可以在右侧找到 【Event Listeners】选项，在下面可以看到，在元素上绑定了一个 click 事件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-33db3e5f1abf61ee.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>后面的地址点击之后就可以直接跳转到事件绑定的源代码了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-8d55ea979a4cc730-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="DOM-元素断点"><a href="#DOM-元素断点" class="headerlink" title="DOM 元素断点"></a>DOM 元素断点</h3><p>接着将 index.html 中的 34 行 解注释<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-57c31869775278c3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>现在再在浏览器中先将之前的断点去掉，方法跟打断点是一样的，之后刷新浏览器，整个的执行时这样的</p><blockquote><p>先输入内容 -&gt; 点击【测试成功】按钮 之后会发现 下面的 test-div 元素就隐藏了，这是一个相当简单的 jquery 实现的效果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-daaa9bf845c08ba7.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p></blockquote><p>下面我们想要的是当 test-div 元素被改变时可以被监控到给出提示，这里我们在下图选的元素位置 鼠标右键 选择 -&gt; Break on -&gt; 再选择 Node removal ，选中之后它会在这个 dom 元素的前面打一个小蓝点<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-8804d71196b6ee77.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>这个时候再刷新浏览器，执行一遍之前的流程操作，会发现 test-div 元素也隐藏了，效果上来说和之前的没什么变化</p><p>如果将 <code>$(&#39;#test-div&#39;).hide()</code> 改成 <code>$(&#39;#test-div&#39;).remove()</code></p><p>之后再次刷新页面进行操作的时候可以看到他是直接定位到了 jquery 中给元素执行 remove 时 function 的节点范围<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-afecccb33749198e.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>上面的是 Node removal DOM 元素被删除时会查看，还可以选择 Subtree modifications DOM 元素被修改时或者 Attributes modifications DOM 元素属性的变化<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-cfc97c6ff17a554e.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;断点以及捕捉事件绑定&lt;/li&gt;
&lt;li&gt;Audits 和 Chrome 性能插件&lt;/li&gt;
&lt;li&gt;Timeline 掌握帧渲染
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://coder.liusixin.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="调试" scheme="http://coder.liusixin.cn/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>css 居中方式总结</title>
    <link href="http://coder.liusixin.cn/posts/92c6d8de/"/>
    <id>http://coder.liusixin.cn/posts/92c6d8de/</id>
    <published>2017-05-22T05:30:33.000Z</published>
    <updated>2017-05-22T05:30:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1 水平居中"></a>1 水平居中</h2><p><strong>内联元素水平居中</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.center-inline</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>块级元素水平居中</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.center-block</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>多块级元素水平居中</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.inline-block</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>弹性盒子模型 flex</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.flex-center</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>justify-content 用于设置弹性盒子元素在主轴（横轴）方向上的对齐方式</p></blockquote><h2 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2 垂直居中"></a>2 垂直居中</h2><h3 id="2-1-单行内联-inline-元素垂直居中"><a href="#2-1-单行内联-inline-元素垂直居中" class="headerlink" title="2.1 单行内联(inline)元素垂直居中"></a>2.1 单行内联(inline)元素垂直居中</h3><pre class=" language-css"><code class="language-css"><span class="token selector">span </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-多行元素垂直居中"><a href="#2-2-多行元素垂直居中" class="headerlink" title="2.2 多行元素垂直居中"></a>2.2 多行元素垂直居中</h3><p><strong>表格布局（table）</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.center-table</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tabel-cell</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>flex 布局（flex）</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.center-flex</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>flex-direction: column 定义主轴方向为纵向。</p></blockquote><p><strong>“精灵元素”</strong></p><blockquote><p>即在父容器内放一个 100%高度的伪元素，让文本和伪元素垂直对齐，从而达到垂直居中的目的。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.ghost-center</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ghost-center</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1%</span><span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ghost-center</span> p </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-块级元素垂直居中"><a href="#2-3-块级元素垂直居中" class="headerlink" title="2.3 块级元素垂直居中"></a>2.3 块级元素垂直居中</h3><p><strong>固定高度的块级元素</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>未知高度的块级元素</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3 水平垂直居中"></a>3 水平垂直居中</h2><p><strong>固定宽高元素水平垂直居中</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> -<span class="token number">70</span>px <span class="token number">0</span> <span class="token number">0</span> -<span class="token number">170</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>未知宽高元素水平垂直居中</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>flex 布局</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而 align-items 属性定义 flex 子项在 flex 容器的当前行的侧轴（纵轴）方向上的对齐方式。</p></blockquote><p><strong>grid 布局</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-水平居中&quot;&gt;&lt;a href=&quot;#1-水平居中&quot; class=&quot;headerlink&quot; title=&quot;1 水平居中&quot;&gt;&lt;/a&gt;1 水平居中&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;内联元素水平居中&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot; language-cs
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
      <category term="项目实践" scheme="http://coder.liusixin.cn/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>微信内置浏览器清除缓存</title>
    <link href="http://coder.liusixin.cn/posts/36ac550f/"/>
    <id>http://coder.liusixin.cn/posts/36ac550f/</id>
    <published>2017-05-20T05:21:04.000Z</published>
    <updated>2017-05-20T05:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>本方法适用于现在版本的 微信。</p><p>在微信浏览器中打开该链接： <a href="debugx5.qq.com">debugx5.qq.com</a> ， 打开后显示如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-ffb5e387a5133d10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>将页面滑动至最底部，勾选左侧的选项 这里我把所有选型都勾选了，你们也可以自行选择，再点击右侧的【清除】按钮，弹出成功弹窗便可以了，如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-4f4d3b8d67a9d39e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdn-blog.liusixin.cn/9064013-90c61a84ca56b52b.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本方法适用于现在版本的 微信。&lt;/p&gt;
&lt;p&gt;在微信浏览器中打开该链接： &lt;a href=&quot;debugx5.qq.com&quot;&gt;debugx5.qq.com&lt;/a&gt; ， 打开后显示如下&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
            
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="项目实践" scheme="http://coder.liusixin.cn/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="技术杂谈" scheme="http://coder.liusixin.cn/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
      <category term="微信" scheme="http://coder.liusixin.cn/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习总结——正则篇</title>
    <link href="http://coder.liusixin.cn/posts/d3746340/"/>
    <id>http://coder.liusixin.cn/posts/d3746340/</id>
    <published>2017-05-10T12:23:36.000Z</published>
    <updated>2017-05-10T12:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符:"></a>修饰符:</h2><ul><li>i: 执行对大小写不敏感的匹配。</li><li>g: 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</li><li>m: 执行多行匹配。</li></ul><h2 id="元字符："><a href="#元字符：" class="headerlink" title="元字符："></a>元字符：</h2><pre class=" language-js"><code class="language-js">    \d<span class="token punctuation">:</span> 匹配一个数字字符。等价于 <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>。    \D<span class="token punctuation">:</span> 匹配一个非数字字符。等价于 <span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>。    \f<span class="token punctuation">:</span> 匹配一个换页符。等价于 \x0c 和 \cL。    \n<span class="token punctuation">:</span> 匹配一个换行符。等价于 \x0a 和 \cJ。    \r<span class="token punctuation">:</span> 匹配一个回车符。等价于 \x0d 和 \cM。    \s<span class="token punctuation">:</span> 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <span class="token punctuation">[</span> \f\n\r\t\v<span class="token punctuation">]</span>。    \S<span class="token punctuation">:</span> 匹配任何非空白字符。等价于 <span class="token punctuation">[</span><span class="token operator">^</span> \f\n\r\t\v<span class="token punctuation">]</span>。    \t<span class="token punctuation">:</span> 匹配一个制表符。等价于 \x09 和 \cI。    \v<span class="token punctuation">:</span> 匹配一个垂直制表符。等价于 \x0b 和 \cK。    \w<span class="token punctuation">:</span> 匹配字母、数字、下划线。等价于<span class="token string">'[A-Za-z0-9_]'</span>。    \W<span class="token punctuation">:</span> 匹配非字母、数字、下划线。等价于 <span class="token string">'[^A-Za-z0-9_]'</span>。    \xn<span class="token punctuation">:</span> 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。 <span class="token comment" spellcheck="true">// 例: '\x41' 匹配 "A"。'\x041' 则等价于 '\x04' &amp; "1"。正则表达式中可以使用 ASCII 编码。</span>    \num<span class="token punctuation">:</span> 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。 <span class="token comment" spellcheck="true">// 例: '(.)\1' 匹配两个连续的相同字符。</span>    \n<span class="token punctuation">:</span> 标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span>，则 n 为一个八进制转义值。    \nm<span class="token punctuation">:</span> 标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span>，则 \nm 将匹配八进制转义值 nm    \nml<span class="token punctuation">:</span> 如果 n 为八进制数字 <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>，且 m 和 l 均为八进制数字 <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span>，则匹配八进制转义值 nml    \un<span class="token punctuation">:</span> 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。 <span class="token comment" spellcheck="true">// 例: \u00A9 匹配版权符号 (?)。</span>    \<span class="token punctuation">:</span> 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。 <span class="token comment" spellcheck="true">// 例:'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。</span>    <span class="token operator">^</span><span class="token punctuation">:</span> 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，<span class="token operator">^</span> 也匹配 <span class="token string">'\n'</span> 或 <span class="token string">'\r'</span> 之后的位置。 <span class="token comment" spellcheck="true">// 例： (^a) 就是匹配以字母a开头的字符串</span>    <span class="token operator">^</span><span class="token punctuation">:</span> 还有另个一个作用就是取反，比如<span class="token punctuation">[</span><span class="token operator">^</span>xyz<span class="token punctuation">]</span> 表示匹配的字符串不包含xyz <span class="token comment" spellcheck="true">// 例：[^xyz] 表示匹配的字符串不包含xyz</span>    $<span class="token punctuation">:</span> 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 <span class="token string">'\n'</span> 或 <span class="token string">'\r'</span> 之前的位置。 <span class="token comment" spellcheck="true">// 例： (b$) 就是匹配以字母b结尾的字符串</span>    <span class="token operator">*</span><span class="token punctuation">:</span> 匹配前面的子表达式零次或多次。 <span class="token comment" spellcheck="true">// 例: zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。</span>    <span class="token operator">+</span><span class="token punctuation">:</span> 匹配前面的子表达式一次或多次。 <span class="token comment" spellcheck="true">// 例: 'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。</span>    <span class="token operator">?</span><span class="token punctuation">:</span> 匹配前面的子表达式零次或一次。 <span class="token comment" spellcheck="true">// 例: "do(es)?" 可以匹配 "do" 或 "does" 。? 等价于 {0,1}。</span>    <span class="token operator">?</span><span class="token punctuation">:</span> 当该字符紧跟在任何一个其他限制符 <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span><span class="token punctuation">)</span> 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。 <span class="token comment" spellcheck="true">// 例: 对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。</span>    <span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">:</span> n 是一个非负整数。匹配确定的 n 次。 <span class="token comment" spellcheck="true">// 例: 'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o</span>    <span class="token punctuation">{</span>n<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">:</span> n 是一个非负整数。至少匹配n 次。 <span class="token comment" spellcheck="true">// 例: 'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</span>    <span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span><span class="token punctuation">:</span> m 和 n 均为非负整数，其中n <span class="token operator">&lt;=</span> m。最少匹配 n 次且最多匹配 m 次。 <span class="token comment" spellcheck="true">// 例: "o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</span>    <span class="token punctuation">.</span><span class="token punctuation">:</span> 匹配除 <span class="token string">"\n"</span> 之外的任何单个字符。要匹配包括 <span class="token string">'\n'</span> 在内的任何字符，请使用像<span class="token string">"(.|\n)"</span>的模式。    <span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">:</span> 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $<span class="token number">0</span>…$<span class="token number">9</span> 属性。要匹配圆括号字符，请使用 <span class="token string">'\('</span> 或 <span class="token string">'\)'</span> <span class="token comment" spellcheck="true">// 例："(x)" 将匹配到 "x" 并将按顺序从 $1-$99 排序代替</span>  <span class="token comment" spellcheck="true">//例：</span>  <span class="token comment" spellcheck="true">// var url = "http://www.qidian.com/BookReader/1017141,20361055.aspx"</span>  <span class="token comment" spellcheck="true">// var reg = /(http:\/\/www\.qidian\.com\/BookReader\/)(\d+),(\d+).aspx/gmi</span>  <span class="token comment" spellcheck="true">// var rep=url.replace(reg,"$1ShowBook.aspx?bookId=$2&amp;chapterId=$3");</span>  <span class="token comment" spellcheck="true">// console.log(rep);</span>  <span class="token comment" spellcheck="true">// -> http://www.qidian.com/BookReader/ShowBook.aspx?bookId=1017141&amp;chapterId=20361055</span>    <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span>pattern<span class="token punctuation">)</span>：匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 <span class="token string">"或"</span> 字符 <span class="token punctuation">(</span><span class="token operator">|</span><span class="token punctuation">)</span> 来组合一个模式的各个部分是很有用。 <span class="token comment" spellcheck="true">// 例：'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。</span>    <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span>pattern<span class="token punctuation">)</span><span class="token punctuation">:</span> 正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 <span class="token comment" spellcheck="true">// 例: "Windows(?=95|98|NT|2000)"能匹配"Windows2000"中的"Windows"，但不能匹配"Windows3.1"中的"Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span>    <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>pattern<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token function">正向否定预查</span><span class="token punctuation">(</span>negative assert<span class="token punctuation">)</span>，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 <span class="token comment" spellcheck="true">// 例: "Windows(?!95|98|NT|2000)"能匹配"Windows3.1"中的"Windows"，但不能匹配"Windows2000"中的"Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</span>    <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>pattern<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token function">反向</span><span class="token punctuation">(</span>look behind<span class="token punctuation">)</span>肯定预查，与正向肯定预查类似，只是方向相反。 <span class="token comment" spellcheck="true">// 例: "(?&lt;=95|98|NT|2000)Windows"能匹配"2000Windows"中的"Windows"，但不能匹配"3.1Windows"中的"Windows"。</span>    <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">!</span>pattern<span class="token punctuation">)</span><span class="token punctuation">:</span> 反向否定预查，与正向否定预查类似，只是方向相反。 <span class="token comment" spellcheck="true">// 例: "(?&lt;!95|98|NT|2000)Windows"能匹配"3.1Windows"中的"Windows"，但不能匹配"2000Windows"中的"Windows"。</span>    x<span class="token operator">|</span>y<span class="token punctuation">:</span> 匹配 x 或 y。 <span class="token comment" spellcheck="true">// 例: 'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。</span>    <span class="token punctuation">[</span>xyz<span class="token punctuation">]</span><span class="token punctuation">:</span> 字符集合。匹配所包含的任意一个字符。 <span class="token comment" spellcheck="true">// 例: '[abc]' 可以匹配 "plain" 中的 'a'。</span>    <span class="token punctuation">[</span><span class="token operator">^</span>xyz<span class="token punctuation">]</span><span class="token punctuation">:</span> 负值字符集合。匹配未包含的任意字符。 <span class="token comment" spellcheck="true">// 例: '[^abc]' 可以匹配 "plain" 中的'p'、'l'、'i'、'n'。</span>    <span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">:</span> 字符范围。匹配指定范围内的任意字符。 <span class="token comment" spellcheck="true">// 例: '[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。</span>    <span class="token punctuation">[</span><span class="token operator">^</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">:</span> 负值字符范围。匹配任何不在指定范围内的任意字符。 <span class="token comment" spellcheck="true">// 例: '[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。</span>    \b<span class="token punctuation">:</span> 匹配一个单词边界，也就是指单词和空格间的位置。 <span class="token comment" spellcheck="true">// 例: 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。</span>    \B<span class="token punctuation">:</span> 匹配非单词边界。 <span class="token comment" spellcheck="true">// 例: 'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。</span>    \cx<span class="token punctuation">:</span> 匹配由 x 指明的控制字符。 <span class="token comment" spellcheck="true">// 例: \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</span></code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-compile-regexp-modifier"><a href="#1-compile-regexp-modifier" class="headerlink" title="1. compile(regexp,modifier)"></a>1. <code>compile(regexp,modifier)</code></h3><p>在脚本执行过程中编译正则表达式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*    regexp: 正则表达式    modifier: 规定匹配的类型。"g" 用于全局匹配，"i" 用于区分大小写，"gi" 用于全局区分大小写的匹配。*/</span><span class="token keyword">var</span> compileStr <span class="token operator">=</span> <span class="token string">'Every man in the world! Every woman on earth!'</span><span class="token punctuation">;</span><span class="token keyword">var</span> compilePatt <span class="token operator">=</span> <span class="token regex">/man/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> compilePatt1 <span class="token operator">=</span> <span class="token regex">/(wo)?man/g</span><span class="token punctuation">;</span>compilePatt1<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>compilePatt1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> compileStrEle1 <span class="token operator">=</span> compileStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>compilePatt<span class="token punctuation">,</span> <span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> compileStrEle2 <span class="token operator">=</span> compileStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>compilePatt1<span class="token punctuation">,</span> <span class="token string">'person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compileStrEle1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> Every person in the world! Every woperson on earth!</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compileStrEle2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> Every person in the world! Every person on earth!</span></code></pre><h3 id="2-exec-string"><a href="#2-exec-string" class="headerlink" title="2. exec(string)"></a>2. <code>exec(string)</code></h3><p>用于检索字符串中的正则表达式的匹配。如果字符串中有匹配的值返回该匹配值，否则返回 null。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> execStr <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token punctuation">;</span><span class="token keyword">var</span> execPatt <span class="token operator">=</span> <span class="token regex">/Hello/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> execStrEle <span class="token operator">=</span> execPatt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>execStr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>execStrEle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> Hello</span></code></pre><h3 id="3-test-string"><a href="#3-test-string" class="headerlink" title="3. test(string)"></a>3. <code>test(string)</code></h3><p>用于检测一个字符串是否匹配某个模式.如果字符串中有匹配的值返回 true ，否则返回 false</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> testStr <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token punctuation">;</span><span class="token keyword">var</span> testPatt <span class="token operator">=</span> <span class="token regex">/Hello/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> testPatt2 <span class="token operator">=</span> <span class="token regex">/Helloaaa/g</span><span class="token punctuation">;</span><span class="token keyword">var</span> testStrEle <span class="token operator">=</span> testPatt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> testStrEle2 <span class="token operator">=</span> testPatt2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testStrEle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testStrEle2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> false</span></code></pre><h3 id="4-match-regexp"><a href="#4-match-regexp" class="headerlink" title="4. match(regexp)"></a>4. <code>match(regexp)</code></h3><p>可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> matchStr <span class="token operator">=</span> <span class="token string">'The rain in SPAIN stays mainly in the plain'</span><span class="token punctuation">;</span><span class="token keyword">var</span> matchEle <span class="token operator">=</span> matchStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ain/gi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matchEle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> ["ain", "AIN", "ain", "ain"]</span></code></pre><h2 id="常见正则表达式汇总"><a href="#常见正则表达式汇总" class="headerlink" title="常见正则表达式汇总"></a>常见正则表达式汇总</h2><pre class=" language-js"><code class="language-js"><span class="token regex">/^[1-9]\d*$/</span>　 　<span class="token comment" spellcheck="true">//匹配正整数</span><span class="token operator">/</span><span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$<span class="token operator">/</span> 　 <span class="token comment" spellcheck="true">//匹配负整数</span><span class="token operator">/</span><span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$<span class="token operator">/</span>　 <span class="token comment" spellcheck="true">//匹配整数</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>$<span class="token operator">/</span>　 <span class="token comment" spellcheck="true">//匹配非负整数（正整数 + 0）</span><span class="token operator">/</span><span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>$<span class="token operator">/</span>　<span class="token comment" spellcheck="true">//匹配非正整数（负整数 + 0）</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$<span class="token operator">/</span>　　  <span class="token comment" spellcheck="true">//匹配正浮点数</span><span class="token operator">/</span><span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span>$<span class="token operator">/</span>　 <span class="token comment" spellcheck="true">//匹配负浮点数</span><span class="token operator">/</span><span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span>$<span class="token operator">/</span>　 <span class="token comment" spellcheck="true">//匹配浮点数</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span>$<span class="token operator">/</span>　　   <span class="token comment" spellcheck="true">//匹配非负浮点数（正浮点数 + 0）</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span>$<span class="token operator">/</span>　<span class="token comment" spellcheck="true">//匹配非正浮点数（负浮点数 + 0）</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>A<span class="token operator">-</span>Za<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>　　    <span class="token comment" spellcheck="true">// 由26个英文字母组成的字符串</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>A<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>　　       <span class="token comment" spellcheck="true">// 由26个英文字母的大写组成的字符串</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>　　       <span class="token comment" spellcheck="true">// 由26个英文字母的小写组成的字符串</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>A<span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token number">-9</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>　　 <span class="token comment" spellcheck="true">// 由数字和26个英文字母组成的字符串</span><span class="token operator">/</span><span class="token operator">^</span>\w<span class="token operator">+</span>$<span class="token operator">/</span>              <span class="token comment" spellcheck="true">// 由数字、26个英文字母或者下划线组成的字符串</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>\x00<span class="token operator">-</span>\xff<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>     <span class="token comment" spellcheck="true">// 匹配所有单字节长度的字符组成的字符串  </span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token operator">^</span>\x00<span class="token operator">-</span>\xff<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>    <span class="token comment" spellcheck="true">// 匹配所有双字节长度的字符组成的字符串</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>\x00<span class="token operator">-</span>\xff<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span>      <span class="token comment" spellcheck="true">// 字符串是否含有双字节字</span><span class="token operator">/</span>n<span class="token punctuation">[</span>s<span class="token operator">|</span> <span class="token punctuation">]</span><span class="token operator">*</span>r<span class="token operator">/</span>           <span class="token comment" spellcheck="true">// 匹配空行的正则</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">^</span>s<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>s<span class="token operator">*</span>$<span class="token punctuation">)</span><span class="token operator">/</span>        <span class="token comment" spellcheck="true">// 匹配首尾空格的正则</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span>9_<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span>$<span class="token operator">/</span> <span class="token comment" spellcheck="true">// 所有包含一个以上的字母、数字或下划线的字符串</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>\<span class="token string">"\']/            // 除了双引号("</span><span class="token punctuation">)</span><span class="token function">和单引号</span><span class="token punctuation">(</span>'<span class="token punctuation">)</span>之外的所有字符</code></pre><h2 id="检测函数"><a href="#检测函数" class="headerlink" title="检测函数"></a>检测函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkStr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'phone'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//手机号码</span>      <span class="token keyword">return</span> <span class="token regex">/^1[3|4|5|7|8][0-9]{9}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'tel'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//座机</span>      <span class="token keyword">return</span> <span class="token regex">/^(0\d{2,3}-\d{7,8})(-\d{1,4})?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'card'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//身份证</span>      <span class="token keyword">return</span> <span class="token regex">/^\d{15}|\d{18}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span>      <span class="token keyword">return</span> <span class="token regex">/^[a-zA-Z]\w{5,17}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'postal'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//邮政编码</span>      <span class="token keyword">return</span> <span class="token regex">/[1-9]\d{5}(?!\d)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'QQ'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//QQ号</span>      <span class="token keyword">return</span> <span class="token regex">/^[1-9][0-9]{4,9}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//邮箱</span>      <span class="token keyword">return</span> <span class="token regex">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'money'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//金额(小数点2位)</span>      <span class="token keyword">return</span> <span class="token regex">/^\d*(?:\.\d{0,2})?$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'URL'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//网址</span>      <span class="token keyword">return</span> <span class="token regex">/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>        str      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'IP'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//IP</span>      <span class="token keyword">return</span> <span class="token regex">/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>        str      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'date'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//日期时间</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token regex">/^(\d{4})\-(\d{2})\-(\d{2}) (\d{2})(?:\:\d{2}|:(\d{2}):(\d{2}))$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>          str        <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token regex">/^(\d{4})\-(\d{2})\-(\d{2})$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'number'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//数字</span>      <span class="token keyword">return</span> <span class="token regex">/^[0-9]$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'english'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//英文</span>      <span class="token keyword">return</span> <span class="token regex">/^[a-zA-Z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'chinese'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//中文</span>      <span class="token keyword">return</span> <span class="token regex">/^[\u4E00-\u9FA5]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'lower'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//小写</span>      <span class="token keyword">return</span> <span class="token regex">/^[a-z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'upper'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//大写</span>      <span class="token keyword">return</span> <span class="token regex">/^[A-Z]+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'HTML'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//HTML标记</span>      <span class="token keyword">return</span> <span class="token regex">/&lt;("[^"]*"|'[^']*'|[^'">])*>/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修饰符&quot;&gt;&lt;a href=&quot;#修饰符&quot; class=&quot;headerlink&quot; title=&quot;修饰符:&quot;&gt;&lt;/a&gt;修饰符:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;i: 执行对大小写不敏感的匹配。&lt;/li&gt;
&lt;li&gt;g: 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习总结——数组篇</title>
    <link href="http://coder.liusixin.cn/posts/da5041c4/"/>
    <id>http://coder.liusixin.cn/posts/da5041c4/</id>
    <published>2017-05-07T12:55:36.000Z</published>
    <updated>2017-05-07T12:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-toString"><a href="#1-toString" class="headerlink" title="1. toString()"></a>1. <code>toString()</code></h3><p>返回以数组中的每个值的字符串形式拼接而成的一个以逗号分割的字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 1,2,3,4,5,6</span></code></pre><h3 id="2-valueOf"><a href="#2-valueOf" class="headerlink" title="2. valueOf()"></a>2. <code>valueOf()</code></h3><p>返回数组对象的原始值。返回的还是数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 2, 3, 4, 5, 6]</span></code></pre><h3 id="3-join"><a href="#3-join" class="headerlink" title="3. join()"></a>3. <code>join()</code></h3><p>通过指定的分隔符进行分隔并返回一个字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> join:1-2-3-4-5-6</span></code></pre><h3 id="4-push"><a href="#4-push" class="headerlink" title="4. push()"></a>4. <code>push()</code></h3><p>向数组的末尾添加一个或更多元素，并返回新的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 2, 3, 4, 5, 6, 7]</span></code></pre><h3 id="5-pop"><a href="#5-pop" class="headerlink" title="5. pop()"></a>5. <code>pop()</code></h3><p>删除数组的最后一个元素并返回删除的元素, 如果数组为空就返回 undefined</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 6,  [1, 2, 3, 4, 5]</span></code></pre><h3 id="6-shift"><a href="#6-shift" class="headerlink" title="6. shift()"></a>6. <code>shift()</code></h3><p>删除并返回数组的第一个元素, 如果数组为空，则 shift() 方法不进行任何操作，返回 undefined</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 1,  [2, 3, 4, 5, 6]</span></code></pre><h3 id="7-unshift"><a href="#7-unshift" class="headerlink" title="7. unshift()"></a>7. <code>unshift()</code></h3><p>向数组的开头添加一个或更多元素，并返回新的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [0, 1, 2, 3, 4, 5, 6]</span></code></pre><h3 id="8-reverse"><a href="#8-reverse" class="headerlink" title="8.reverse()"></a>8.<code>reverse()</code></h3><p>反转数组的元素顺序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [6, 5, 4, 3, 2, 1]</span></code></pre><h3 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort()"></a>9. <code>sort()</code></h3><p>对数组的元素进行排序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// a:</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 2, 3, 5, 6, 7]</span><span class="token comment" spellcheck="true">// b:  因为sort排序是从左至右比较，只要其中一个比较出了结果，就直接返</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 17, 19, 3, 5, 6]</span><span class="token comment" spellcheck="true">// c: 封装sort</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  type <span class="token operator">=</span> type <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 从小到大</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 从大到小</span>        <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 随机排序</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 3, 5, 6, 17, 19]</span></code></pre><h3 id="10-concat"><a href="#10-concat" class="headerlink" title="10. concat()"></a>10. <code>concat()</code></h3><p>连接两个或更多的数组，并返回结果</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// -> [1, 2, 3, 4, 5, 6]</span></code></pre><h3 id="11-slice-start-end"><a href="#11-slice-start-end" class="headerlink" title="11. slice(start, end)"></a>11. <code>slice(start, end)</code></h3><p>选取数组的的一部分，并返回一个新数组, start 必须，end 可选</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 截取第二个到倒数第二个</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [2, 3, 4, 5]</span></code></pre><h3 id="12-splice-index-howmany-item1-itemX"><a href="#12-splice-index-howmany-item1-itemX" class="headerlink" title="12. splice(index, howmany, item1,.....,itemX)"></a>12. <code>splice(index, howmany, item1,.....,itemX)</code></h3><p>从数组中添加或删除元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *  index:  必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字  *  howmany: 必需。规定应该删除多少元素。必须是数字，但可以是 "0"。 如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。  *  item1,.....,itemX: 可选。要添加到数组的新元素  */</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从下标为2的地方开始删除 后面的两个元素，并在这个地方插入10,12两个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 2, 10, 12, 5, 6]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当需要删除的元素为0，相当于在这个位置插入元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 2, 10, 12, 3, 4, 5, 6]</span></code></pre><h3 id="13-copyWithin-target-start-end"><a href="#13-copyWithin-target-start-end" class="headerlink" title="13. copyWithin(target, start, end)"></a>13. <code>copyWithin(target, start, end)</code></h3><p>从数组的指定位置拷贝元素到数组的另一个指定位置中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   target: 必需。复制到指定目标索引位置。  *   start: 必需。元素复制的起始位置。  *   end: 可选。停止复制的索引位置 (默认array.length)  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 3, 4, 4, 5, 6]</span></code></pre><h3 id="14-fill-value-start-end"><a href="#14-fill-value-start-end" class="headerlink" title="14. fill(value, start, end)"></a>14. <code>fill(value, start, end)</code></h3><p>用于将一个固定值替换数组的元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   value: 必需。填充的值。  *   start: 可选。开始填充位置。  *   end: 可选。停止填充位置 (默认为 array.length)  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [1, 2, 9, 9, 5, 6]</span></code></pre><h3 id="15-includes-searchElement-fromIndex"><a href="#15-includes-searchElement-fromIndex" class="headerlink" title="15.includes(searchElement, fromIndex)"></a>15.<code>includes(searchElement, fromIndex)</code></h3><p>用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> incArr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> incArr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>incArr1<span class="token punctuation">,</span> incArr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> true, false</span></code></pre><h3 id="16-indexOf-item-start"><a href="#16-indexOf-item-start" class="headerlink" title="16.indexOf(item,start)"></a>16.<code>indexOf(item,start)</code></h3><p>可返回某个指定的字符串值在字符串中首次出现的位置</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 2</span></code></pre><h3 id="17-lastIndexOf-item-start"><a href="#17-lastIndexOf-item-start" class="headerlink" title="17. lastIndexOf(item,start)"></a>17. <code>lastIndexOf(item,start)</code></h3><p>返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 4</span></code></pre><h3 id="18-find-function-currentValue-index-arr-thisValue"><a href="#18-find-function-currentValue-index-arr-thisValue" class="headerlink" title="18. find(function(currentValue, index, arr),thisValue)"></a>18. <code>find(function(currentValue, index, arr),thisValue)</code></h3><p>返回传入一个测试条件（函数）符合条件的数组第一个元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> ele <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> currentValue <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 4</span></code></pre><h3 id="19-findIndex-function-currentValue-index-arr-thisValue"><a href="#19-findIndex-function-currentValue-index-arr-thisValue" class="headerlink" title="19. findIndex(function(currentValue, index, arr),thisValue)"></a>19. <code>findIndex(function(currentValue, index, arr),thisValue)</code></h3><p>返回符合测试条件的第一个数组元素索引，如果没有符合条件的则返回 -1</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> currentValue <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="20-forEach-function-currentValue-index-arr-thisValue"><a href="#20-forEach-function-currentValue-index-arr-thisValue" class="headerlink" title="20. forEach(function(currentValue, index, arr), thisValue)"></a>20. <code>forEach(function(currentValue, index, arr), thisValue)</code></h3><p>用于调用数组的每个元素，并将元素传递给回调函数。没有返回值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 依次打印 1 2 3 4 5 6, 没有返回值</span></code></pre><h3 id="21-map-function-currentValue-index-arr-thisValue"><a href="#21-map-function-currentValue-index-arr-thisValue" class="headerlink" title="21. map(function(currentValue, index, arr), thisValue)"></a>21. <code>map(function(currentValue, index, arr), thisValue)</code></h3><p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(currentValue)</span>  <span class="token keyword">return</span> currentValue <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [2, 4, 6, 8, 10, 12]</span></code></pre><h3 id="22-reduce-function-total-currentValue-index-arr-thisValue"><a href="#22-reduce-function-total-currentValue-index-arr-thisValue" class="headerlink" title="22. reduce(function(total, currentValue, index, arr), thisValue)"></a>22. <code>reduce(function(total, currentValue, index, arr), thisValue)</code></h3><p>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   total: 必需。初始值, 或者计算结束后的返回值。  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> total <span class="token operator">+</span> currentValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 21</span></code></pre><h3 id="23-reduceRight-function-total-currentValue-index-arr-thisValue"><a href="#23-reduceRight-function-total-currentValue-index-arr-thisValue" class="headerlink" title="23. reduceRight(function(total, currentValue, index, arr), thisValue)"></a>23. <code>reduceRight(function(total, currentValue, index, arr), thisValue)</code></h3><p>接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   total: 必需。初始值, 或者计算结束后的返回值。  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> total <span class="token operator">-</span> currentValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> -9</span></code></pre><h3 id="24-some-function-currentValue-index-arr-thisValue"><a href="#24-some-function-currentValue-index-arr-thisValue" class="headerlink" title="24. some(function(currentValue, index, arr), thisValue)"></a>24. <code>some(function(currentValue, index, arr), thisValue)</code></h3><p>如果有一个元素满足条件，则表达式返回 true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回 false</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> someEle1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> currentValue <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> someEle2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> currentValue <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someEle1<span class="token punctuation">,</span> someEle2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> true, false</span></code></pre><h3 id="25-every-function-currentValue-index-arr-thisValue"><a href="#25-every-function-currentValue-index-arr-thisValue" class="headerlink" title="25. every(function(currentValue, index, arr), thisValue)"></a>25. <code>every(function(currentValue, index, arr), thisValue)</code></h3><p>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。如果所有元素都满足条件，则返回 true</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> everyEle1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> currentValue <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> everyEle2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> currentValue <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>everyEle1<span class="token punctuation">,</span> everyEle2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> true, false</span></code></pre><h3 id="26-filter-function-currentValue-index-arr-thisValue"><a href="#26-filter-function-currentValue-index-arr-thisValue" class="headerlink" title="26. filter(function(currentValue, index, arr), thisValue)"></a>26. <code>filter(function(currentValue, index, arr), thisValue)</code></h3><p>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   currentValue: 必需。当前元素  *   index: 可选。当前元素的索引值  *   arr: 可选。当前元素所属的数组对象  *   thisValue: 可选。 传递给函数的值一般用 "this" 值。 如果这个参数为空， "undefined" 会传递给 "this" 值  */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> currentValue <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> [3, 4, 5, 6]</span></code></pre><h3 id="27-from"><a href="#27-from" class="headerlink" title="27. from()"></a>27. <code>from()</code></h3><p>将类数组对象和可遍历对象转化为数组</p><pre class=" language-js"><code class="language-js">obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>  length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> ["a", "b", "c"]</span></code></pre><h3 id="28-of"><a href="#28-of" class="headerlink" title="28. of()"></a>28. <code>of()</code></h3><p>创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> [7]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> [1, 2, 3]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> [ , , , , , , ]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> [1, 2, 3]</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-toString&quot;&gt;&lt;a href=&quot;#1-toString&quot; class=&quot;headerlink&quot; title=&quot;1. toString()&quot;&gt;&lt;/a&gt;1. &lt;code&gt;toString()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;返回以数组中的每个值的字符串形式拼接而
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习总结——字符串篇</title>
    <link href="http://coder.liusixin.cn/posts/e84bf94c/"/>
    <id>http://coder.liusixin.cn/posts/e84bf94c/</id>
    <published>2017-05-06T04:55:36.000Z</published>
    <updated>2017-05-06T04:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-toString-和-valueOf"><a href="#1-toString-和-valueOf" class="headerlink" title="1. toString() 和 valueOf()"></a>1. <code>toString()</code> 和 <code>valueOf()</code></h3><p>返回的都是自己</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 'abcdefg'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 'abcdefg'</span></code></pre><h3 id="2-charAt-index"><a href="#2-charAt-index" class="headerlink" title="2. charAt(index)"></a>2. <code>charAt(index)</code></h3><p>返回在指定位置的字符。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>charAtEle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> d</span></code></pre><h3 id="3-charCodeAt-index"><a href="#3-charCodeAt-index" class="headerlink" title="3. charCodeAt(index)"></a>3. <code>charCodeAt(index)</code></h3><p>返回指定位置的字符的 Unicode 编码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 100  (d 的 Unicode编码是 100)</span></code></pre><h3 id="4-fromCharCode-n1-n2-nX"><a href="#4-fromCharCode-n1-n2-nX" class="headerlink" title="4. fromCharCode(n1, n2, ..., nX)"></a>4. <code>fromCharCode(n1, n2, ..., nX)</code></h3><p>将 Unicode 编码转为一个字符 接受一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> charCode1 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> charCode2 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>charCode1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> d</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>charCode2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> HELLO</span></code></pre><h3 id="5-indexOf-searchvalue-start"><a href="#5-indexOf-searchvalue-start" class="headerlink" title="5. indexOf(searchvalue,start)"></a>5. <code>indexOf(searchvalue,start)</code></h3><p>返回某个指定的字符串值在字符串中首次出现的位置。如果没有找到匹配的字符串则返回 -1。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   searchvalue: 必需。规定需检索的字符串值  *   start:  可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 string Object.length - 1。如省略该参数，则将从字符串的首字符开始检索  */</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdbfg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 4</span></code></pre><h3 id="6-lastIndexOf-searchvalue-start"><a href="#6-lastIndexOf-searchvalue-start" class="headerlink" title="6. lastIndexOf(searchvalue,start)"></a>6. <code>lastIndexOf(searchvalue,start)</code></h3><p>返回一个指定的字符串值最后出现的位置，如果指定第二个参数 start，则在一个字符串中的指定位置从后向前搜索。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   searchvalue: 必需。规定需检索的字符串值  *   start: 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。  */</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdbfg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 1</span></code></pre><h3 id="7-concat-string1-string2-stringX"><a href="#7-concat-string1-string2-stringX" class="headerlink" title="7. concat(string1, string2, ..., stringX)"></a>7. <code>concat(string1, string2, ..., stringX)</code></h3><p>concat() 方法用于连接两个或多个字符串。该方法没有改变原有字符串，但是会返回连接两个或多个字符串新字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'efg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 'abcdefg'</span></code></pre><h3 id="8-match-regexp"><a href="#8-match-regexp" class="headerlink" title="8. match(regexp)"></a>8. <code>match(regexp)</code></h3><p>在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdbef'</span><span class="token punctuation">;</span><span class="token keyword">var</span> matchEle <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/b/gi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matchEle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> ["b", "b"]</span></code></pre><h3 id="9-replace-searchvalue-newvalue"><a href="#9-replace-searchvalue-newvalue" class="headerlink" title="9. replace(searchvalue,newvalue)"></a>9. <code>replace(searchvalue,newvalue)</code></h3><p>在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   searchvalue: 必须。规定子字符串或要替换的模式的 RegExp 对象。 请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。  *   newvalue: 必需。一个字符串值。规定了替换文本或生成替换文本的函数。  */</span><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'abcdafg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/a/g</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> zbcdzfg</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'a1b2c3d4'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\d/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> a1b4c9d16</span></code></pre><h3 id="10-search-searchvalue"><a href="#10-search-searchvalue" class="headerlink" title="10. search(searchvalue)"></a>10. <code>search(searchvalue)</code></h3><p>检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'Abcdaef'</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx1 <span class="token operator">=</span> searchStr<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/a/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx2 <span class="token operator">=</span> searchStr<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/a/i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idx2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 0</span></code></pre><h3 id="11-slice-start-end"><a href="#11-slice-start-end" class="headerlink" title="11. slice(start,end)"></a>11. <code>slice(start,end)</code></h3><p>提取字符串的某个部分，并以新的字符串返回被提取的部分。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   start:必须. 要抽取的片断的起始下标。第一个字符位置为 0  *   end: 可选。 紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。  */</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> bcdef</span></code></pre><h3 id="12-split-separator-limit"><a href="#12-split-separator-limit" class="headerlink" title="12. split(separator,limit)"></a>12. <code>split(separator,limit)</code></h3><p>把一个字符串分割成字符串数组。如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   separator: 可选。字符串或正则表达式，从该参数指定的地方分割 string Object。  *   limit: 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。  */</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdecg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> splitStr1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> splitStr2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>splitStr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> ["ab", "de", "g"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>splitStr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> ["a", "b", "c", "a", "e", "f", "g"]</span></code></pre><h3 id="13-substr-start-length"><a href="#13-substr-start-length" class="headerlink" title="13. substr(start,length)"></a>13. <code>substr(start,length)</code></h3><p>在字符串中抽取从 开始 下标开始的指定数目的字符。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   start: 必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。  *   length: 可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。  */</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> cd</span></code></pre><h3 id="14-substring-from-to"><a href="#14-substring-from-to" class="headerlink" title="14. substring(from, to)"></a>14. <code>substring(from, to)</code></h3><p>用于提取字符串中介于两个指定下标之间的字符。返回的子串包括 开始 处的字符，但不包括 结束 处的字符。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  *   from:必需。一个非负的整数，规定要提取的子串的第一个字符在 string Object 中的位置。  *   to: 可选。一个非负的整数，比要提取的子串的最后一个字符在 string Object 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。  */</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> cd</span></code></pre><h3 id="15-toLowerCase"><a href="#15-toLowerCase" class="headerlink" title="15. toLowerCase()"></a>15. <code>toLowerCase()</code></h3><p>把字符串转换为小写。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'ABCDEFG'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> abcdefg</span></code></pre><h3 id="16-toUpperCase"><a href="#16-toUpperCase" class="headerlink" title="16. toUpperCase()"></a>16. <code>toUpperCase()</code></h3><p>把字符串转换为大写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> ABCDEFG</span></code></pre><h3 id="17-trim-去除字符串两边的空白"><a href="#17-trim-去除字符串两边的空白" class="headerlink" title="17. trim(): 去除字符串两边的空白"></a>17. trim(): 去除字符串两边的空白</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">' abcdefg   '</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ->abcdefg</span></code></pre><h3 id="18-includes-searchvalue-start"><a href="#18-includes-searchvalue-start" class="headerlink" title="18. includes(searchvalue, start)"></a>18. <code>includes(searchvalue, start)</code></h3><p>用来判断一个字符串是否包含一个指定的值，如果是返回 true，否则 false</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> includesStr1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> includesStr2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>includesStr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>includesStr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> false</span></code></pre><h3 id="19-startsWith-searchvalue-start"><a href="#19-startsWith-searchvalue-start" class="headerlink" title="19. startsWith(searchvalue, start)"></a>19. <code>startsWith(searchvalue, start)</code></h3><p>表示是否字符(串)位于 string 的头部位置, 如果是返回 true，否则 false</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> startsStr1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> startsStr2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>startsStr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>startsStr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> false</span></code></pre><h3 id="20-endsWith-searchvalue-start"><a href="#20-endsWith-searchvalue-start" class="headerlink" title="20. endsWith(searchvalue, start)"></a>20. <code>endsWith(searchvalue, start)</code></h3><p>表示是否字符(串)位于 string 的尾部位置, 如果是返回 true，否则 false</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> endsStr1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> endsStr2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>endsStr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>endsStr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> true</span></code></pre><h3 id="21-repeat-num"><a href="#21-repeat-num" class="headerlink" title="21. repeat(num)"></a>21. <code>repeat(num)</code></h3><p>参数 num 为重复字符串的次数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重复两次</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> abcabc</span></code></pre><h3 id="22"><a href="#22" class="headerlink" title="22. ${}"></a>22. <code>${}</code></h3><p>模板字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">var</span> tpl <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> world`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tpl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> hello world</span></code></pre><hr><h4 id="String-HTML-包装方法"><a href="#String-HTML-包装方法" class="headerlink" title="String HTML 包装方法"></a>String HTML 包装方法</h4><h3 id="1-anchor-name"><a href="#1-anchor-name" class="headerlink" title="1. anchor(name)"></a>1. <code>anchor(name)</code></h3><p>用于创建 HTML 锚。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是锚点'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">anchor</span><span class="token punctuation">(</span><span class="token string">'top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;a name="top">我是锚点&lt;/a></span></code></pre><h3 id="2-big"><a href="#2-big" class="headerlink" title="2. big()"></a>2. <code>big()</code></h3><p>把字符串显示为大号字体</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">big</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;big>abcdefg&lt;/big></span></code></pre><h3 id="3-blink"><a href="#3-blink" class="headerlink" title="3. blink()"></a>3. <code>blink()</code></h3><p>显示闪动字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">blink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;blink>abcdefg&lt;/blink></span></code></pre><h3 id="4-bold"><a href="#4-bold" class="headerlink" title="4. bold()"></a>4. <code>bold()</code></h3><p>使用粗体显示字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;b>abcdefg&lt;/b></span></code></pre><h3 id="5-fixed"><a href="#5-fixed" class="headerlink" title="5. fixed()"></a>5. <code>fixed()</code></h3><p>以打字机文本显示字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;tt>abcdefg&lt;/tt></span></code></pre><h3 id="6-fontcolor-color"><a href="#6-fontcolor-color" class="headerlink" title="6. fontcolor(color)"></a>6. <code>fontcolor(color)</code></h3><p>使用指定的颜色来显示字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">fontcolor</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;font color="red">abcdefg&lt;/font></span></code></pre><h3 id="7-fontsize-size"><a href="#7-fontsize-size" class="headerlink" title="7. fontsize(size)"></a>7. <code>fontsize(size)</code></h3><p>使用指定的尺寸来显示字符串, size 参数必须是从 1 至 7 的数字。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">fontsize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;font size="3">abcdefg&lt;/font></span></code></pre><h3 id="8-italics"><a href="#8-italics" class="headerlink" title="8. italics()"></a>8. <code>italics()</code></h3><p>使用斜体显示字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">italics</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;i>abcdefg&lt;/i></span></code></pre><h3 id="9-link-url"><a href="#9-link-url" class="headerlink" title="9. link(url)"></a>9. <code>link(url)</code></h3><p>将字符串显示为链接</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">'http://blog.liusixin.cn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;a href="http://blog.liusixin.cn">abcdefg&lt;/a></span></code></pre><h3 id="10-small-url"><a href="#10-small-url" class="headerlink" title="10. small(url)"></a>10. <code>small(url)</code></h3><p>使用小字号来显示字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">small</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;small>abcdefg&lt;/small></span></code></pre><h3 id="11-strike-url"><a href="#11-strike-url" class="headerlink" title="11. strike(url)"></a>11. <code>strike(url)</code></h3><p>用于显示加删除线的字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">strike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;strike>abcdefg&lt;/strike></span></code></pre><h3 id="12-sub-url"><a href="#12-sub-url" class="headerlink" title="12. sub(url)"></a>12. <code>sub(url)</code></h3><p>把字符串显示为下标</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;sub>abcdefg&lt;/sub></span></code></pre><h3 id="13-sup-url"><a href="#13-sup-url" class="headerlink" title="13. sup(url)"></a>13. <code>sup(url)</code></h3><p>把字符串显示为上标</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token keyword">var</span> htmlStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">sup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> &lt;sup>abcdefg&lt;/sup></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-toString-和-valueOf&quot;&gt;&lt;a href=&quot;#1-toString-和-valueOf&quot; class=&quot;headerlink&quot; title=&quot;1. toString() 和 valueOf()&quot;&gt;&lt;/a&gt;1. &lt;code&gt;toString()&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端 css样式初始化</title>
    <link href="http://coder.liusixin.cn/posts/22b27e40/"/>
    <id>http://coder.liusixin.cn/posts/22b27e40/</id>
    <published>2017-04-27T01:09:40.000Z</published>
    <updated>2017-04-27T01:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-pc-reset-PC-样式初始化"><a href="#1-pc-reset-PC-样式初始化" class="headerlink" title="1. pc-reset PC 样式初始化"></a>1. pc-reset PC 样式初始化</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* normalize.css */</span><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.15</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">-ms-text-size-adjust</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">article,aside,footer,header,nav,section </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1 </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0.67</span>em <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">figcaption,figure,main </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">figure </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>em <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">hr </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">pre </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> monospace, monospace<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">-webkit-text-decoration-skip</span><span class="token punctuation">:</span> objects<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">abbr<span class="token attribute">[title]</span> </span><span class="token punctuation">{</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline dotted<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">b,strong </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">b,strong </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">code,kbd,samp </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> monospace, monospace<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">dfn </span><span class="token punctuation">{</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">mark </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">small </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">sub,sup </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">75%</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">sub </span><span class="token punctuation">{</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">0.25</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">sup </span><span class="token punctuation">{</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">0.5</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">audio,video </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">audio<span class="token pseudo-class">:not([controls])</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img </span><span class="token punctuation">{</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">svg<span class="token pseudo-class">:not(:root)</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,input,optgroup,select,textarea </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.15</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">button,input </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,select </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">text-transform</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>button,html [type=<span class="token string">"button"</span>],<span class="token comment" spellcheck="true">/* 1 */</span><span class="token selector"><span class="token attribute">[type="reset"]</span>,<span class="token attribute">[type="submit"]</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">button<span class="token pseudo-element">::-moz-focus-inner</span>,<span class="token attribute">[type='button']</span><span class="token pseudo-element">::-moz-focus-inner</span>,<span class="token attribute">[type='reset']</span><span class="token pseudo-element">::-moz-focus-inner</span>,<span class="token attribute">[type='submit']</span><span class="token pseudo-element">::-moz-focus-inner</span> </span><span class="token punctuation">{</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button<span class="token pseudo-class">:-moz-focusring</span>,<span class="token attribute">[type='button']</span><span class="token pseudo-class">:-moz-focusring</span>,<span class="token attribute">[type='reset']</span><span class="token pseudo-class">:-moz-focusring</span>,<span class="token attribute">[type='submit']</span><span class="token pseudo-class">:-moz-focusring</span> </span><span class="token punctuation">{</span>  <span class="token property">outline</span><span class="token punctuation">:</span> <span class="token number">1</span>px dotted ButtonText<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">fieldset </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0.35</span>em <span class="token number">0.75</span>em <span class="token number">0.625</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">legend </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 3 */</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">}</span><span class="token selector">progress </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">textarea </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='checkbox']</span>,<span class="token attribute">[type='radio']</span> </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='number']</span><span class="token pseudo-element">::-webkit-inner-spin-button</span>,<span class="token attribute">[type='number']</span><span class="token pseudo-element">::-webkit-outer-spin-button</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='search']</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> textfield<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">outline-offset</span><span class="token punctuation">:</span> -<span class="token number">2</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='search']</span><span class="token pseudo-element">::-webkit-search-cancel-button</span>,<span class="token attribute">[type='search']</span><span class="token pseudo-element">::-webkit-search-decoration</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-element">::-webkit-file-upload-button</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span>details,<span class="token comment" spellcheck="true">/* 1 */</span><span class="token selector">menu </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">summary </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> list-item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">canvas </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">template </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[hidden]</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* reset */</span><span class="token selector">html,body,h1,h2,h3,h4,h5,h6,div,dl,dt,dd,ul,ol,li,p,blockquote,pre,hr,figure,table,caption,th,td,form,fieldset,legend,input,button,textarea,menu </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-Phone-reset"><a href="#2-Phone-reset" class="headerlink" title="2. Phone-reset"></a>2. Phone-reset</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* normalize.css */</span><span class="token selector">html </span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.15</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">-ms-text-size-adjust</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">article,aside,footer,header,nav,section </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1 </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0.67</span>em <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">figcaption,figure,main </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">figure </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>em <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">hr </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">pre </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> monospace, monospace<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">-webkit-text-decoration-skip</span><span class="token punctuation">:</span> objects<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">abbr<span class="token attribute">[title]</span> </span><span class="token punctuation">{</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline dotted<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">b,strong </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">b,strong </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">code,kbd,samp </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> monospace, monospace<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">dfn </span><span class="token punctuation">{</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">mark </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">small </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">sub,sup </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">75%</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">sub </span><span class="token punctuation">{</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">0.25</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">sup </span><span class="token punctuation">{</span>  <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">0.5</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">audio,video </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">audio<span class="token pseudo-class">:not([controls])</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img </span><span class="token punctuation">{</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">svg<span class="token pseudo-class">:not(:root)</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,input,optgroup,select,textarea </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.15</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">button,input </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,select </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">text-transform</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>button,html [type=<span class="token string">"button"</span>],<span class="token comment" spellcheck="true">/* 1 */</span><span class="token selector"><span class="token attribute">[type="reset"]</span>,<span class="token attribute">[type="submit"]</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">button<span class="token pseudo-element">::-moz-focus-inner</span>,<span class="token attribute">[type='button']</span><span class="token pseudo-element">::-moz-focus-inner</span>,<span class="token attribute">[type='reset']</span><span class="token pseudo-element">::-moz-focus-inner</span>,<span class="token attribute">[type='submit']</span><span class="token pseudo-element">::-moz-focus-inner</span> </span><span class="token punctuation">{</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button<span class="token pseudo-class">:-moz-focusring</span>,<span class="token attribute">[type='button']</span><span class="token pseudo-class">:-moz-focusring</span>,<span class="token attribute">[type='reset']</span><span class="token pseudo-class">:-moz-focusring</span>,<span class="token attribute">[type='submit']</span><span class="token pseudo-class">:-moz-focusring</span> </span><span class="token punctuation">{</span>  <span class="token property">outline</span><span class="token punctuation">:</span> <span class="token number">1</span>px dotted ButtonText<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">fieldset </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0.35</span>em <span class="token number">0.75</span>em <span class="token number">0.625</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">legend </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 3 */</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">}</span><span class="token selector">progress </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector">textarea </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='checkbox']</span>,<span class="token attribute">[type='radio']</span> </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='number']</span><span class="token pseudo-element">::-webkit-inner-spin-button</span>,<span class="token attribute">[type='number']</span><span class="token pseudo-element">::-webkit-outer-spin-button</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='search']</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> textfield<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">outline-offset</span><span class="token punctuation">:</span> -<span class="token number">2</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[type='search']</span><span class="token pseudo-element">::-webkit-search-cancel-button</span>,<span class="token attribute">[type='search']</span><span class="token pseudo-element">::-webkit-search-decoration</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-element">::-webkit-file-upload-button</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">font</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span>details,<span class="token comment" spellcheck="true">/* 1 */</span><span class="token selector">menu </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">summary </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> list-item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">canvas </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">template </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token attribute">[hidden]</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* reset */</span><span class="token selector">html,body,h1,h2,h3,h4,h5,h6,div,dl,dt,dd,ul,ol,li,p,blockquote,pre,hr,figure,table,caption,th,td,form,fieldset,legend,input,button,textarea,menu </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">html,body </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 禁止选中文本 */</span>  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">font</span><span class="token punctuation">:</span> Oswald, <span class="token string">'Open Sans'</span>, Helvetica, Arial, sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 禁止长按链接与图片弹出菜单 */</span><span class="token selector">a,img </span><span class="token punctuation">{</span>  <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*ios android去除自带阴影的样式*/</span><span class="token selector">a,input </span><span class="token punctuation">{</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">input<span class="token attribute">[type='text']</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-公共样式提取"><a href="#3-公共样式提取" class="headerlink" title="3. 公共样式提取"></a>3. 公共样式提取</h2><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 禁止选中文本 */</span><span class="token selector"><span class="token class">.usn</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-o-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 浮动 */</span><span class="token selector"><span class="token class">.fl</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fr</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.cf</span> </span><span class="token punctuation">{</span>  <span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.cf</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 元素类型 */</span><span class="token selector"><span class="token class">.db</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.dn</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.di</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.dib</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.transparent</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*文字排版、颜色*/</span><span class="token selector"><span class="token class">.f12</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.f14</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.f16</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.f18</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.f20</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fb</span> </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fn</span> </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.t2</span> </span><span class="token punctuation">{</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.red</span>,a<span class="token class">.red</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#cc0031</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.darkblue</span>,a<span class="token class">.darkblue</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#039</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gray</span>,a<span class="token class">.gray</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#878787</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.lh150</span> </span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">150%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.lh180</span> </span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">180%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.lh200</span> </span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">200%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.unl</span> </span><span class="token punctuation">{</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.no_unl</span> </span><span class="token punctuation">{</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tl</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tc</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tr</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tj</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span>  <span class="token property">text-justify</span><span class="token punctuation">:</span> inter-ideograph<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wn</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 强制不换行 */</span>  <span class="token property">word-wrap</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wb</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 强制换行 */</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">word-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>  <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wp</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 保持空白序列*/</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> pre-wrap<span class="token punctuation">;</span>  <span class="token property">word-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>  <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wes</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 多出部分用省略号表示 , 用于一行 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">word-wrap</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wes-2</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 适用于webkit内核和移动端 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wes-3</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wes-4</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 溢出样式 */</span><span class="token selector"><span class="token class">.ofh</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ofs</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ofa</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ofv</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 定位方式 */</span><span class="token selector"><span class="token class">.ps</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.pr</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.pa</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.pf</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 垂直对齐方式 */</span><span class="token selector"><span class="token class">.vt</span> </span><span class="token punctuation">{</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.vm</span> </span><span class="token punctuation">{</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.vb</span> </span><span class="token punctuation">{</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 鼠标样式 */</span><span class="token selector"><span class="token class">.csd</span> </span><span class="token punctuation">{</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> default<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.csp</span> </span><span class="token punctuation">{</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.csh</span> </span><span class="token punctuation">{</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> help<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.csm</span> </span><span class="token punctuation">{</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* flex布局 */</span><span class="token selector"><span class="token class">.df-sb</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.df-sa</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 垂直居中 */</span><span class="token selector"><span class="token class">.df-c</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tb-c</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ts-c</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ts-mc</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 辅助 */</span><span class="token selector"><span class="token class">.mask-fixed-wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bg-cover</span> </span><span class="token punctuation">{</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bg-cover-all</span> </span><span class="token punctuation">{</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-pc-reset-PC-样式初始化&quot;&gt;&lt;a href=&quot;#1-pc-reset-PC-样式初始化&quot; class=&quot;headerlink&quot; title=&quot;1. pc-reset PC 样式初始化&quot;&gt;&lt;/a&gt;1. pc-reset PC 样式初始化&lt;/h2&gt;&lt;pr
      
    
    </summary>
    
      <category term="前端" scheme="http://coder.liusixin.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://coder.liusixin.cn/tags/CSS/"/>
    
      <category term="样式重置" scheme="http://coder.liusixin.cn/tags/%E6%A0%B7%E5%BC%8F%E9%87%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高程笔记 （21-25章）</title>
    <link href="http://coder.liusixin.cn/posts/41794580/"/>
    <id>http://coder.liusixin.cn/posts/41794580/</id>
    <published>2017-04-23T09:43:24.000Z</published>
    <updated>2017-04-23T09:43:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-21-章-Ajax-与-Comet"><a href="#第-21-章-Ajax-与-Comet" class="headerlink" title="第 21 章 - Ajax 与 Comet"></a>第 21 章 - Ajax 与 Comet</h1><blockquote><p>参考：<a href="http://javascript.ruanyifeng.com/bom/ajax.html" rel="external nofollow noopener noreferrer" target="_blank">也可以查看阮一峰 AJAX 学习</a></p></blockquote><p>Asynchronous Javascript and XML(Ajax),这一技术能够能够向服务器请求额外的数据而不用刷新页面，能够带来更好的用户体验，熟练地使用 XHR 对象是 Web 开发人员必须掌握的一项技能。</p><p><strong>学习目标</strong></p><ul><li>使用<code>XMLHttpRequest</code></li><li>使用<code>XMLHttpRequest</code>相应的事件</li><li>跨域 Ajax 通信的限制</li></ul><h2 id="21-1-XMLHttpRequest-对象"><a href="#21-1-XMLHttpRequest-对象" class="headerlink" title="21.1 XMLHttpRequest 对象"></a>21.1 XMLHttpRequest 对象</h2><blockquote><p><code>XMLHttpRequest</code>对象是使用 Ajax 技术最重要的一个点，最早支持该 api 的浏览器是 IE5，在该浏览器中通过 MSXML 中的一个<code>ActiveX</code>对象实现的，所以在 IE 中也可能会遇到三个不同版本的 XHR 对象，分别是 MSXML2.XMLHttp、MSXML2.XMLHttp.3.0、MSXML2.XMLHttp.6.0。需要兼容的话可以使用下面这个函数。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  适用于ie7之前的版本</span><span class="token keyword">function</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">!=</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> versions <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">'MSXML2.XMLHttp'</span><span class="token punctuation">,</span>      <span class="token string">'MSXML2.XMLhttp.3.0'</span><span class="token punctuation">,</span>      <span class="token string">'MSXML2.XMLhttp.6.0'</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> versions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">=</span> versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 跳过</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>当然如果我们只想支持 ie7 以及更高版本的浏览器只需要像下面这样使用构造函数</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>如果必须支持 ie7 以下的版本，稍微改造下前面的 createXHR 函数即可</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">!=</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'进了arguments.callee.activeXString'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> versions <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">'MSXML2.XMLHttp'</span><span class="token punctuation">,</span>      <span class="token string">'MSXML2.XMLhttp.3.0'</span><span class="token punctuation">,</span>      <span class="token string">'MSXML2.XMLhttp.6.0'</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> versions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 为什么这里不将实例返回也可以得到XHR对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">=</span> versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 跳过</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ActiveXObject'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No XHR object available'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="21-1-1-XHR-的用法"><a href="#21-1-1-XHR-的用法" class="headerlink" title="21.1.1 XHR 的用法"></a>21.1.1 XHR 的用法</h3><blockquote><p>上面了解了如何用兼容的方式获取一个 xhr 对象，现在开始学习如何使用，一般大致上可以分为以下三步。</p></blockquote><ul><li>通过<code>onreadystatechange</code>监听请求状态</li><li><code>xhr.open(method, url, true or false)</code></li><li><code>xhr.send()</code></li></ul><p><code>xhr.open(method, url, true or false)</code>的三个参数分别是请求的类型(get、post 等)，请求的 url，以及请求是否设置为异步。</p><p><strong>示例</strong></p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'example.php'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>特别说明</strong></p><ul><li>url 可以是相对路径也可以是绝对路径</li><li>调用 open 方法后并不会立即发送一个请求到服务器，只是启动一个请求以备发送。</li><li>真正发送请求是从<code>xhr.send()</code>开始</li></ul><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'example.php'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>send 方法接收一个参数，即作为请求主体发送的数据，如果不需要发送数据必须传入<code>null</code>,此时请求才真正地被分派至服务器。</p><p>当发送的请求接收到响应的时候会自动填充 xhr 对象的相关属性，现在对相关属性介绍如下。</p><ul><li><code>responseText</code>(作为响应主体被返回的文本)</li><li><code>status</code> (响应的 http 状态)</li><li><code>statusText</code>(http 状态说明)</li></ul><p>接收到响应的时候先判断<code>status</code>属性，以判断响应是否完成，一般将 http 状态为 200(304 表示请求的资源没有更改，可以走浏览器缓存)时作为成功的标志。</p><p>所以可以如下写法检查请求的状态</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'example.php'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 成功</span>  <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'request was unsuccessful'</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>像上面那样发送的是同步请求，大多数情况下我们发送的还是异步请求以不阻塞 js 继续执行，这个时候可以监测 xhr 对象的<code>readyState</code>属性,该属性表示请求/响应过程属于哪一个阶段。总共有以下几个阶段</p><ul><li><code>0</code> : 未初始化，还没有调用 open()方法</li><li><code>1</code> : 启动，已经吊用 open()方法但是还没有调用 send()方法</li><li><code>2</code> : 发送，已经调用 send()方法，但是尚未接收到响应</li><li><code>3</code> : 接收，已经接收到部分数据</li><li><code>4</code> : 完成，已经接收到全部数据，而且已经可以在客户端使用了。</li></ul><p>通常<code>readyState</code>由一个值切换到另一个值都会触发<code>onreadystatechange</code>事件，通常我们只对为 4 的情况感兴趣，因为只有这个时候响应的数据是完整的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 成功</span>      <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 失败</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'example.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>另外既然可以发送请求，我们也可以终止请求，调用<code>xhr.abort()</code> 法方法，xhr 对象将会停止触发事件，此时也应该对 xhr 对象解除引用操作</strong></p><h3 id="21-1-2-http-头部信息"><a href="#21-1-2-http-头部信息" class="headerlink" title="21.1.2 http 头部信息"></a>21.1.2 http 头部信息</h3><blockquote><p>每个 http 的请求和响应都会带有响应的头部信息，xhr 对象提供了操作这两种头部(请求头部和响应头部)信息的方法。</p></blockquote><ul><li><code>Accept</code> : 浏览器能够处理的内容类型</li><li><code>Accept-charset</code> : 浏览器能够显示的字符集</li><li><code>Accept-Encoding</code> : 浏览器能够处理的压缩编码</li><li><code>Accept-Language</code> : 浏览器当前设置的语言</li><li><code>Connection</code> : 浏览器与服务器之间的连接类型</li><li><code>Cookie</code> : 当前页面设置的任何 cookie</li><li><code>Host</code> : 发出的请求所在的域</li><li><code>Referer</code> : 发出请求的页面 URI (特别注意：这个单词正确拼写应该是 referrer,但是 HTTP 规范把单词拼错了，也只能将错就错了)</li></ul><p><strong>可以使用<code>xhr.setRequestHeader</code>来设置自定义的请求头部信息</strong></p><p>该方法接收两个参数，即头部字段的名称和头部字段的值。</p><p><strong>如果要成功的发送请求头部信息，必须在调用 open 方法之后并且调用 send 方法之前调用<code>setRequesHeader</code>方法</strong>，比如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'example'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'liusixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>服务端在接收到这种自定义的头部信息之后，可以执行响应的后续操作，建议不要修改浏览器默认的头部相关字段。</p><p>我们也可以调用<code>xhr.getResponseHeader()</code>，并传入一个头部字段的名称即可获取响应的头部信息，而调用<code>xhr.getAllResponseHeaders()</code>则可以获取包含所有头部信息的长字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myHeader <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'myHeader'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> allHeaders <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然了客户端在发起请求的时候可以自定义请求头部信息，服务端同样可以返回客户端一些自定义的头部信息。</p><h3 id="21-1-3-GET-请求"><a href="#21-1-3-GET-请求" class="headerlink" title="21.1.3 GET 请求"></a>21.1.3 GET 请求</h3><blockquote><p>GET 是最常见的请求类型，最常用于向服务器查询某些信息，将查询字符串跟在 url 的后面，以便将信息发送给服务器。，对于 XHR 而言传入 open 方法的 url 后的查询字符串，必须经过正确的编码（即名和值都必须使用<code>encodeURIComponent()</code>进行处理）才行。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addURLParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  url <span class="token operator">+</span><span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'?'</span> <span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span>  url <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="21-1-4-POST-请求"><a href="#21-1-4-POST-请求" class="headerlink" title="21.1.4 POST 请求"></a>21.1.4 POST 请求</h3><blockquote><p>使用频率仅次于 get 的是 post 请求，通常用于向服务器发送应该被保存的数据，post 请求应该将数据作为请求的主体提交而 get 请求传统上不是如此，post 请求可以包含非常多的数据而且格式不限。</p></blockquote><p><strong>默认情况下，服务器对 post 请求和提交的 web 表单请求并不会一视同仁，因此服务器必须有程序来读取发送过来的原始数据，并且解析出有用的部分，不过我们可以用 xhr 来模仿表单提交</strong></p><p>模仿表单提交一般有以下两点</p><ul><li>将请求头的<code>Content-type</code>设置为<code>application/x-www-form-urlencoded</code>,也就是表单提交的类型</li><li>其次以合适的格式创建一个字符串，post 格式与查询字符串的格式相同</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">submitData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'example.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 着重点</span>  <span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user-info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 着重点</span><span class="token punctuation">}</span></code></pre><p><strong>与 GET 请求相比 POST 请求消耗的资源会更多一些，从性能角度看，发送相同的数据，GET 请求的速度可以达到 POST 请求的 2 倍</strong></p><h2 id="21-2-XMLHttpRequest-2-级"><a href="#21-2-XMLHttpRequest-2-级" class="headerlink" title="21.2 XMLHttpRequest 2 级"></a>21.2 XMLHttpRequest 2 级</h2><h3 id="21-2-1-FormData"><a href="#21-2-1-FormData" class="headerlink" title="21.2.1 FormData"></a>21.2.1 FormData</h3><blockquote><p>现代 Web 应用中频繁使用的一项功能就是表单序列化，<code>XMLHttpRequest 2</code>为此定义了<code>FormData</code>类型，<code>FormData</code>为序列化表单和创建与表单格式相同的数据(用于通过 XHR 传输)提供了便利。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'liusixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其接收两个参数，数据的健和值，当然也可以直接像 FormData 传入表单</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'example.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user-info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 着重点</span></code></pre><p><strong>对比上面一个例子我们可以发现，使用 FormData 来传输数据的时候，可以省去设置头部 Content-type，也不必自己序列化表单，可谓方便多了</strong></p><h3 id="21-2-2-超时设置"><a href="#21-2-2-超时设置" class="headerlink" title="21.2.2 超时设置"></a>21.2.2 超时设置</h3><p><strong><code>overrideMimeType()</code>方法</strong></p><blockquote><p>该方法用于重写 XHR 响应的 MIME 类型，因为返回响应的类型决定了 XHR 对象如何处理它，所以提供一种能够重写服务端返回的 MIME 类型是很有用的。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" rel="external nofollow noopener noreferrer" target="_blank">MIME MDN</a></p></blockquote><p>举个例子：服务器返回的 MIME 类型是<code>text/plain</code>,但是数据中实际包含的是 XML，那么 XHR 根据 MIME 的类型，即使数据是 XML。<code>responseXML</code>属性中仍然是 null，通过调用<code>overrideMimeType</code>方法，可以保证把响应当作 XML 而非穿文本来处理。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'text.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">overrideMimeType</span><span class="token punctuation">(</span><span class="token string">'text/xml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意该方法必须要在 send 方法之前调用，才能保证重写响应的 MIME 类型</strong></p><h2 id="21-3-进度事件"><a href="#21-3-进度事件" class="headerlink" title="21.3 进度事件"></a>21.3 进度事件</h2><blockquote><p>Progress Events 定义了客户端与服务器通信有关的事件。</p></blockquote><ul><li><code>loadStart</code> ： 在接收到响应数据的第一个自己触发</li><li><code>progress</code> ：在接收响应期间持续不断的触发</li><li><code>error</code> ： 在请求发生错误时触发</li><li><code>abort</code> ： 在因为调用 abort()方法而终止连接时触发</li><li><code>load</code> ： 在接收到完整的数据时触发</li><li><code>loadend</code> ： 在通信完成或者触发 error、abort 或 load 事件后触发</li></ul><p><strong>着重看<code>load</code>和<code>progress</code>事件</strong></p><h3 id="21-3-1-load-事件"><a href="#21-3-1-load-事件" class="headerlink" title="21.3.1 load 事件"></a>21.3.1 load 事件</h3><blockquote><p>load 事件的初衷在于简化异步交互的模型，用以替代<code>readystatechange</code>事件，响应接收完毕将会触发 load 事件，因此也就没有必要检查<code>readyState</code>属性。并且 load 事件处理程序会受到一个 event 对象，target 属性就是指向 xhr 对象的实例，也就可以访问到其所有的属性和方法。</p></blockquote><p>遗憾的是并不是所有的浏览器都实现了适当的事件对象，所以兼容写法还是如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Request was unsuccessful'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="21-3-2-progress-事件"><a href="#21-3-2-progress-事件" class="headerlink" title="21.3.2 progress 事件"></a>21.3.2 progress 事件</h3><blockquote><p>该事件会在浏览器接收数据期间周期性的触发。而<code>onprogress</code>的事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但是包含三个而外的属性</p></blockquote><ul><li><code>lengthComputable</code> (表示进度信息是否可用)</li><li><code>position</code> (表示已经接收的字节数)</li><li><code>totalSize</code> (表示根据<code>Content-Length</code>响应头部确定的预期的字节数)</li></ul><blockquote><p>这些属性兼容性问题比较大，谨慎使用</p></blockquote><h2 id="21-4-跨域资源共享"><a href="#21-4-跨域资源共享" class="headerlink" title="21.4 跨域资源共享"></a>21.4 跨域资源共享</h2><h3 id="21-4-1-IE-对-CORS-的实现"><a href="#21-4-1-IE-对-CORS-的实现" class="headerlink" title="21.4.1 IE 对 CORS 的实现"></a>21.4.1 IE 对 CORS 的实现</h3><h3 id="21-4-2-其他浏览器对-CORS-的实现"><a href="#21-4-2-其他浏览器对-CORS-的实现" class="headerlink" title="21.4.2 其他浏览器对 CORS 的实现"></a>21.4.2 其他浏览器对 CORS 的实现</h3><h3 id="21-4-3-Preflighted-Request"><a href="#21-4-3-Preflighted-Request" class="headerlink" title="21.4.3 Preflighted Request"></a>21.4.3 Preflighted Request</h3><h3 id="21-4-4-带凭据的请求"><a href="#21-4-4-带凭据的请求" class="headerlink" title="21.4.4 带凭据的请求"></a>21.4.4 带凭据的请求</h3><h3 id="21-4-5-跨浏览器的-CORS"><a href="#21-4-5-跨浏览器的-CORS" class="headerlink" title="21.4.5 跨浏览器的 CORS"></a>21.4.5 跨浏览器的 CORS</h3><blockquote><p>上面内容可以参考 阮一峰的<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" rel="external nofollow noopener noreferrer" target="_blank">跨域资源共享 CORS 详解</a></p></blockquote><h2 id="21-5-其他跨域技术"><a href="#21-5-其他跨域技术" class="headerlink" title="21.5 其他跨域技术"></a>21.5 其他跨域技术</h2><blockquote><p>在 CORS 技术出现之前，解决跨域问题，一般是利用 DOM 中能够执行跨域请求的功能，在不依赖 XHR 对象的情况下也能发送某种请求。</p></blockquote><h3 id="21-5-1-图像-ping"><a href="#21-5-1-图像-ping" class="headerlink" title="21.5.1 图像 ping"></a>21.5.1 图像 ping</h3><blockquote><p>网页中无论从哪个网页中加载图片都不用担心跨域的问题，通过动态的创建图像，使用它们的<code>onload</code>和<code>onerror</code>事件处理程序来确定是否接收到了响应。</p></blockquote><p><strong>图像 ping 是与服务器进行简单、单向的跨域通信的一种方式，请求的数据通过查询字符串形式发送给服务器，而响应可以是任意内容，但通常是像素图或 204 响应，通过图像 ping 浏览器得到不任何数据，但可以通过 onload 和 onerror 事件知晓请求是何时接收到的。</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>onload <span class="token operator">=</span> img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'DONE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">;</span></code></pre><h3 id="21-5-2-JSONP"><a href="#21-5-2-JSONP" class="headerlink" title="21.5.2 JSONP"></a>21.5.2 JSONP</h3><blockquote><p>JSONP(JSON with padding),由两部分组成：回调函数和数据，回调函数是当响应到来的时应该在页面中调用的函数，回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的 json 数据。</p></blockquote><p><strong>通过动态地创建<code>&lt;script&gt;</code>标签，将其 src 属性指向一个跨域的 url，其实这里的 script 标签和 img 标签类似，都有能力不受限制的跨域加载资源，因为 JSONP 是有效的 JavaScript 代码，所以在请求完成之后，即在 JSONP 响应加载到页面以后，就会立即执行。</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://example.php?callback=handleReponse'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="第-22-章-高级技巧"><a href="#第-22-章-高级技巧" class="headerlink" title="第 22 章 - 高级技巧"></a>第 22 章 - 高级技巧</h1><p><strong>学习目标</strong></p><ul><li>使用高级函数</li><li>防篡改对象</li><li>Yielding Timers</li></ul><h2 id="22-1-高级函数"><a href="#22-1-高级函数" class="headerlink" title="22.1 高级函数"></a>22.1 高级函数</h2><h3 id="22-1-1-安全的类型检测"><a href="#22-1-1-安全的类型检测" class="headerlink" title="22.1.1 安全的类型检测"></a>22.1.1 安全的类型检测</h3><blockquote><p>JavaScript 内置的类型检测并不是完全可靠，发生错误的情况不再少数，</p></blockquote><ul><li>例如<code>typeof</code>操作符噢，由于它有一些无法预知的行为，经常会导致检测数据类型时得不到靠谱的结果。Safari 在对正则表达式应用 typeof 操作符时会返回 function,因此很难判断一个值是否是函数</li><li><code>instanceof</code> 操作符存在全局作用域的情况下，也是问题多多。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> isArray <span class="token operator">=</span> value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span></code></pre><p>以上代码要 true,value 必须是一个数组，而且还必须与 Array 构造函数在同一个全局的作用域中（比如 value 是一个页面中的 iframe 定义的，就会返回 false）</p><blockquote><p>解决以上问题的方案是调用<code>Object</code>的<code>toString</code>方法，都会返回一个<code>[object NativeConstructorName]</code>格式的字符串，每个类在内部都有一个<code>[[class]]</code>属性，这个属性中就指定了上述字符串中构造函数的名。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> isArray <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> isFunction <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> isRegExp <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object RegExp]'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="22-1-2-作用域安全的构造函数"><a href="#22-1-2-作用域安全的构造函数" class="headerlink" title="22.1.2 作用域安全的构造函数"></a>22.1.2 作用域安全的构造函数</h3><blockquote><p>构造函数其实就是一个用 new 操作符调用的函数，当使用 new 调用的时候，构造函数内用到的 this 会指向新创建的对象实例。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">'fe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>当使用 new 操作符调用时会创建一个新的 Person 对象，但是问题就是出现在没有使用 new 的时候，由于 this 是在运行时绑定的，所以直接调用 Person 会映射到全局的 window 对象</strong></p><p>作用域安全的构造函数在进行任何更改之前，首先确认 this 对象是正确类型的实例，如果不是，那么会创建新的实例并返回。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hahaha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>以上代码实现了不管是否使用 new 操作符去调用 Person 函数都会生成一个新的 Person 实例</strong></p><p>但是以上模式也有缺陷，比如在使用构造函数的窃取模式来实现继承并且不用原型链，那么这个继承可能会遭到破坏。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>showName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  A<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b1<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>在这段代码中 A 函数的构造函数是安全的，然而 B 函数却不是，新创建一个 B 函数的实例后，应该通过 A.call 来继承 A 的 name 属性，但是由于 A 函数的作用域是安全的，this 并不是 A 函数的实例，所以会创建一个新的 A 对象，B 中的 this 并没有得到增长，同时 A.call(name)返回的值也没有用到，所以 b1 中就不会有 name 属性。</p><p>但是构造函数窃取模式使用原型链或者寄生组合模式就可以解决这个问题。举个例子。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>showInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  A<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>showAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>B<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// liusixin</span></code></pre><h3 id="22-1-3-惰性载入函数"><a href="#22-1-3-惰性载入函数" class="headerlink" title="22.1.3 惰性载入函数"></a>22.1.3 惰性载入函数</h3><h3 id="22-1-4-函数绑定"><a href="#22-1-4-函数绑定" class="headerlink" title="22.1.4 函数绑定"></a>22.1.4 函数绑定</h3><h3 id="22-1-5-函数柯里化"><a href="#22-1-5-函数柯里化" class="headerlink" title="22.1.5 函数柯里化"></a>22.1.5 函数柯里化</h3><h2 id="22-2-防止篡改对象"><a href="#22-2-防止篡改对象" class="headerlink" title="22.2 防止篡改对象"></a>22.2 防止篡改对象</h2><h1 id="第-23-章-离线应用与客户端存储"><a href="#第-23-章-离线应用与客户端存储" class="headerlink" title="第 23 章 - 离线应用与客户端存储"></a>第 23 章 - 离线应用与客户端存储</h1><p><strong>学习目标</strong></p><ul><li>进行离线检测</li><li>使用离线缓存</li><li>在浏览器中保存数据</li></ul><h2 id="23-3-数据存储"><a href="#23-3-数据存储" class="headerlink" title="23.3 数据存储"></a>23.3 数据存储</h2><blockquote><p>随着 Web 应用程序的出现，也产生了对于能够直接在客户端上存储用户信息能力的要求。属于某个特定用户的信息应该存在该用户的机器上，无论是登录信息还是偏好设置或者其他数据。</p></blockquote><blockquote><p>解决该问题的第一个方案是以 cookie 的形式出现的，cookie 只是在客户端存储数据的其中一种选项。</p></blockquote><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>HTTP Cookie 通常叫做 cookie，最初是在客户端用于存储会话信息的。该标准要求服务器对任意的 http 请求发送 Set-Cookie HTTP 头作为响应的一部分，其中包含会话信息，例如这种服务器响应的头可能如下。</p></blockquote><p><strong>cookie 以名值对存在，并且名称和值都必须是 URL 编码的，浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加 Cookie HTTP 头将信息发送回服务器。</strong></p><h1 id="第-25-章-新兴的-API"><a href="#第-25-章-新兴的-API" class="headerlink" title="第 25 章 - 新兴的 API"></a>第 25 章 - 新兴的 API</h1><p><strong>学习目标</strong></p><ul><li>创建平滑的动画</li><li>操作文件</li><li>使用 Web Workers 在后台执行 JavaScript</li></ul><h2 id="25-4-File-API"><a href="#25-4-File-API" class="headerlink" title="25.4 File API"></a>25.4 File API</h2><blockquote><p>不能直接访问用户计算机中的文件，一直都是 web 应用开发中的一大障碍，2000 年以前，处理文件唯一的方式就是在表单中加入字段，仅此而已，File API 的宗旨是为 Web 开发人员开提供一种安全的的方式，以便在客户端访问用户计算机中的文件，并更好地对这些文件进行操作。</p></blockquote><p>File API 在表单的文件字段的基础上又添加了一些直接访问文件信息的接口，HTML5 中在 DOM 中为文件输入元素添加了一个 files 集合，在通过文件输入字段选择了一或多个文件时，files 集合中将包含一组 File 对象，每个 File 对象对应一个文件，每个 File 对象下面都有下列的只读属性。</p><ul><li><code>name</code>: 本地文件系统中的文件名</li><li><code>size</code>: 文件的字节大小</li><li><code>type</code>: 字符串，文件的 MIME 类型</li><li><code>lastModifiedDate</code>: 字符串，文件上一次被修改的时间（只有 Chrome 实现了这个属性）</li></ul><p><strong>文件信息获取示例</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>files<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $files <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.files'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$files<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'change'</span><span class="token punctuation">,</span>  e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> target<span class="token punctuation">,</span> files<span class="token punctuation">;</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>    target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>    files <span class="token operator">=</span> target<span class="token punctuation">.</span>files<span class="token punctuation">;</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="25-4-1-FileReader-类型"><a href="#25-4-1-FileReader-类型" class="headerlink" title="25.4.1 FileReader 类型"></a>25.4.1 FileReader 类型</h3><blockquote><p>FileReader 类型实现的是一种异步文件读取机制，可以把 FileReader 想象成 XMLHttpRequest，区别只是它读取的是文件系统，而不是远程服务器。问了读取文件中的数据，FileReader 提供了以下几个方法。</p></blockquote><ul><li><code>readAsText(file, encoding)</code>： 以纯文本形式读取文件，将读取到的文本保存在 result 属性中</li><li><code>readAsDataURL(file)</code>: 读取文件并将文件以数据 URI 的形式保存在 result 属性中。</li><li><code>readAsBinaryString(file)</code>: 读取文件并将一个字符串保存在 result 属性中，字符串中的每个字符表示一个字节。</li><li><code>readArrayBuffer(file)</code>: 读取文件并将一个包含文件内容的 ArrayBuffer 保存在 result 属性中。</li></ul><p><strong>由于读取文件的过程是异步的，因为 FileReader 也提供了几个事件，其中最有用的三个事件是<code>progress</code>，<code>error</code>，<code>load</code>，分别表示是否又读取了数据，是否发生错误以及是否已经读完了整个文件</strong></p><p>每隔 50ms 左右，就会触发一次<code>progress</code>事件，通过事件对象可以获得与 XHR 的 progress 事件相同的信息。<code>lengthComputed</code>,<code>loaded</code>,<code>total</code>,另外尽管可能没有包含全部数据但是每次 progress 事件中都可以通过 FileReader 的 result 属性读取到文件内容。</p><p>由于种种原因无法读取文件，就会触发 error 事件，触发 error 事件时，相关的信息将会保存到 FileReader 的 error 属性中，这个属性中将保存一个对象，该对象只有一个属性 code，即错误码，这个错误码是</p><ul><li><code>1</code>：表示未找到文件</li><li><code>2</code>：表示安全性错误</li><li><code>3</code>：表示读取中断</li><li><code>4</code>：表示文件不可读</li><li><code>5</code>：表示编码错误</li></ul><p>件成功加载后会触发 load 事件，如果发生了 error 事件就不会触发 load 事件。</p><h3 id="25-4-2-读取部分内容"><a href="#25-4-2-读取部分内容" class="headerlink" title="25.4.2 读取部分内容"></a>25.4.2 读取部分内容</h3><blockquote><p>有时候，我们只想读取文件的一部分内容而不是全部内容，为此，File 对象还支持一个 slice 方法，这个方法在 Firefox 中叫 mozSlice，在 chrome 中叫做 webkitSlice，其接受两个参数，起始字节，以及要读取的字节数。这个方法返回一个 Blob 的实例，Blob 是 File 类型的父类型。下面是一个兼容的方法</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">blobSlice</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> startByte<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>blob<span class="token punctuation">.</span>slice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startByte<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>blob<span class="token punctuation">.</span>webkitSlice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">webkitSlice</span><span class="token punctuation">(</span>startByte<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>blob<span class="token punctuation">.</span>mozSlice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> blob<span class="token punctuation">.</span><span class="token function">mozSlice</span><span class="token punctuation">(</span>startByte<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="25-4-3-对象-URL"><a href="#25-4-3-对象-URL" class="headerlink" title="25.4.3 对象 URL"></a>25.4.3 对象 URL</h3><h3 id="25-4-4-读取拖放的文件"><a href="#25-4-4-读取拖放的文件" class="headerlink" title="25.4.4 读取拖放的文件"></a>25.4.4 读取拖放的文件</h3><blockquote><p>围绕文件信息，结合使用的 HTML5 API 和文件 API，可以做出很赞的东西来。与拖放一张图片或者一个链接类似，从桌面上把文件拖放到浏览器中也会触发 drop 事件，而且可以在 event.dataTransfer.files 中读取到被放置的文件，当然此时他是一个 File 对象，与通过文件输入字段取得的 File 对象一样</p></blockquote><h2 id="25-6-Web-Workers"><a href="#25-6-Web-Workers" class="headerlink" title="25.6 Web Workers"></a>25.6 Web Workers</h2><blockquote><p>随着 Web 应用复杂性的与日俱增，越来越复杂的计算在所难免，长时间运行的 JavaScript 进行会导致浏览器冻结用户界面，让人感觉屏幕“冻结”了，Web Workers 规范通过让 JavaScript 在后台运行解决了这个问题，浏览器实现 Web Worker 的方式有很多种，可以使用线程，后台进程或者运行在其他处理器上的进程，等等。怎么实现细节其实没有那么重要，重要的是开发人员现在可以放心地运行 JavaScript 而不必担心影响用户体验了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第-21-章-Ajax-与-Comet&quot;&gt;&lt;a href=&quot;#第-21-章-Ajax-与-Comet&quot; class=&quot;headerlink&quot; title=&quot;第 21 章 - Ajax 与 Comet&quot;&gt;&lt;/a&gt;第 21 章 - Ajax 与 Comet&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Javascript高级程序设计系列" scheme="http://coder.liusixin.cn/categories/Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript高级程序设计" scheme="http://coder.liusixin.cn/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高程笔记 （15 - 20章）</title>
    <link href="http://coder.liusixin.cn/posts/afdba259/"/>
    <id>http://coder.liusixin.cn/posts/afdba259/</id>
    <published>2017-04-21T13:42:00.000Z</published>
    <updated>2017-04-21T13:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-15-章-使用-canvas-绘图"><a href="#第-15-章-使用-canvas-绘图" class="headerlink" title="第 15 章 - 使用 canvas 绘图"></a>第 15 章 - 使用 canvas 绘图</h1><p><strong>学习目标</strong></p><ul><li>理解元素</li><li>绘制简单的 2d 图形</li><li>使用 WebGL 绘制 3D 图形</li></ul><h2 id="15-1-基本用法"><a href="#15-1-基本用法" class="headerlink" title="15.1 基本用法"></a>15.1 基本用法</h2><blockquote><p>使用 canvas 元素，需要先设置其 width 和 height，指定可以绘图的大小，出现在开始和结束标签中的内容是后备信息，如果浏览器不支持 canvas 元素就会显示这些信息。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>drawing<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><p>与其他元素一样，canvas 对象的 DOM 元素也有 width 和 height 属性，可以随意修改，而且也可以通过 css 为该元素添加样式(与直接在 html 指定 width 和 height 有什么不同呢)，如果不添加任何样式或者不绘制图形，在页面中是看不到该元素的。</p><p>要在这块画布上绘图，需要取得绘图上下文。并通过<code>getContext()</code>方法传入上下文的名字 2d。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drawing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果确定支持canvas元素</span><span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> ctx <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如上代码，在使用<code>canvas</code>元素之前需要先检测<code>getContext</code>方法是否存在，在有些浏览器中会 HTML 规范之外的元素创建默认的 HTML 元素对象，在这种情况中，虽然保存着一个有效的元素引用，也检测不到<code>getContext</code>方法。</p><p>使用<code>toDataURL</code>方法，可以导出在 canvas 元素上绘制的图像，这个方法接收一个参数，即图像的<code>MIME</code>类型格式，而且适合用于创建图像的任何上下文，比如，要取得画布中的一幅<code>PNG</code>格式的图像，可以使用以下代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drawing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> imgURL <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  image<span class="token punctuation">.</span>src <span class="token operator">=</span> imgURL<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意： 如果绘制到画布上的图像源自不同的域，toDataURL 方法会抛出错误</strong></p><h2 id="15-2-2d-上下文"><a href="#15-2-2d-上下文" class="headerlink" title="15.2 2d 上下文"></a>15.2 2d 上下文</h2><blockquote><p>使用 2D 绘图上下文提供的方法，可以绘制简单的 2D 图形，比如矩形，弧线和路径。2D 上下文的坐标开始于 canvas 元素的左上角，原点是(0, 0)，所有的坐标值都基于这个原点计算，x 值越大表示跃靠右，y 值越大表示越靠下，默认情况下，width 和 height 表示水平和垂直方向上可用的像素数目。</p></blockquote><h3 id="15-2-1-填充和描边"><a href="#15-2-1-填充和描边" class="headerlink" title="15.2.1 填充和描边"></a>15.2.1 填充和描边</h3><blockquote><p>2D 上下文的两种基本绘图操作是填充和描边，填充即使用指定的样式（颜色，渐变，或图像）填充图形，描边就是只在图形的边缘画线。大多数 2D 上下文操作都会细分为填充和描边两个操作，而操作的结果取决于两个属性，fillStyle 和 strokeStyle</p></blockquote><p><strong>需要注意的是这两个属性的值都可以是字符串，渐变对象或模式对象，而且默认的值都是“#000000”，如果为他们指定表示颜色的字符串，可以使用 css 中指定颜色值的任何格式，包括颜色名，十六进制码，rgb，rgba，hsl 和 hsla</strong></p><p>下面是一个简单的例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drawing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ctx <span class="token operator">=</span> $drawing<span class="token punctuation">.</span>getContext <span class="token operator">&amp;&amp;</span> $drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#0000ff'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所有涉及描边和填充的操作都将使用这两个样式，直至重新设置这两个值，这两个属性的值也可以是渐变对象和模式对象。</p><h3 id="15-2-2-绘制矩形"><a href="#15-2-2-绘制矩形" class="headerlink" title="15.2.2 绘制矩形"></a>15.2.2 绘制矩形</h3><blockquote><p>矩形是唯一一种可以直接到 2D 的上下文中绘制的形状，与矩形有关的方法包括<code>fillRect</code>,<code>strokeRect</code>,<code>clearRect</code>这三个方法都可以接受 4 个参数，矩形的 x 坐标，矩形的 y 坐标，矩形的宽度和句型的高度。这些参数的单位都是像素。</p></blockquote><p><code>fillRect</code>方法在画布上绘制的矩形会填充指定的颜色，填充的颜色通过<code>fillStyle</code>属性指定。比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drawing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ctx <span class="token operator">=</span> $drawing<span class="token punctuation">.</span>getContext <span class="token operator">&amp;&amp;</span> $drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 绘制红色的矩形</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#ff0000'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 绘制半透明的矩形</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'rgba(0, 0, 255, 0.5)'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码先将 fillStyle 设置为红色，然后从（10， 10）处开始绘制矩形，矩形的宽度和高度均为 50 像素，然后通过 rgba 格式将 fillStyle 设置为半透明的颜色，在第一个矩形上面绘制的第二矩形，结果就是可以透过蓝色的矩形看到红色的矩形。</p><p><strong>strokeRect</strong></p><p>strokeRect 方法在画布上绘制的矩形会使用指定的颜色描边，描边的颜色通过 strokeStyle 指定。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drawing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ctx <span class="token operator">=</span> $drawing<span class="token punctuation">.</span>getContext <span class="token operator">&amp;&amp;</span> $drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 绘制红色的矩形</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#ff0000'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 绘制半透明的矩形</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'rgba(0, 0, 255, 0.5)'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码绘制了两个重叠的矩形，不过这两个矩形都只有框线，内部没有填充颜色。</p><h3 id="15-2-3-绘制路径"><a href="#15-2-3-绘制路径" class="headerlink" title="15.2.3 绘制路径"></a>15.2.3 绘制路径</h3><blockquote><p>2D 绘制上下文支持很多在画布上绘制路径的方法，通过路径可以创造出复杂的形状和线条。要绘制路径，首先必须调用<code>beginPath()</code>方法，表示要开始绘制新的路径，然后再通过调用以下方法来实际地绘制路径。</p></blockquote><ul><li><code>arc(x, y, radius, startAngle, endAngle, counterclockwise)</code>： 以(x, y)为圆心绘制一条弧线，弧线的半径为 radius，起始角度和结束角度（用弧度表示）分别为<code>startAngle</code>和<code>endAngle</code>，最后一个参数表示是否按照逆时针方向计算，值为 false 表示按顺时针计算。</li><li><code>arcTo(x1, y1, x2, y2, radius)</code>：从上一点开始绘制一条弧线，到(x2, y2)并且以给定的半径 radius 穿过(x1, y1)</li><li><code>bezierCurveTo(c1x, c1y, c2x, c2y, x, y)</code>： 从上一点开始绘制一条曲线，到(x, y)位置，并且以（c1x, c1y）和（c2x, c2y）为控制点。</li><li><code>lineTo(x, y)</code>: 从上一点开始绘制一条直线，直到(x, y)为止。</li><li><code>moveTo(x, y)</code>: 将绘图游标移动到(x, y)，不画线。</li><li><code>quadraticCurveTo(cx, cy, x, y)</code>: 从上一点开始绘制一条二次曲线，到(x, y)为止。并且以(cx, cy)为控制点。</li><li><code>rect(c, y, width, height)</code>, 从点(x, y)开始绘制一个矩形，宽度和高度由 width 和 height 指定，这个方法绘制的是矩形路径，而不是<code>strokeRect</code>和<code>fillRect</code>所绘制的独立矩形形状。</li></ul><p>创立了路径后，接下来有几种可能的选择，如果要绘制一条连接到起点的线条，可以调用<code>closePath()</code>,如果路径已经完成，你想用<code>fillStyle</code>填充他，可以调用<code>fill()</code>,另外，还可以调用<code>stroke()</code>方法对路径描边，描边使用的是<code>strokeStyle</code>，最后还可以调用<code>clip</code>，这个方法可以在路径上创建一个剪切区域。</p><p><strong>接下来我们要绘制一个不带数字的时钟表盘。</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drawing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ctx <span class="token operator">=</span> $drawing<span class="token punctuation">.</span>getContext <span class="token operator">&amp;&amp;</span> $drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 防止画出多余的线</span>  ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="15-2-4-绘制文本"><a href="#15-2-4-绘制文本" class="headerlink" title="15.2.4 绘制文本"></a>15.2.4 绘制文本</h3><blockquote><p>2d 绘图上下文也提供了绘制文本的方法，绘制文本主要有两个方法：<code>fillText()</code>和<code>strokeText()</code>。这两个方法都可以接受 4 个参数，要绘制的文本字符串，x 坐标，y 坐标和可选的最大像素宽度。而且这两个方法都以下列 3 个属性为基础。</p></blockquote><ul><li><code>font</code>: 表示文本样式，大小，以及字体，用 css 中指定的字体格式来指定例如： <code>&quot;10px Arial&quot;</code></li><li><code>textAlign</code>: 表示文本对齐方式，可能的值有<code>“start”</code>， <code>“end”</code>，<code>“left”</code>，<code>“right”</code>， <code>“center”</code>，建议使用<code>“start”</code>， <code>“end”</code>，不适用<code>“left”</code>，<code>“right”</code>，因为前者的意思更稳妥，能同时适合从左到右，和从右到左的语言。</li><li><code>textBaseline</code>： 表示文本的基线，可能的值有<code>“top”</code>， <code>“hanging”</code>， <code>“middle”</code>， <code>“alphabetic”</code>， <code>“ideographic”</code>，<code>“bottom”</code></li></ul><p>这几个属性都有默认值，因此没有必要每次使用它们都重新设置一遍值，<code>fillText()</code>方法使用<code>fillStyle</code>属性绘制文本，<code>strokeText</code>使用<code>strokeStyle</code>属性为文本描边，相对来说，还是使用<code>fillText</code>的时候更多，因为该方法模仿了在网页中正常显示文本。</p><p>接下来我们接着上面的例子绘制数字。</p><pre class=" language-js"><code class="language-js">ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">'bold 14px Arial'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">'middle'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'start'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'end'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：将<code>textAlign</code>设置为<code>“center”</code>，把<code>textBaseline</code>设置为<code>“middle”</code>，所以坐标为(100, 20)表示的是文本水平和垂直重点的坐标，如果将<code>textAlign</code>设置为<code>“start”</code>，则 x 坐标表示的是文本左端的位置（从左到右的语言），设置为<code>“end”</code>，则 x 坐标表示的是文本右端的位置.</p><p><strong>measureText</strong></p><p>当需要将文本控制在某一区域中的时候，2D 上下文提供了辅助确定文本大小的方法<code>measureText()</code>,这个方法接收一个参数，即要回执的文本，返回一个<code>textMetrics</code>对象，返回的对象只有一个<code>width</code>属性，并且该方法是利用<code>font</code>，<code>textAlign</code>和<code>textBaseline</code>的当前值计算指定的文本的大小。比如，假设你想在一个 140 像素宽的矩形区域中绘制文本，Hello world！下面的代码从 100 像素的字体大小开始递减，最终会找到合适的字体大小。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fontSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> fontStr <span class="token operator">=</span> <span class="token string">'Hello world'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'start'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">'middle'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fontSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px Arial`</span></span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>fontStr<span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fontSize<span class="token operator">--</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fontSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px Arial`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>fontStr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Font size is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fontSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="15-2-5-变换"><a href="#15-2-5-变换" class="headerlink" title="15.2.5 变换"></a>15.2.5 变换</h3><blockquote><p>省略…</p></blockquote><h1 id="第-16-章-HTML5-脚本编程"><a href="#第-16-章-HTML5-脚本编程" class="headerlink" title="第 16 章 - HTML5 脚本编程"></a>第 16 章 - HTML5 脚本编程</h1><p><strong>学习目标</strong></p><ul><li>使用跨文档消息传递</li><li>拖放 API</li><li>音频与视频</li></ul><h2 id="16-1-跨文档消息传递"><a href="#16-1-跨文档消息传递" class="headerlink" title="16.1 跨文档消息传递"></a>16.1 跨文档消息传递</h2><blockquote><p>跨文档消息传送（cross-document-messaging），有时候简称为 XDM，指的是在来自不同域的页面间传递消息。例如<code>www.wrox.com</code>域中的页面与位于一个内嵌框架中的<code>p2p.wrox.com</code>域中的页面通信。</p></blockquote><p>XDM 的核心是<code>postMessage</code>方法，在 HTML5 中除了 XDM 部分之外的其他部分也会提到这个方法名，但都是为了同一个目的：向另一个地方传递数据，对于 XDM 而言，“另一个地方”指的是包含在当前页面中的<code>&lt;iframe&gt;</code>或者由当前页面弹出的窗口</p><p><code>postMessage</code>方法接收两个参数，一条消息和一个表示消息接收方来自哪个域的字符串。<strong>第二个参数对保障安全通信非常重要，可以防止浏览器把消息发送到不安全的地方</strong>。来看下面的例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> iframeWindow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>iframeWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'A secret'</span><span class="token punctuation">,</span> <span class="token string">'http://www.wrox.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果<code>postMessage</code>的第二个参数是<code>&#39;*&#39;</code>，则可以把消息发送给来自任何域的文档，但是我们不推荐这样做。</p><p>接收到 XDM 消息的时候会触发 window 对象的<code>message</code>事件，这个事件是以<strong>异步</strong>形式触发的，因此从发送消息到接收消息（触发窗口的<code>message</code>事件）可能要经过一段时间的延迟。触发<code>message</code>事件之后，传递给<code>onmessage</code>处理程序的事件包含以下三方面的信息。</p><ul><li><code>data</code>：作为 postMessage 第一个参数传入的字符串参数</li><li><code>origin</code>：发送消息的文档所在的域，例如<code>&quot;http://www.wrox.com&quot;</code></li><li><code>source</code>: 发送消息的文档的 window 对象的代理，这个代理对象主要用于发送一条消息的窗口中调用 postMessage 方法，如果发送消息的窗口来自同一个域，那么这个对象就是 window。</li></ul><p><strong>特别注意</strong></p><ul><li><code>event.source</code>大多数情况下只是 window 对象的代理，并非是实际的 window 对象，换句话说，不能通过这个代理对象拿到 window 对象的其他任何信息，记住，只通过这个代理调用<code>postMessage</code>就好，这个方法永远存在。</li><li>XDM 还有一些怪异之处，首先就是<code>postMessage</code>的第一个参数最早是作为<code>“永远都是字符串”</code>来实现的，但是后来这个参数定义改了，改成允许传入任何数据结构，可是并非所有的浏览器都实现了这一变化，为了保险起见，使用<code>postMessage</code>时，最好还是只传字符串，如果要传结构化后的数据，最佳选择是现在要传入的数据上调用<code>JSON.stringfy</code>,通过<code>postMessage</code>传入得到的字符串，然后再在<code>onmessage</code>事件处理程序中调用<code>JSON.parse</code></li></ul><h2 id="16-2-原生拖放"><a href="#16-2-原生拖放" class="headerlink" title="16.2 　原生拖放"></a>16.2 　原生拖放</h2><blockquote><p>HTML5 以 IE 的实例为基础制定了拖放规范。Firefox 3.5、Safari 3+和 Chrome 也根据 HTML5 规范实现了原生拖放功能。</p></blockquote><h3 id="16-2-1-拖放事件"><a href="#16-2-1-拖放事件" class="headerlink" title="16.2.1 拖放事件"></a>16.2.1 拖放事件</h3><blockquote><p>通过拖放事件，可以控制拖放相关的各个方面。其中最关键的地方在于确定哪里发生了拖放事件，有些事件是在被拖动的元素上触发的，而有些事件是在放置目标上触发的。拖动某元素时，将依次触发下列事件：</p></blockquote><ul><li><code>dragstart</code></li><li><code>drag</code></li><li><code>dragend</code></li></ul><p>按下鼠标键并开始移动鼠标时，会在被拖放的元素上触发<code>dragstart</code>事件。拖动开始时，可以通过<code>ondragstart</code>事件处理程序来运行 JavaScript 代码。</p><p>触发<code>dragstart</code>事件后，随即会触发<code>drag</code>事件，而且在元素被拖动期间会持续触发该事件。这个事件与<code>mousemove</code>事件相似。当拖动停止时（无论是把元素放到了有效的放置目标，还是放到了无效的放置目标上），会触发<code>dragend</code>事件。</p><p><strong>当某个元素被拖动到一个有效的放置目标上时，下列事件会依次发生：</strong></p><ul><li>dragenter</li><li>dragover</li><li>dragleave 或 drop</li></ul><p>元素被拖动到放置目标上，会触发<code>dragenter</code>事件（类似于<code>mouseover</code>事件）。其后是<code>dragover</code>事件，如果元素被拖出了放置目标，<code>dragover</code>事件不再发生，但会触发<code>dragleave</code>事件（类似于<code>mouseout</code>事件）。如果元素被放到了放置目标中，则会触发<code>drop</code>事件而不是<code>dragleave</code>事件。上述三个事件的目标都是作为放置目标的元素。</p><h3 id="16-2-2-自定义放置目标"><a href="#16-2-2-自定义放置目标" class="headerlink" title="16.2.2 　自定义放置目标"></a>16.2.2 　自定义放置目标</h3><p>如果拖动元素经过不允许放置的元素，无论用户如何操作，都不会发生 drop 事件。不过，你可以把任何元素变成有效的放置目标，方法是重写<code>dragenter</code>和<code>dragover</code>事件的默认行为。例如，假设有一个 ID 为”droptarget”的<div>元素，可以用如下代码将它变成一个放置目标。</div></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> droptarget <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'droptarget'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>droptarget<span class="token punctuation">,</span> <span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  EventUtil<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>droptarget<span class="token punctuation">,</span> <span class="token string">'dragenter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  EventUtil<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>以上代码执行后，你就会发现当拖动着元素移动到放置目标上时，光标变成了允许放置的符号。当然，释放鼠标也会触发 drop 事件。</p></blockquote><h3 id="16-2-3-dataTransfer-对象"><a href="#16-2-3-dataTransfer-对象" class="headerlink" title="16.2.3 　 dataTransfer 对象"></a>16.2.3 　 dataTransfer 对象</h3><blockquote><p>它是事件对象的一个属性，用于从被拖动元素向放置目标传递字符串格式的数据。在事件处理程序中，可以使用这个对象的属性和方法来完善拖放功能。</p></blockquote><p><strong>dataTransfer 对象有两个主要方法：</strong></p><ul><li><code>getData()</code> - 取得由 setData()保存的值</li><li><code>setData()</code> - 方法的第一个参数，也是<code>getData()</code>方法唯一的一个参数，是一个字符串，表示保存的数据类型，取值为”text”或”URL”</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//设置和接收文本数据</span>event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'some text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置和接收URL</span>event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'URL'</span><span class="token punctuation">,</span> <span class="token string">'http://www.wrox.com/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'URL'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>HTML5 支持<code>&quot;text&quot;</code>和<code>&quot;URL&quot;</code>，但这两种类型会被映射为<code>&quot;text/plain&quot;</code>和<code>&quot;text/uri-list&quot;</code>。</p></blockquote><h3 id="16-2-4-dropEffect-与-effectAllowed"><a href="#16-2-4-dropEffect-与-effectAllowed" class="headerlink" title="16.2.4 　 dropEffect 与 effectAllowed"></a>16.2.4 　 dropEffect 与 effectAllowed</h3><blockquote><p>利用 dataTransfer 对象，通过它来确定被拖动的元素以及作为放置目标的元素能够接收什么操作。为此，需要访问<code>dataTransfer</code>对象的两个属性：<code>dropEffect</code>和<code>effectAllowed</code>。</p></blockquote><p><strong>dropEffect</strong></p><ul><li><code>&quot;none&quot;</code>：不能把拖动的元素放在这里。这是除文本框之外所有元素的默认值。</li><li><code>&quot;move&quot;</code>：应该把拖动的元素移动到放置目标。</li><li><code>&quot;copy&quot;</code>：应该把拖动的元素复制到放置目标。</li><li><code>&quot;link&quot;</code>：表示放置目标会打开拖动的元素（但拖动的元素必须是一个链接，有 URL）。</li></ul><p>要使用 dropEffect 属性，必须在<code>ondragenter</code>事件处理程序中针对放置目标来设置它。</p><h2 id="16-3-媒体元素"><a href="#16-3-媒体元素" class="headerlink" title="16.3 　媒体元素"></a>16.3 　媒体元素</h2><blockquote><p>HTML5 新增了两个与媒体相关的标签，让开发人员不必依赖任何插件就能在网页中嵌入跨浏览器的音频和视频内容。这两个标签就是<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 嵌入视频 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conference.mpg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myVideo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Video player not available.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 嵌入音频 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>song.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAudio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Audio player not available.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><p>使用这两个元素时，至少要在标签中包含<code>src</code>属性，指向要加载的媒体文件。还可以设置 width 和 height 属性以指定视频播放器的大小，而为<code>poster</code>属性指定图像的 URI 可以在加载视频内容期间显示一幅图像。另外，如果标签中有<code>controls</code>属性，则意味着浏览器应该显示 UI 控件，以便用户直接操作媒体。位于开始和结束标签之间的任何内容都将作为后备内容，在浏览器不支持这两个媒体元素的情况下显示。</p><p>因为并非所有浏览器都支持所有媒体格式，所以可以指定多个不同的媒体来源。为此，不用在标签中指定 src 属性，而是要像下面这样使用一或多个<code>&lt;source&gt;</code>元素。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 嵌入视频 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myVideo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conference.webm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/webm; codecs<span class="token punctuation">=</span><span class="token punctuation">'</span>vp8, vorbis<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conference.ogv<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg; codecs<span class="token punctuation">=</span><span class="token punctuation">'</span>theora, vorbis<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>conference.mpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Video player not available.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 嵌入音频 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAudio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>song.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>song.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Audio player not available.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><h3 id="16-3-1-属性"><a href="#16-3-1-属性" class="headerlink" title="16.3.1 　属性"></a>16.3.1 　属性</h3><table><thead><tr><th style="text-align:center">属　　性</th><th style="text-align:center">数据类型</th><th style="text-align:center">说　　明</th></tr></thead><tbody><tr><td style="text-align:center">autoplay</td><td style="text-align:center">布尔值</td><td style="text-align:center">取得或设置 autoplay 标志</td></tr><tr><td style="text-align:center">buffered</td><td style="text-align:center">时间范围</td><td style="text-align:center">表示已下载的缓冲的时间范围的对象</td></tr><tr><td style="text-align:center">bufferedBytes</td><td style="text-align:center">字节范围</td><td style="text-align:center">表示已下载的缓冲的字节范围的对象</td></tr><tr><td style="text-align:center">bufferingRate</td><td style="text-align:center">整数</td><td style="text-align:center">下载过程中每秒钟平均接收到的位数</td></tr><tr><td style="text-align:center">bufferingThrottled</td><td style="text-align:center">布尔值</td><td style="text-align:center">表示浏览器是否对缓冲进行了节流</td></tr><tr><td style="text-align:center">controls</td><td style="text-align:center">布尔值</td><td style="text-align:center">取得或设置 controls 属性，用于显示或隐藏浏览器内置的控件</td></tr><tr><td style="text-align:center">currentLoop</td><td style="text-align:center">整数</td><td style="text-align:center">媒体文件已经循环的次数</td></tr><tr><td style="text-align:center">currentSrc</td><td style="text-align:center">字符串</td><td style="text-align:center">当前播放的媒体文件的 URL</td></tr><tr><td style="text-align:center">currentTime</td><td style="text-align:center">浮点数</td><td style="text-align:center">已经播放的秒数</td></tr><tr><td style="text-align:center">defaultPlaybackRate</td><td style="text-align:center">浮点数</td><td style="text-align:center">取得或设置默认的播放速度。默认值为 1.0 秒</td></tr><tr><td style="text-align:center">duration</td><td style="text-align:center">浮点数</td><td style="text-align:center">媒体的总播放时间（秒数）</td></tr><tr><td style="text-align:center">ended</td><td style="text-align:center">布尔值</td><td style="text-align:center">表示媒体文件是否播放完成</td></tr><tr><td style="text-align:center">loop</td><td style="text-align:center">布尔值</td><td style="text-align:center">取得或设置媒体文件在播放完成后是否再从头开始播放</td></tr><tr><td style="text-align:center">muted</td><td style="text-align:center">布尔值</td><td style="text-align:center">取得或设置媒体文件是否静音</td></tr><tr><td style="text-align:center">networkState</td><td style="text-align:center">整数</td><td style="text-align:center">表示当前媒体的网络连接状态：0 表示空，1 表示正在加载，2 表示正在加载元数据，3 表示已经加载了第一帧，4 表示加载完成</td></tr><tr><td style="text-align:center">paused</td><td style="text-align:center">布尔值</td><td style="text-align:center">表示播放器是否暂停</td></tr><tr><td style="text-align:center">playbackRate</td><td style="text-align:center">浮点数</td><td style="text-align:center">取得或设置当前的播放速度。用户可以改变这个值，让媒体播放速度变快或变慢，这与 defaultPlaybackRate 只能由开发人员修改的 defaultPlaybackRate 不同</td></tr><tr><td style="text-align:center">played</td><td style="text-align:center">时间范围</td><td style="text-align:center">到目前为止已经播放的时间范围</td></tr><tr><td style="text-align:center">readyState</td><td style="text-align:center">整数</td><td style="text-align:center">表示媒体是否已经就绪（可以播放了）。0 表示数据不可用，1 表示可以显示当前帧，2 表示可以开始播放，3 表示媒体可以从头到尾播放</td></tr><tr><td style="text-align:center">seekable</td><td style="text-align:center">时间范围</td><td style="text-align:center">可以搜索的时间范围</td></tr><tr><td style="text-align:center">seeking</td><td style="text-align:center">布尔值</td><td style="text-align:center">表示播放器是否正移动到媒体文件中的新位置</td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">字符串</td><td style="text-align:center">媒体文件的来源。任何时候都可以重写这个属性</td></tr><tr><td style="text-align:center">start</td><td style="text-align:center">浮点数</td><td style="text-align:center">取得或设置媒体文件中开始播放的位置，以秒表示</td></tr><tr><td style="text-align:center">totalBytes</td><td style="text-align:center">整数</td><td style="text-align:center">当前资源所需的总字节数</td></tr><tr><td style="text-align:center">videoHeight</td><td style="text-align:center">整数</td><td style="text-align:center">返回视频（不一定是元素）的高度。只适用于<code>&lt;video&gt;</code></td></tr><tr><td style="text-align:center">videoWidth</td><td style="text-align:center">整数</td><td style="text-align:center">返回视频（不一定是元素）的宽度。只适用于<code>&lt;video&gt;</code></td></tr><tr><td style="text-align:center">volume</td><td style="text-align:center">浮点数</td><td style="text-align:center">取得或设置当前音量，值为 0.0 到 1.0</td></tr></tbody></table><h3 id="16-3-2-事件"><a href="#16-3-2-事件" class="headerlink" title="16.3.2 　事件"></a>16.3.2 　事件</h3><table><thead><tr><th style="text-align:center">事　　件</th><th style="text-align:center">触发时机</th></tr></thead><tbody><tr><td style="text-align:center">abort</td><td style="text-align:center">下载中断</td></tr><tr><td style="text-align:center">canplay</td><td style="text-align:center">可以播放时；readyState 值为 2</td></tr><tr><td style="text-align:center">canplaythrough</td><td style="text-align:center">播放可继续，而且应该不会中断；readyState 值为 3</td></tr><tr><td style="text-align:center">canshowcurrentframe</td><td style="text-align:center">当前帧已经下载完成；readyState 值为 1</td></tr><tr><td style="text-align:center">dataunavailable</td><td style="text-align:center">因为没有数据而不能播放；readyState 值为 0</td></tr><tr><td style="text-align:center">durationchange</td><td style="text-align:center">duration 属性的值改变</td></tr><tr><td style="text-align:center">emptied</td><td style="text-align:center">网络连接关闭</td></tr><tr><td style="text-align:center">empty</td><td style="text-align:center">发生错误阻止了媒体下载</td></tr><tr><td style="text-align:center">ended</td><td style="text-align:center">媒体已播放到末尾，播放停止</td></tr><tr><td style="text-align:center">error</td><td style="text-align:center">下载期间发生网络错误</td></tr><tr><td style="text-align:center">load</td><td style="text-align:center">所有媒体已加载完成。这个事件可能会被废弃，建议使用 canplaythrough</td></tr><tr><td style="text-align:center">loadeddata</td><td style="text-align:center">媒体的第一帧已加载完成</td></tr><tr><td style="text-align:center">loadedmetadata</td><td style="text-align:center">媒体的元数据已加载完成</td></tr><tr><td style="text-align:center">loadstart</td><td style="text-align:center">下载已开始</td></tr><tr><td style="text-align:center">pause</td><td style="text-align:center">播放已暂停</td></tr><tr><td style="text-align:center">play</td><td style="text-align:center">媒体已接收到指令开始播放</td></tr><tr><td style="text-align:center">playing</td><td style="text-align:center">媒体已实际开始播放</td></tr><tr><td style="text-align:center">progress</td><td style="text-align:center">正在下载</td></tr><tr><td style="text-align:center">ratechange</td><td style="text-align:center">播放媒体的速度改变</td></tr><tr><td style="text-align:center">seeked</td><td style="text-align:center">搜索结束</td></tr><tr><td style="text-align:center">seeking</td><td style="text-align:center">正移动到新位置</td></tr><tr><td style="text-align:center">stalled</td><td style="text-align:center">浏览器尝试下载，但未接收到数据</td></tr><tr><td style="text-align:center">timeupdate</td><td style="text-align:center">currentTime 被以不合理或意外的方式更新</td></tr><tr><td style="text-align:center">volumechange</td><td style="text-align:center">volume 属性值或 muted 属性值已改变</td></tr><tr><td style="text-align:center">waiting</td><td style="text-align:center">播放暂停，等待下载更多数据</td></tr></tbody></table><h3 id="16-3-3-自定义媒体播放器"><a href="#16-3-3-自定义媒体播放器" class="headerlink" title="16.3.3 　自定义媒体播放器"></a>16.3.3 　自定义媒体播放器</h3><blockquote><p>使用<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素的<code>play()</code>和<code>pause()</code>方法，可以手工控制媒体文件的播放。组合使用属性、事件和这两个方法，很容易创建一个自定义的媒体播放器，如下面的例子所示。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mediaplayer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie.mov<span class="token punctuation">"</span></span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mymovie.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          Video player not available.      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Play<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>curtime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>duration<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//取得元素的引用</span><span class="token keyword">var</span> player <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'player'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'video-btn'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  curtime <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'curtime'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  duration <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'duration'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新播放时间</span>duration<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> player<span class="token punctuation">.</span>duration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为按钮添加事件处理程序</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>player<span class="token punctuation">.</span>paused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    player<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'Pause'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    player<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'Play'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时更新当前时间</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  curtime<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> player<span class="token punctuation">.</span>currentTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="16-4-历史状态管理"><a href="#16-4-历史状态管理" class="headerlink" title="16.4 　历史状态管理"></a>16.4 　历史状态管理</h2><blockquote><p>HTML5 通过更新 history 对象为管理历史状态提供了方便。</p></blockquote><ul><li><code>hashchange</code></li></ul><p>通过<code>hashchange</code>事件，可以知道 URL 的参数什么时候发生了变化，即什么时候该有所反应。而通过状态管理 API，能够在不加载新页面的情况下改变浏览器的 URL。为此，需要使用<code>history.pushState()</code>方法，该方法可以接收三个参数：<code>状态对象、新状态的标题和可选的相对URL</code>。</p><pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Nicholas' page"</span><span class="token punctuation">,</span> <span class="token string">'nicholas.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>按下“后退”按钮，会触发 window 对象的 popstate 事件 1。popstate 事件的事件对象有一个 state 属性，这个属性就包含着当初以第一个参数传递给<code>pushState()</code>的状态对象。</p><pre class=" language-js"><code class="language-js">EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'popstate'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> state <span class="token operator">=</span> event<span class="token punctuation">.</span>state<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一个页面加载时state为空</span>    <span class="token function">processState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要更新当前状态，可以调用<code>replaceState()</code>，传入的参数与<code>pushState()</code>的前两个参数相同。调用这个方法不会在历史状态栈中创建新状态，只会重写当前状态。</p><pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Greg'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Greg's page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="第-17-章-错误处理与调试"><a href="#第-17-章-错误处理与调试" class="headerlink" title="第 17 章 - 错误处理与调试"></a>第 17 章 - 错误处理与调试</h1><p><strong>学习目标</strong></p><ul><li>理解浏览器报告的错误</li><li>处理错误</li><li>调试 JavaScript 代码</li></ul><h2 id="17-2-错误处理"><a href="#17-2-错误处理" class="headerlink" title="17.2 　错误处理"></a>17.2 　错误处理</h2><h3 id="17-2-1-try-catch-语句"><a href="#17-2-1-try-catch-语句" class="headerlink" title="17.2.1 　 try-catch 语句"></a>17.2.1 　 try-catch 语句</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  window<span class="token punctuation">.</span><span class="token function">someNonexistentFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>finally 子句</strong></p><blockquote><p>finally 子句一经使用，其代码无论如何都会执行。换句话说，try 语句块中的代码全部正常执行，finally 子句会执行；如果因为出错而执行了 catch 语句块，finally 子句照样还会执行。只要代码中包含 finally 子句，则无论 try 或 catch 语句块中包含什么代码——甚至 return 语句，都不会阻止 finally 子句的执行。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">testFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个函数在 try-catch 语句的每一部分都放了一条 return 语句。表面上看，调用这个函数会返回 2，因为返回 2 的 return 语句位于 try 语句块中，而执行该语句又不会出错。可是，由于最后还有一个 finally 子句，结果就会导致该 return 语句被忽略；也就是说，调用这个函数只能返回 0。如果把 finally 子句拿掉，这个函数将返回 2。</p><h1 id="第-20-章-Json"><a href="#第-20-章-Json" class="headerlink" title="第 20 章 - Json"></a>第 20 章 - Json</h1><p><strong>学习目标</strong></p><ul><li>理解 JSON 语法</li><li>解析 JSON</li><li>序列化 JSON</li></ul><blockquote><p>为了解决 XML 过于繁琐、冗长、这个问题，涌现了许多解决方案，JSON 就是其中一种，JSON 是 JavaScript 的一个严格的子集，通过一些模式来表示结构化的数据，需要理解的是它是一种数据格式，而不是一种编程语言。虽然具有相同的语法格式，但是 JSON 并不从属于 JavaScript。很多编程语言都有针对 JSON 的解析器和序列化器。</p></blockquote><h2 id="20-2-解析与序列化"><a href="#20-2-解析与序列化" class="headerlink" title="20.2 　解析与序列化"></a>20.2 　解析与序列化</h2><ul><li><code>stringify()</code></li><li><code>parse()</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Professional JavaScript'</span><span class="token punctuation">,</span>  authors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nicholas C. Zakas'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  year<span class="token punctuation">:</span> <span class="token number">2011</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> jsonText <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="20-2-2-序列化选项"><a href="#20-2-2-序列化选项" class="headerlink" title="20.2.2 　序列化选项"></a>20.2.2 　序列化选项</h3><p><strong>过滤结果</strong></p><p>如果过滤器参数是<strong>数组</strong>，那么 JSON.stringify()的结果中将只包含数组中列出的属性。来看下面的例子。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Professional JavaScript'</span><span class="token punctuation">,</span>  authors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nicholas C. Zakas'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  year<span class="token punctuation">:</span> <span class="token number">2011</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> jsonText <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'edition'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "{"title":"Professional JavaScript","edition":3}"</span></code></pre><p>如果第二个参数是<strong>函数</strong>，行为会稍有不同。传入的函数接收两个参数，属性（键）名和属性值。根据属性（键）名可以知道应该如何处理要序列化的对象中的属性。属性名只能是字符串，而在值并非键值对儿结构的值时，键名可以是空字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Professional JavaScript'</span><span class="token punctuation">,</span>  authors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nicholas C. Zakas'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  year<span class="token punctuation">:</span> <span class="token number">2011</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> jsonText <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'authors'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'year'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token number">5000</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'edition'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "{"title":"Professional JavaScript","authors":"Nicholas C. Zakas","year":5000}"</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第-15-章-使用-canvas-绘图&quot;&gt;&lt;a href=&quot;#第-15-章-使用-canvas-绘图&quot; class=&quot;headerlink&quot; title=&quot;第 15 章 - 使用 canvas 绘图&quot;&gt;&lt;/a&gt;第 15 章 - 使用 canvas 绘图&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Javascript高级程序设计系列" scheme="http://coder.liusixin.cn/categories/Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript高级程序设计" scheme="http://coder.liusixin.cn/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高程笔记 （13 - 14章）</title>
    <link href="http://coder.liusixin.cn/posts/3a262449/"/>
    <id>http://coder.liusixin.cn/posts/3a262449/</id>
    <published>2017-04-20T12:32:59.000Z</published>
    <updated>2017-04-20T12:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-13-章-事件"><a href="#第-13-章-事件" class="headerlink" title="第 13 章 - 事件"></a>第 13 章 - 事件</h1><p><strong>学习目标</strong></p><ul><li>理解事件流</li><li>使用事件处理程序</li><li>不同的事件类型</li></ul><p>JavaScript 与 HTML 之间的交互通过事件实现，事件就是文档或者浏览器窗口中发生的一些特定的交互瞬间。可以使用侦听器（或处理程序）来预订事件，以便事件发生时执行相应的代码，这种在传统软件工程中称为观察员模式，支持页面的行为与页面的外观之间的松散耦合</p><h2 id="13-1-事件流"><a href="#13-1-事件流" class="headerlink" title="13.1 事件流"></a>13.1 事件流</h2><blockquote><p>事件流描述的从页面接收事件的顺序，IE 的事件是冒泡流，Netscape 的事件流是事件捕获流。</p></blockquote><h3 id="13-1-1-事件冒泡"><a href="#13-1-1-事件冒泡" class="headerlink" title="13.1.1 事件冒泡"></a>13.1.1 事件冒泡</h3><blockquote><p>IE 的事件流叫做事件冒泡，也就是事件由最具体的元素（文档中嵌套最深的那个节点）接收，然后逐级向上传播到较为不具体的节点。</p></blockquote><p><strong>举例</strong></p><pre class=" language-HTML"><code class="language-HTML"><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <meta http-equiv="X-UA-Compatible" content="ie=edge">  <title>Document</title></head><body>  <div></div></body></html></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f515132303138303132302d3230353735374032782e706e67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所有的现代浏览器都支持事件冒泡，但是具体实现上还有一些差别，IE5.5 更在版本中的事件冒泡会跳过 html 元素。IE9，chrome 和 safari 则将事件一直冒泡到 window 对象.</p><h3 id="13-1-2-事件捕获"><a href="#13-1-2-事件捕获" class="headerlink" title="13.1.2 事件捕获"></a>13.1.2 事件捕获</h3><p>Netscape Communicator 团队提出的另一种事件流叫做事件捕获，事件捕获的思想是不太具体的节点应该更早接收到事件，事件捕获的用于在事件到达预定目标之前捕获他。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f515132303138303132302d3231313632344032782e706e67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>虽然事件捕获是 Netscape Communicator 唯一支持的事件流模型，但是 IE9、safari 等浏览器都支持这种事件模型，规范要求事件应该从<code>document</code>对象开始传播，但是这些浏览器都是从<code>window</code>开始传播。</p><h3 id="13-1-3-DOM-事件流"><a href="#13-1-3-DOM-事件流" class="headerlink" title="13.1.3 DOM 事件流"></a>13.1.3 DOM 事件流</h3><blockquote><p>“DOM2 级事件” 规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和冒泡阶段。首先发生的是事件捕获，为截获事件提供了机会，然后是实际的目标接收到事件，最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p></blockquote><h3 id="13-2-事件处理程序"><a href="#13-2-事件处理程序" class="headerlink" title="13.2 事件处理程序"></a>13.2 事件处理程序</h3><blockquote><p>事件就是用户或浏览器自身执行的某种动作，诸如<code>click</code>、<code>load</code>和<code>mouseover</code>，都是事件的名称，响应某个事件的函数叫做事件处理程序（或事件监听器）</p></blockquote><p><strong>为事件指定事件处理程序的方式有很多种，如下</strong></p><ul><li><strong>HTML 事件处理程序</strong><blockquote><p>元素所支持的每种事件，都可以使用一个与事件同名的<code>HTML</code>特性来指定，该特性的值是能够执行的<code>JavaScript</code>代码，例如</p></blockquote></li></ul><pre class=" language-HTML"><code class="language-HTML"><div class="box" onclick="console.log(1)"></div></code></pre><p>当然也可以调用在页面中其他地方定义的脚本,事件处理程序中的代码在执行时，<strong>有权访问全局作用域中的任何代码。</strong></p><pre class=" language-HTML"><code class="language-HTML"><script>  let showMsg = () => {    console.log('hello world')  }</script><div class="box" onclick="showMsg()"></div></code></pre><p><strong>可以通过 event 变量，直接访问事件对象，不用自己定义，也不用从函数的参数列表读取</strong></p><blockquote><p>在这个函数中 this 等于事件的目标元素</p></blockquote><pre class=" language-HTML"><code class="language-HTML"><script>  let showMsg = function (val, e) {    console.log(val)    console.log(e)  }</script><div class="box" onclick="showMsg(this.innerHTML, event)">hello world</div></code></pre><p><strong>HTML 事件处理程序缺点</strong></p><ul><li>存在”时差问题”，当用户触发相应的事件时，如果事件处理程序尚不具备执行条件，就会引发错误。（比如上面的<code>script</code>标签中放到页尾）</li><li>扩展事件处理程序中的作用域在不同的浏览器中会导致不同的结果。</li><li><code>HTML</code>与<code>JavaScript</code>代码紧密耦合，如果要更换事件处理程序，就要改动两个地方，这也是大家都转向<code>JavaScript</code>指定事件处理程序的原因所在。</li></ul><h3 id="13-2-2-DOM0-级事件处理程序"><a href="#13-2-2-DOM0-级事件处理程序" class="headerlink" title="13.2.2 DOM0 级事件处理程序"></a>13.2.2 DOM0 级事件处理程序</h3><blockquote><p>通过 JavaScript 指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。这种方式有以下几个特点。</p></blockquote><ul><li>简单</li><li>跨浏览器</li></ul><p>每个元素（包括 window 和 document）都有自己的事件处理程序，这些属性通常全部小写，例如 onclick。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>需要注意的是，在这些代码运行之前不会指定事件处理程序，因此这些代码在页面中位于按钮后面，就有可能在一段时间内怎么单击都没有反应。</p><blockquote><p>使用 DOM0 级方法指定的事件处理程序被认为是元素的方法，因此这时候的事件处理程序是在元素的作用域中运行，换句话说，程序中的 this 引用当前元素。</p></blockquote><p><strong>1. 以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理</strong></p><p><strong>2. 也可以删除通过 DOM0 级方法指定的事件程序，如下</strong></p><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p>使用 DOM0 级方法指定的事件处理程序</p><h3 id="13-2-3-DOM2-级事件处理程序"><a href="#13-2-3-DOM2-级事件处理程序" class="headerlink" title="13.2.3 DOM2 级事件处理程序"></a>13.2.3 DOM2 级事件处理程序</h3><blockquote><p>“DOM2 级事件”定义了两个方法，分别用于指定和删除事件处理程序：addEventListener、removeEventListener,所有的 DOM 节点都包括这两个方法，并且接受 3 个参数，要处理的事件名，作为事件处理程序的函数和一个布尔值。如果这个布尔值为 true，表示在捕获阶段调用事件处理程序，如果是 false，表示在冒泡阶段调用事件处理程序</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'click'</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与 DOM0 级方法一样，这里添加的事件处理程序也是在其依附的<strong>元素的作用域</strong>中运行,但其可以添加多个事件处理函数。并且是按照添加的顺序触发</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'click'</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'click'</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world 2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出 hello world 1, hello world 2</span></code></pre><p><strong>移除事件处理程序</strong></p><blockquote><p>通过 addEventListener 添加的事件处理程序只能使用 removeEventListener 来移除，移除时传入的参数和添加处理程序时使用的参数相同，这也意味着通过其添加的匿名函数将无法移除。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world 3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 移除的时候需要和添加的时候参数保持一致,匿名函数无法移除</span></code></pre><p><strong>如果不是特别需要，不建议在捕获阶段注册事件处理程序</strong></p><h3 id="13-2-4-IE-事件处理程序"><a href="#13-2-4-IE-事件处理程序" class="headerlink" title="13.2.4 IE 事件处理程序"></a>13.2.4 IE 事件处理程序</h3><blockquote><p>IE 实现了与 DOM 中类似的两个方法，attachEvent, detachEvent。接受相同的参数，事件名称和事件处理程序函数。</p></blockquote><ul><li><code>attachEvent()</code> - 添加事件</li><li><code>detachEvent()</code> - 移除事件</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> handle2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加事件</span>$btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>$btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> handle2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 移除事件</span>$btn<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>通过<code>attachEvent添加的事件处理程序以添加时的相反顺序触发</code>，移除事件的时候，事件名称和事件处理函数必须与添加的时候相同，匿名函数无法移除</strong></p></blockquote><h3 id="13-2-5-跨浏览器的事件处理程序"><a href="#13-2-5-跨浏览器的事件处理程序" class="headerlink" title="13.2.5 跨浏览器的事件处理程序"></a>13.2.5 跨浏览器的事件处理程序</h3><blockquote><p>恰当的使用能力检测，可以编写跨浏览器的事件处理。要保证处理事件在大多数浏览器下一致运行，只需要关注冒泡阶段。</p></blockquote><p>我们要创建的一个方法是<code>addHandler()</code>,它的职责是分别使用 DOM0 级方法，DOM2 级方法或 IE 方法来添加事件。</p><p><strong>addHandler</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> addHandler <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    element<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>removeHandler</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> removeHandler <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    element<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>实例</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> $btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> logClassName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">addHandler</span><span class="token punctuation">(</span>$btn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> logClassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addHandler</span><span class="token punctuation">(</span>$btn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>$btn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> logClassName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="13-3-事件对象"><a href="#13-3-事件对象" class="headerlink" title="13.3 事件对象"></a>13.3 事件对象</h2><blockquote><p>在触发 DOM 上的某个事件时，会产生一个事件对象 event，这个对象中包含着所有与事件有关的信息。 例如包含包括事件的元素，事件的类型以及其他特定事件相关的信息。例如鼠标操作导致得事件对象中，会包含鼠标的位置信息，而键盘操作的事件对象中，会包含与按下的键有关的信息，所有的浏览器都支持 event 对象，但支持的方式不同</p></blockquote><h3 id="13-3-1-DOM-中的事件对象"><a href="#13-3-1-DOM-中的事件对象" class="headerlink" title="13.3.1 DOM 中的事件对象"></a>13.3.1 DOM 中的事件对象</h3><blockquote><p>兼容 DOM 的浏览器会将一个 event 对象传入到事件处理程序中，无论指定事件处理程序使用什么方式（DOM0 和 DOM2 级），都会传入 event 对象，如下例子</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> logEventType <span class="token operator">=</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>$btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> logEventType<span class="token punctuation">;</span>$btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> logEventType<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>另外以下面这种方式提供 event 对象，可以让 HTML 特性事件处理程序函数执行相同的操作。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console.log(this.innerHTML, event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>event 对象包含创建它的特定的事件相关的属性和方法，触发的事件类型不一样，可用的属性和方法也不一样。不过所有的事件都会有下表列出的成员</strong></p><table><thead><tr><th style="text-align:center">属性/方法</th><th style="text-align:center">类型</th><th style="text-align:center">读/写</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">bubbles</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明事件是否冒泡</td></tr><tr><td style="text-align:center">cancelable</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">表明是否可以取消事件的默认行为</td></tr><tr><td style="text-align:center">currentTarget</td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">其事件处理程序当前正在处理事件的那个元素</td></tr><tr><td style="text-align:center">defaultPrevented</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为 true 表示已经调用了 preventDefault()</td></tr><tr><td style="text-align:center">detail</td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">与事件相关的细节信息</td></tr><tr><td style="text-align:center">eventPhase</td><td style="text-align:center">Integer</td><td style="text-align:center">只读</td><td style="text-align:center">调用事件处理程序的截断：1 表示捕获阶段，2 表示“处于目标”，3 表示冒泡阶段</td></tr><tr><td style="text-align:center">preventDefault()</td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的默认行为，如果是 cancelable 是 true，则可以使用这个方法。</td></tr><tr><td style="text-align:center">stopImmediatePropagation()</td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的进一步捕获或者冒泡，同事阻止任何事件处理程序被调用。</td></tr><tr><td style="text-align:center">stopPropagation()</td><td style="text-align:center">Function</td><td style="text-align:center">只读</td><td style="text-align:center">取消事件的进一步捕获或者冒泡，如果 bubbles 为 true 则可以使用这个方法</td></tr><tr><td style="text-align:center">target</td><td style="text-align:center">Element</td><td style="text-align:center">只读</td><td style="text-align:center">事件的目标</td></tr><tr><td style="text-align:center">trusted</td><td style="text-align:center">Boolean</td><td style="text-align:center">只读</td><td style="text-align:center">为 true 表示事件是由浏览器生成的，为 false 则表示事件是由开发人员通过 JavaScript 创建的</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">String</td><td style="text-align:center">只读</td><td style="text-align:center">被触发的事件类型</td></tr><tr><td style="text-align:center">view</td><td style="text-align:center">AbstractView</td><td style="text-align:center">只读</td><td style="text-align:center">与事件关联的抽象视图，等同于发生事件的 window 对象</td></tr></tbody></table><h3 id="13-3-2-IE-中的事件对象"><a href="#13-3-2-IE-中的事件对象" class="headerlink" title="13.3.2 IE 中的事件对象"></a>13.3.2 IE 中的事件对象</h3><blockquote><p>与访问 DOM 中的 event 对象不同，要访问 IE 中的 event 对象有几种不同的方式，取决于指定事件处理程序的方法。在使用 DOM0 级方法添加事件处理程序时，event 对象作为 window 对象的一个属性存在。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> event <span class="token operator">=</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="13-3-3-跨浏览器的事件对象"><a href="#13-3-3-跨浏览器的事件对象" class="headerlink" title="13.3.3 跨浏览器的事件对象"></a>13.3.3 跨浏览器的事件对象</h3><h2 id="13-4-事件类型"><a href="#13-4-事件类型" class="headerlink" title="13.4 事件类型"></a>13.4 事件类型</h2><blockquote><p>web 浏览器中可能发生的事件有很多类型。如前所述，不同的事件类型具有不同的信 ，而 DOM3 级事件，规定了以下几类事件</p></blockquote><h3 id="13-4-1-UI-事件"><a href="#13-4-1-UI-事件" class="headerlink" title="13.4.1 UI 事件"></a>13.4.1 UI 事件</h3><h3 id="13-4-2-焦点事件"><a href="#13-4-2-焦点事件" class="headerlink" title="13.4.2 焦点事件"></a>13.4.2 焦点事件</h3><h3 id="13-4-3-鼠标与滚轮事件"><a href="#13-4-3-鼠标与滚轮事件" class="headerlink" title="13.4.3 鼠标与滚轮事件"></a>13.4.3 鼠标与滚轮事件</h3><h1 id="第-14-章-表单脚本"><a href="#第-14-章-表单脚本" class="headerlink" title="第 14 章 - 表单脚本"></a>第 14 章 - 表单脚本</h1><p><strong>学习目标：</strong></p><ul><li>理解表单</li><li>文本框验证和交互</li><li>使用其他表单控制</li></ul><h2 id="14-1-表单基础知识"><a href="#14-1-表单基础知识" class="headerlink" title="14.1 表单基础知识"></a>14.1 表单基础知识</h2><blockquote><p>在 HTML 中，表单是由元素来表示的，而在 JavaScript 中，表单对应的元素类型是<code>HTMLFormElement</code>类型，<code>HTMLFormElement</code>继承了<code>HTMLElement</code>，所以除了与其他 html 元素具有的相同属性之外还拥有以下属性。</p></blockquote><ul><li><code>acceptCharset</code>: 服务器能够处理的字符集，等价于 HTML 中的 accept-charset。</li><li><code>action</code>: 接受请求的 URL，等价于 html 中的 action 特性</li><li><code>enctype</code>： 请求的编码类型，等价于 html 中的 enctype</li><li><code>length</code>：表单中控件的数量</li><li><code>method</code>： 要发送的 http 请求的类型，通常是 get 或者 post，等价于 html 中的 method 特性</li><li><code>name</code>：表单的名称，等价于 html 中的 name 属性</li><li><code>reset()</code>: 将表单域重置为默认值</li><li><code>submit()</code>: 提交表单</li><li><code>target</code>: 用于发送请求和接收响应的窗口的名称，等价于 html 中的 target 属性。</li></ul><p><strong>获取表单引用的一些方式</strong></p><ol><li>通过<code>getElementById</code>方法找到</li><li>通过<code>document.forms</code>可以获取到页面中所有的表单，并通过索引或者 name 取得特定的表单。</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> forms <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">;</span><span class="token keyword">let</span> firstForm <span class="token operator">=</span> forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myForm <span class="token operator">=</span> form<span class="token punctuation">[</span><span class="token string">'form2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="14-1-1-提交表单"><a href="#14-1-1-提交表单" class="headerlink" title="14.1.1 提交表单"></a>14.1.1 提交表单</h3><blockquote><p>用户点击提交按钮或者图像按钮就会提交表单。使用或者都可以定义提交按钮，只要将其 type 类型的值设置为‘submit’即可。图像按钮则是将的 type 设置为‘image’。</p></blockquote><p><strong>只要表单中存在上面列出的任何一种按钮，那么在相应的表单控件拥有焦点的情况下，按下回车键就可以提交表单(需要注意的是 textarea 是个例外，会换行)，相反没有以上的提交按钮，则不会提交表单</strong></p><p><strong>以上三种按钮提交表单的时候，浏览器在将请求发送给服务器前触发 submit 事件，这样我们就有机会可以验证表单数据，并决定是不是允许表单提交</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交表单<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $form <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>$form<span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> checkForm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fields    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ele<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>$form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'submit'</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// xxx 通过表单验证</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// xxx 没通过</span>      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="14-1-2-重置表单"><a href="#14-1-2-重置表单" class="headerlink" title="14.1.2 重置表单"></a>14.1.2 重置表单</h3><blockquote><p>和表单提交有类似，可以通过<code>&lt;input&gt;</code>或者<code>button</code>标签并且<code>type</code>属性为<code>reset</code>来创建重置按钮。它的功能就是将所有的表单字段都恢复到页面刚加载完毕的时候的初始值。同样用户点击充值表单的时候会触发<code>reset</code>事件，我们可以必要的时候取消重置操作</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 以下两种方式都可以定义重置按钮 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置表单<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;button>重置表单&lt;/button>   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><strong>稍微修改一下上面的脚本</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $form <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>$form<span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> checkForm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fields    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ele<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token string">'reset'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  $form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>    v<span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// xxx 通过表单验证</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// xxx 没通过</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token boolean">false</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>当然最后我们也可以通过<code>form.reset()</code>在 js 中手动触发重置操作。</strong></p><h3 id="14-1-3-表单字段"><a href="#14-1-3-表单字段" class="headerlink" title="14.1.3 表单字段"></a>14.1.3 表单字段</h3><blockquote><p>表单元素与其他的原生元素一样，可以使用 getElementById 等方式去访问。此外每个表单都有一个 elements 属性，表示表单中所有元素的集合。如果有多个表单控件都在使用一个 name（比如单选按钮），name 就会返回以该 name 命名的一个 NodeList</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>girl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $form <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> elements <span class="token operator">=</span> $form<span class="token punctuation">.</span>elements<span class="token punctuation">;</span></code></pre><p>以下是 elements 变量的取值，可以看到可以通过索引 0,1,2 等形式去访问表单控件，也可以通过 pwd,sex 等命名形式去访问。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f515132303137303930322d3137303734304032782e706e67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>共有的表单字段属性</strong></p><blockquote><p>除了元素之外，所有的表单字段都拥有相同的一组属性。比如如下。</p></blockquote><ul><li><code>disabled</code>:布尔值，表示当前字段是否被禁用。</li><li><code>form</code>：指向当前字段所属表单的指针，只读。</li><li><code>name</code>：当前字段的名称</li><li><code>readOnly</code>：布尔值，表示当前字段是否只读。</li><li><code>tabIndex</code>：表示当前字段的切换号</li><li><code>type</code>：当前字段的类型，如“checkbox”，“radio”等等</li><li><code>value</code>：当前字段被提交给服务器的值，对文件字段来说，这个属性是只读的，包含着文件在计算机中的路径。</li></ul><blockquote><p>除了 form 属性之外，可以通过 js 动态修改其值</p></blockquote><p><strong>共有的表单字段方法</strong></p><ul><li><code>focus()</code>,获取焦点</li><li><code>blur()</code>，失去焦点</li></ul><blockquote><p>需要注意的是，只有表单字段才可以获取焦点，对于其他元素来说，如果先将其 tabIndex 属性设置为-1，然后在调用 focus()方法，也可以让这些元素获得焦点。当前 opera 目前不支持这种技术</p></blockquote><p><strong>共有的表单事件</strong></p><p>除了支持鼠标，键盘，更改和 HTML 事件之外，所有表单字段都支持下面三个事件。</p><ul><li><code>blur</code>：当前子弹失去焦点时触发</li><li><code>change</code>：对于 input 和 textarea 元素来说，在他们是去焦点并且值改变时触发，对于 select 元素，在其选项改变时触发，</li><li><code>focus</code>：当前字段获得焦点时触发</li></ul><h2 id="14-2-文本框脚本"><a href="#14-2-文本框脚本" class="headerlink" title="14.2 文本框脚本"></a>14.2 文本框脚本</h2><blockquote><p>在 HTML 中，<code>&lt;input&gt;</code> 元素和<code>&lt;textarea&gt;</code>元素都表示文本框。这两个空间非常类似，而且大多数的时候行为也差不多，不过还是有一些差别。</p></blockquote><ul><li>对于 input 元素来说可以通过 size 特性来设置能够显示的字符数，通过 value 特性，可以设置初始值。，而 maxlength 则可以指定能够接受的最大字符数。如果要创建一个文本框，让他能够显示 25 个字符，单输入不能超过 50 个字符。可以用如下代码。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li>但是对于<code>&lt;textarea&gt;</code>而言，元素始终会呈现为一个多行文本，要指定文本框的大小可以通过 rows 和 cols,rows 表示行数，cols 表示列数。与元素的区别在于其初始值需要放在<code>&lt;textarea&gt;initial value&lt;textarea&gt;</code>之间。并且不能指定最大字符数。</li></ul><h3 id="14-2-1-选择文本"><a href="#14-2-1-选择文本" class="headerlink" title="14.2.1 选择文本"></a>14.2.1 选择文本</h3><blockquote><p>上述两种文本框都支持<code>select()</code>方法，这个方法用于选择文本框中的所有文本，在调用<code>select()</code>方法时，大多数浏览器都会讲焦点设置到文本框中。</p></blockquote><p>在文本框获取焦点时选择所有文本，可以让用户不必一个一个删除文本。</p><p><strong>1. select 事件</strong></p><blockquote><p>与<code>select()</code>方法对应的是 select 事件，在选择了文本框的文本时就会触发 select 事件。但是什么时候触发会因浏览器而异。在 ie9+，Opera,FireFox，Chrome 和 Safari 中，只有用户选择了文本而且释放了鼠标才会触发 select 事件。但是在 ie8 及更早的版本中只要用户选择了一个字母，不必释放鼠标，就会触发。当然在调用<code>select()</code>方法的时候也会触发该事件。</p></blockquote><p><strong>2. 获取选择的文本</strong></p><blockquote><p>通过<code>selectionStart</code>和<code>selectionEnd</code>表示所选择的文本的范文（即文本选区的开头和结尾的偏移量），就可以知道用户到底选择了啥。</p></blockquote><pre class=" language-js"><code class="language-js">$area<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'select'</span><span class="token punctuation">,</span>  e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>      $area<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>$area<span class="token punctuation">.</span>selectionStart<span class="token punctuation">,</span> $area<span class="token punctuation">.</span>selectionEnd<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然该方式是有兼容问题的</p><p><strong>3. 选择部分文本</strong></p><blockquote><p>HTML5 中为选择文本框中的部分文本提供了解决方法，即<code>setSelectionRange</code>方法，接收两个参数，要选择地第一个和最后一个字符之后的字符的索引。</p></blockquote><h3 id="14-2-2-过滤输入"><a href="#14-2-2-过滤输入" class="headerlink" title="14.2.2 过滤输入"></a>14.2.2 过滤输入</h3><blockquote><p>我们经常会要求用户在文本框中输入特定格式的数据，比如必须匹配某种模式，我们可以综合运用事件和 DOM 手段，来将普通的文本框转化成能够理解用户输入数据的功能控件。</p></blockquote><p><strong>1. 屏蔽字符</strong></p><blockquote><p>有时候我们需要用户输入的文本中不包含某些字符，这个时候可以给 keypress 事件，阻止这个事件的默认行为来屏蔽此类字符。甚至在某些极端的情况下可以屏蔽掉所有操作。</p></blockquote><pre><code>$keyPress.addEventListener(&#39;keypress&#39;, (e) =&gt; {  e.preventDefault()}, false)</code></pre><p><strong>2. 操作剪切板</strong></p><blockquote><p>IE 是第一个支持与剪切板相关事件，以及通过 js 访问剪切板数据的浏览器。后来 html5 也把剪切板事件纳入了规范，下面是 6 个剪切板事件。</p></blockquote><ul><li><code>beforecopy</code>: 在发生复制操作前触发</li><li><code>copy</code>：在发生复制操作时触发</li><li><code>beforecut</code>：在发生剪切操作前触发</li><li><code>cut</code>：在发生剪切操作时触发</li><li><code>beforepaste</code>：在发生粘贴操作前触发</li><li><code>paste</code>：在发生粘贴操作时触发</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paste-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $pasteInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.paste-input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> getClipboardData <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> clipboardData <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">||</span> event<span class="token punctuation">)</span><span class="token punctuation">.</span>clipboardData<span class="token punctuation">;</span>  <span class="token keyword">return</span> clipboardData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> setClipboardData <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> params <span class="token operator">=</span> e<span class="token punctuation">.</span>clipboardData <span class="token operator">?</span> <span class="token string">'text/plain'</span> <span class="token punctuation">:</span> <span class="token string">'text'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> clipboardData <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">||</span> event<span class="token punctuation">)</span><span class="token punctuation">.</span>clipboardData<span class="token punctuation">;</span>  clipboardData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>$pasteInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'paste'</span><span class="token punctuation">,</span>  e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">getClipboardData</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'paste==='</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>拿到的兼容事件对象上有一个 clipboardData 属性，这个对象有三个方法，分别是 getData，setData 和 clearData。用于从剪切板中取得数据，他接收一个参数，即要取得的数据的格式，在 ie 中，有两种数据格式：‘text’和‘url’，在 firefox 和 safari 中的 setData 方法不能识别‘text’类型，这两个浏览器在成功将文本放到剪切板中后，都会返回 true，否则返回 false</strong></p><h3 id="14-2-3-自动切换焦点"><a href="#14-2-3-自动切换焦点" class="headerlink" title="14.2.3 自动切换焦点"></a>14.2.3 自动切换焦点</h3><blockquote><p>使用 js 可以从多个方面增强表单的易用性，其中，最常见的一种方式就是在用户填写完当前字段的时候，自动将焦点切换到下一个字段。通常在自动切换焦点之前，必须知道用户已经输入了既定的长度的数据（比如电话号码）。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel1<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel2<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel3<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> $form <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">'form1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> getNextInput <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">||</span> event<span class="token punctuation">)</span><span class="token punctuation">.</span>target<span class="token punctuation">;</span>  <span class="token keyword">let</span> maxLength <span class="token operator">=</span> target<span class="token punctuation">.</span>maxLength<span class="token punctuation">;</span>  <span class="token keyword">let</span> val <span class="token operator">=</span> target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> target<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> name<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> nextInputIndex <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>name<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> prefix<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">===</span> maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>    prefix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextInputIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> $form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>$form<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'keyup'</span><span class="token punctuation">,</span>  e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> $nextInput <span class="token operator">=</span> <span class="token function">getNextInput</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>$nextInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>      $nextInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="14-4-表单序列化"><a href="#14-4-表单序列化" class="headerlink" title="14.4 表单序列化"></a>14.4 表单序列化</h2><p>在浏览器中提交表单之前，浏览器是怎样将数据发送给服务器的,如下说明。</p><ul><li>对表单字段的名称和值进行 URL(<code>encodeURIComponent()</code>)编码,并使用(&amp;)进行分割</li><li>不发送禁用的表单字段</li><li>只发送勾选的复选框和单选按钮</li><li>不发送 type 为 reset 和 button 的按钮</li><li>多选框中每个选中的值单独一个条目</li><li>在单击提交按钮提交表单的情况下，也会发送提交按钮；否则不会发送，也包括 type 为 image 的 input 元素</li><li><code>&lt;select&gt;</code>元素的值就是选中的 <code>&lt;option&gt;</code>元素的 value 值，如果<code>&lt;option&gt;</code>元素没有 value 特性则是<code>&lt;option&gt;</code>的文本值</li></ul><p><strong>放一张常见的表单提交的 GET 方式各个字段的截图</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f2545382541312541382545352538442539352545362538462539302545342542412541342545362539362542392545352542432538466765742e706e67" alt="(1).png" title="">                </div>                <div class="image-caption">(1).png</div>            </figure><p><strong>放一张常见的表单提交的 POST 方式各个字段的截图</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f2545382541312541382545352538442539352545362538462539302545342542412541342545362539362542392545352542432538462e706e67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第-13-章-事件&quot;&gt;&lt;a href=&quot;#第-13-章-事件&quot; class=&quot;headerlink&quot; title=&quot;第 13 章 - 事件&quot;&gt;&lt;/a&gt;第 13 章 - 事件&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;学习目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解事
      
    
    </summary>
    
      <category term="Javascript高级程序设计系列" scheme="http://coder.liusixin.cn/categories/Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript高级程序设计" scheme="http://coder.liusixin.cn/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高程笔记 （7 - 10章）</title>
    <link href="http://coder.liusixin.cn/posts/34aafa83/"/>
    <id>http://coder.liusixin.cn/posts/34aafa83/</id>
    <published>2017-04-19T10:32:59.000Z</published>
    <updated>2017-04-19T10:32:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-7-章-函数表达式"><a href="#第-7-章-函数表达式" class="headerlink" title="第 7 章 - 函数表达式"></a>第 7 章 - 函数表达式</h1><p><strong>学习目标</strong></p><ul><li>函数表达式的特征</li><li>使用函数实现递归</li><li>使用闭包定义私有变量</li></ul><p><strong>定义函数的方式</strong></p><ul><li><strong>函数声明（存在函数声明提升，所以可以在函数声明之前调用函数）</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'liusixin'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong>函数表达式（声明必须在调用之前）</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>部分浏览器实现了一个非标准的属性 <code>name</code>，表示函数名字</p><p><strong>不要用下面的方式去定义一个函数</strong></p><p>不同的浏览器对此解析不同，有的两个都声明了，有的只声明了 a 函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'b'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>如果想根据不同的条件声明函数可以用函数表达式</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'b'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="7-1-递归"><a href="#7-1-递归" class="headerlink" title="7.1 递归"></a>7.1 递归</h2><blockquote><p>递归函数是一个函数通过名字调用自身的情况下构成的。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">recursion</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">recursion</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上定义了一个递归求阶乘的函数，如果我们用下面这种使用方式会怎么样呢？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> recursion<span class="token punctuation">;</span>recursion <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个时候就报错了，因为recursion函数内部，调用了recursion本身，但是recurtion已经被赋值为了null。</span></code></pre><p><strong>使用 arguments.callee</strong></p><p>他是一个当前正在执行的函数的引用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">recursion</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> fn <span class="token operator">=</span> recursion<span class="token punctuation">;</span>recursion <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><blockquote><p>严格模式下不允许这样用</p></blockquote><p><strong>还有别的方式</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> recursion <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn <span class="token operator">=</span> recursion<span class="token punctuation">;</span>recursion <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>函数表达式依旧可以给函数取名字</p><h2 id="7-2-闭包"><a href="#7-2-闭包" class="headerlink" title="7.2 闭包"></a>7.2 闭包</h2><blockquote><p>一个能够访问另一个函数作用域中变量的函数。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> property <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token function">property</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上就是一个经典的闭包，需要注意的是闭包会产生比普通函数更多的内存，所以需要慎用。</p><h3 id="7-2-1-闭包与变量"><a href="#7-2-1-闭包与变量" class="headerlink" title="7.2.1 闭包与变量"></a>7.2.1 闭包与变量</h3><blockquote><p>闭包只能取得包含函数中任何变量的最后一个值</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arrFn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arrFn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arrFn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> fns <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们以为创建出来的函数数组 fns 会输出 0， 1， 2….，但是实际上只会得到 10，因为闭包只能拿到包含函数中所有变量的最后值。</p><p>i 在循环结束的时候已经变成了 10，故所有的函数执行都只能得到 10</p><p>如果想得到对应的输出，我们可以用其他的闭包方式,例如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arrFn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arrFn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arrFn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> fns <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>这个时候每个立即执行函数的都有自己的执行环境，而 fns 数组中函数的所形成的闭包自然也可以得到自己的唯一的 num 值了</strong></p><h3 id="7-2-2-关于-this-对象"><a href="#7-2-2-关于-this-对象" class="headerlink" title="7.2.2 关于 this 对象"></a>7.2.2 关于 this 对象</h3><blockquote><p>关于闭包能够访问另一个函数的变量，有两个比较特殊 this, arguments</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'the window'</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'the obj'</span><span class="token punctuation">,</span>  showName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这里</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the window</span></code></pre><p>这里打印的是 <code>&#39;the window&#39;</code>，记住 this 和 arguments 两个值比较特殊就可以，如果没有手动将另一个函数的 this 和 arguments 赋值，其得到的还是动态运行的结果，我们看下面的例子就可以明白</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'the window'</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'the obj'</span><span class="token punctuation">,</span>  showName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> thatArguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thatArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/WX20180716-190424-2x.png" alt="WX20180716-190424-2x.png" title="">                </div>                <div class="image-caption">WX20180716-190424-2x.png</div>            </figure><h3 id="7-2-3-内存泄漏"><a href="#7-2-3-内存泄漏" class="headerlink" title="7.2.3 内存泄漏"></a>7.2.3 内存泄漏</h3><blockquote><p>javascript 中常见的有两种垃圾回收机制，其中引用计数就是造成内存泄漏的罪魁祸首。</p></blockquote><ul><li><strong>标记清除</strong></li><li><strong>引用计数</strong></li></ul><p>通过以下例子简单的回顾一下两种垃圾回收机制</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">problem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>otherObj <span class="token operator">=</span> b<span class="token punctuation">;</span>  b<span class="token punctuation">.</span>otherObj <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>标记清除</strong></p><blockquote><p>当变量进入环境（比如在函数中声明一个变量）的时候就讲这个变量标记为进入环境，当变量离开环境的时候，则将其标记为离开环境</p></blockquote><p>上面那个例子中，当函数结束的时候，两个对象都离开了作用域，因此这种相互引用不是个问题</p><p><strong>引用计数</strong></p><ul><li>首先引用清除的含义是记录每个值被引用的次数</li><li>当声明了一个变量并将一个引用类型的值赋值给该变量时这个值的引用次数就是 1</li><li>如果同一个值又被赋给了另外一个变量则该值的引用次数加 1</li><li>相反如果包含这个值引用的变量又取得了另外一个值,则这个值的引用次数减 1</li><li>当这个值的引用次数为 0 的时候，则释放其所占空间</li></ul><p>上面那个例子中，a 和 b 通过各自的属性相互引用，从而造成两个空对象的引用计数都为 2.当函数结束之后，a 和 b 将继续存在，因为两个空对象的引用次数不可能为 0，当这种情况出现的多了，将有大量的空间被占用得不到释放。</p><p><strong>接下里看一下闭包的使用中可能因为引用计数机制造成内存泄漏问题</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">assignHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ele<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个函数创建了一个作为 ele 元素事件处理程序的闭包，这个闭包中又创建了一个循环引用，只要事件处理程序(匿名函数)一直存在，则 ele 的引用计数至少为 1 因此 ele 所占用的内存空间永远得不到释放，可以通过以下的例子解决该问题</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">assignHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> ele<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  ele<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 消除循环引用</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  ele <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 减少引用次数</span><span class="token punctuation">}</span></code></pre><h2 id="7-3-模仿块级作用域"><a href="#7-3-模仿块级作用域" class="headerlink" title="7.3 模仿块级作用域"></a>7.3 模仿块级作用域</h2><blockquote><p>js 中没有块级作用域的概念，只有函数和全局作用域，那么这意味着，在块语句中定义的变量实际上是在包含函数中而非语句中创建的。举个例子</p></blockquote><p><strong>注意： js 中使用 var 如果对同一个变量进行声明，其实会对后续的声明视而不见，但是会执行后续声明中的初始工作</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outputNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在java、c++类的语言中，这里是会报错的，因为i只在上面的for循环中起效</span><span class="token punctuation">}</span></code></pre><p>所以说变量的声明是在包含函数中，也就是上面的 outputNum 函数体中，而不是在语句中,比如上面的 for 循环中，那么如果用函数表达式来模拟块级作用域呢？很简单，用一个立即执行函数包裹起来就可以</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outputNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: i is not defined</span><span class="token punctuation">}</span></code></pre><p>为什么<code>(function () {})()</code>可以模仿块级作用域呢？</p><blockquote><p>匿名函数中定义的任何变量都会在其执行结束时销毁，这也是为什么 i 只能在循环中使用的原因。</p></blockquote><blockquote><p>这种技术也经常被用在限制向全局作用域中添加过多的变量和函数，从而避免全局污染</p></blockquote><h2 id="7-4-私有变量"><a href="#7-4-私有变量" class="headerlink" title="7.4 私有变量"></a>7.4 私有变量</h2><blockquote><p>js 中没有私有成员的概念，所有对象的属性都是公有的，不过倒是有一个私有变量的概念，任何在函数中定义的变量都是私有变量。私有变量包括函数的参数、局部变量、函数内部定义的其它函数。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>函数的外部没有任何方法能够访问 add 函数的内部私有变量 sum1、sum2 和 sum。利用闭包的性质，我们可以创建能够访问私有变量的公有方法(也叫做<strong>特权方法</strong>)。</p><p><strong>有两种在对象上创建特权方法的方法。</strong></p><ul><li><strong>在构造函数中定义特权方法。</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 私有私有变量和函数</span>  <span class="token keyword">var</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>publicMethod <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    privateVariable<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>利用私有和特权成员可以隐藏那些不应该被直接修改的数据。</strong></p><p>使用构造函数模式来创建特权方法的缺点是必须要用构造函数模式来达到这个目的，而且每个实例都会创建相同的一组方法，而使用静态私有变量来实现特权方法可以避免这个问题。</p><h3 id="7-4-1-静态私有变量"><a href="#7-4-1-静态私有变量" class="headerlink" title="7.4.1 静态私有变量"></a>7.4.1 静态私有变量</h3><h3 id="7-4-2-模块模式"><a href="#7-4-2-模块模式" class="headerlink" title="7.4.2 模块模式"></a>7.4.2 模块模式</h3><h3 id="7-4-3-增强的模块模式"><a href="#7-4-3-增强的模块模式" class="headerlink" title="7.4.3 增强的模块模式"></a>7.4.3 增强的模块模式</h3><h1 id="第-8-章-BOM"><a href="#第-8-章-BOM" class="headerlink" title="第 8 章 - BOM"></a>第 8 章 - BOM</h1><p><strong>学习目标</strong></p><ul><li>理解 window 对象–BOM 的核心</li><li>控制窗口、框架和弹出窗口</li><li>利用 location 对象的页面信息</li><li>使用 navigator 对象了解浏览器</li></ul><h2 id="8-1-window-对象"><a href="#8-1-window-对象" class="headerlink" title="8.1 window 对象"></a>8.1 window 对象</h2><blockquote><p>BOM 的核心对象是 window，它表示浏览器的一个实例，在浏览器中，window 对象有双重角色，它既是通过 JavaScript 访问浏览器窗口的一个接口，也是 ECMAScript 规范的 Global 对象，这意味着在网页中定义任何一个对象，变量或者函数，都以 window 作为 Global 对象，因此有权访问 parseInt 等方法</p></blockquote><h3 id="8-1-1-全局作用域"><a href="#8-1-1-全局作用域" class="headerlink" title="8.1.1 全局作用域"></a>8.1.1 全局作用域</h3><blockquote><p>所有在全局作用域中声明的变量、函数都会变成 window 对象的属性和方法。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>age 和 sayAge 都被自动归在了 window 对象名下，所以可以通过 window.age 和 window.sayAge 访问</p><p><strong>非常重要</strong></p><p>定义全局变量与在 window 对象上直接定义属性的差别是：全局变量不能通过 delete 操作符删除，而直接在 window 对象上的定义的属性可以。</p><h1 id="第-9-章-客户端检测"><a href="#第-9-章-客户端检测" class="headerlink" title="第 9 章 - 客户端检测"></a>第 9 章 - 客户端检测</h1><p><strong>学习目标</strong></p><ul><li>使用能力检测</li><li>用户代理检测的历史</li><li>选择检测的方式</li></ul><p><strong>前言</strong></p><blockquote><p>各大浏览器在实现公共接口方面投入了很多精力，但是结果仍然是每一种浏览器都有各自存在不一致性的问题，面对普遍不一致的问题，开发人员要么采取迁就各方的“最小公分母”策略，要么就得利用各种客户端的检测方法，来突破或者规避种种局限。</p></blockquote><h2 id="9-1-能力检测"><a href="#9-1-能力检测" class="headerlink" title="9.1 能力检测"></a>9.1 能力检测</h2><blockquote><p>最常用也是最为人们广泛接受的客户端检测形式是能力检测，能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力，采用这种形式不必顾忌特定的浏览器是如何如何，只要确定浏览器支持的特定的能力，就可以给出解决方案，举个例子。</p></blockquote><p>在 IE5 之前的版本不支持 document.getElementById()这个 DOM 方法，尽管可以使用非标准的 document.all 属性实现相同的功能，但是 IE 早期的版本中，确实不存在前面那个方法，于是就有了下面的能力检测代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getElement</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>getElementById<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>all<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span>all<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No way to retrieve element!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 getElement 函数的用途是返回具有给定 ID 的元素，因为 document.getElementById 是实现这一目的的标准，所以一开始就检测了这个方法，如果该函数不存在就继续监测 document.all 是否存在，如果是就使用，如果两个特性都不满足，则创建一个错误并抛出。表示这个函数没有办法使用</p><p><strong>主要要理解能力检测，首先必须要理解两个重要的概念。</strong></p><ul><li>先检测达成目的的最常用的特性，可以保证代码最优化。因为在多数情况下，都可以避免测试多个条件。</li><li>必须检测实际要用到的特性，一个特性存在并不意味着另外一个特性也存在。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getWindowWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>all<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误的使用例子</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面是一个错误使用能力检测的例子，检测<code>document.all</code>是否存在，并不意味着<code>document.documentElement.clientWith</code>也存在。</p><h3 id="9-1-1-更可靠的能力检测"><a href="#9-1-1-更可靠的能力检测" class="headerlink" title="9.1.1 更可靠的能力检测"></a>9.1.1 更可靠的能力检测</h3><blockquote><p>能力检测对于想知道某个特性是否会按照适当的方式行事（而不仅仅是某个特性存在）非常有用。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isSortable</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>object<span class="token punctuation">.</span>sort<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个函数通过检测对象是否存在 sort 方法，来确定是否支持排序，问题是包含 sort 属性的对象也会返回 true</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">isSortable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sort<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>检测某个属性是否存在并不能确定对象是够支持排序，更好的方式是检测 sort 是不是一个函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isSortable</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> object<span class="token punctuation">.</span>sort <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在可能的情况下，要尽量用 typeof 进行能力检测，特别是，宿主对象没有义务让 typeof 返回合理的值，最令人发指的是事就发生在 ie 中，大多数浏览器在检测到<code>document.createElement()</code>存在时多会返回 true</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hasCreateElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> document<span class="token punctuation">.</span>createElement <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是在 ie8 及其之前的版本中，这个函数返回 false，因为<code>typeof document.createElement</code>返回的是 object 而不是 function,本质原因是 DOM 对象是宿主对象，IE 及其更早的版本中的宿主对象是 COM 对象，所以 typeof 才会返回 object，IE9 纠正了这个问题，对所有的 DOM 方法都返回 function.</p><p>再举个例子了解一下 typeof 的的行为不准确性。</p><p><strong>ActiveX</strong> 对象（只有 IE 支持）与其他对象的行为差异很大。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHttp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>open<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// xxx</span><span class="token punctuation">}</span></code></pre><p>直接把函数当做属性访问会导致 js 错误，所以使用 typeof 操作符会更加安全一些。但是有一个问题是<code>typeof xhr.open</code>会返回 unknow</p><h3 id="9-1-2-能力检测，不是浏览器检测"><a href="#9-1-2-能力检测，不是浏览器检测" class="headerlink" title="9.1.2 能力检测，不是浏览器检测"></a>9.1.2 能力检测，不是浏览器检测</h3><blockquote><p>检测某个或者某几个特性并不能确定浏览器，下面的代码就是错误地依赖能力检测的典型示例。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> isFirefox <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>vendor <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>vendorSub<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> isIE <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>all <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这两行代码代表了对能力检测的典型勿用，以前确实可以通过检测 navigatorv.vendor 和 navigator.vendorSub 来确定 firefox 浏览器，但是别的浏览器也会实现相同的功能，所以检测自然会出现问题。</p><h2 id="9-2-怪癖检测"><a href="#9-2-怪癖检测" class="headerlink" title="9.2 怪癖检测"></a>9.2 怪癖检测</h2><blockquote><p>与能力检测类似，怪癖检测的目标是识别浏览器的特殊行为，但与能力检测确认浏览器支持什么能力不同，怪癖检测是想要知道浏览器存在什么缺陷，这通常需要运行一段代码，以确定某一特性不能正常工作。</p></blockquote><ul><li>IE8 之前有一个 bug，即如果某个实例属性与标记为<code>[[DontEnum]]</code> 的某个原型属性同名，name 该实例属性将不会出现在 for in 循环当中。使用以下代码来检测。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> hasDontEnumQuick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>Safari3 以前的浏览器版本会枚举被隐藏的属性，可以用下面的代码检测该怪癖</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> hasEnumShadowQuick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果浏览器存在这个 bug，那么 for in 循环枚举带有自定义的 toString 方法的对象，就会返回两个 toString 的实例。</p><blockquote><p>一般来说“怪癖”检测是个别浏览器所独有的，而且通常被归为 bug，建议仅检测那些对你有直接影响的怪癖，而且最好是在脚本一开始就执行此类检测，以便尽早解决问题</p></blockquote><h2 id="9-3-用户代理"><a href="#9-3-用户代理" class="headerlink" title="9.3 用户代理"></a>9.3 用户代理</h2><blockquote><p>第三种方式，也是争议最大的一种客户端检测方式叫做用户代理检测。用户代理检测通过检测用户代理字符串来确定实际使用的浏览器。 因为存在浏览器通过再自己的用户代理字符串中添加一些错误或者误导的信息来达到欺骗的目的。其优先级排在能力检测和怪癖检测之后。</p></blockquote><h1 id="第-10-章-DOM"><a href="#第-10-章-DOM" class="headerlink" title="第 10 章 - DOM"></a>第 10 章 - DOM</h1><blockquote><p>DOM（文档对象模型），是针对 HTML 和 XML 文档的一个 API，DOM 描述了一个层次化的节点树，允许开发人员<code>添加</code>，<code>移除</code>,<code>修改</code>页面的某一部分。</p></blockquote><p><strong>学习目标</strong></p><ul><li>理解包含不同层次节点的 DOM</li><li>使用不同的节点类型(一般是元素节点，文本节点，文档碎片，文档节点等)</li><li>克服浏览器的兼容性问题及各种陷阱</li></ul><p><strong>节点的类型</strong></p><p>接下来会简要的总结常见的几种节点类型以及其相关的知识点</p><h3 id="Node-类型"><a href="#Node-类型" class="headerlink" title="Node 类型"></a>Node 类型</h3><blockquote><p>DOM1 定义了一个 Node 借口，所有的元素都有<code>nodeType</code>属性，<code>nodeType</code>可取得值有 12 中，常见和经常用的有以下几种</p></blockquote><ul><li>1 (元素节点)</li><li>3 (文本节点)</li><li>9 (文档节点)</li><li>11 (文档碎片 DocumentFragment)</li></ul><h3 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h3><blockquote><p>每个节点都有<code>childNodes</code>属性，其保存着一种类数组对象，用于保存一组有序的节点，可以用下标方式去访问，也可以用<code>item</code>方法去访问,当然也要注意，<code>childNodes</code>属性有浏览器的兼容问题，ie 下只包含其子节点中为元素节点的子元素，其他浏览器则还包括元素节点</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> eles <span class="token operator">=</span> someNode<span class="token punctuation">.</span>childNodes<span class="token keyword">var</span> len <span class="token operator">=</span> eles<span class="token punctuation">.</span>length<span class="token keyword">var</span> firstChild <span class="token operator">=</span> ele<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> or eles<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> lastChild <span class="token operator">=</span> eles<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> or eles<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="节点之间的关系"><a href="#节点之间的关系" class="headerlink" title="节点之间的关系"></a>节点之间的关系</h3><blockquote><p>节点之间的关系是多样的，两个节点之间可以父子节点，祖孙节点，兄弟节点等等</p></blockquote><ul><li>previousSibling</li><li>nextSibling</li><li>firstChild</li><li>lastChild</li></ul><p>当一个列表中只存在一个节点，那么<code>previousSibling</code>和<code>nextSibling</code>都为 null</p><p><code>firstChild</code>和<code>lastChild</code>也分别指向第一个和最后一个子节点</p><h3 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h3><blockquote><p>我们可以用<code>appendChild</code>、<code>insertBefore</code>、<code>replaceChild</code>来进行常见的节点之间的操作</p></blockquote><ul><li><code>appendChild()</code><ul><li><code>parentNode.appendChild(childNode)</code></li><li>将 childNode 节点添加到 parentNode 节点末尾</li><li>如果 childNode 节点已经在文档中存在，则从原来的位置移动到 parentNode 的末尾。</li></ul></li><li><code>insertBefore()</code><ul><li><code>parentNode.insertBefore(要插入的节点, 作为参照的节点)</code></li><li>如果作为参照的节点不为 null，则要插入的节点最终会插入到作为参照的节点前面。</li><li>如果作为参照的节点为 null，则其作用与 appendChild 类似</li><li>该方法执行之后返回要插入的节点</li></ul></li><li><code>replaceChild()</code><ul><li><code>parentNode.replaceChild(要插入的节点, 要替换的节点)</code></li><li>要插入的节点如果是原来已经存在，则从原来的位置移动到要替换的节点位置前面</li></ul></li><li><code>removeChild()</code><ul><li><code>parentNode.removeChild(childNode)</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第-7-章-函数表达式&quot;&gt;&lt;a href=&quot;#第-7-章-函数表达式&quot; class=&quot;headerlink&quot; title=&quot;第 7 章 - 函数表达式&quot;&gt;&lt;/a&gt;第 7 章 - 函数表达式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;学习目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="Javascript高级程序设计系列" scheme="http://coder.liusixin.cn/categories/Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript高级程序设计" scheme="http://coder.liusixin.cn/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高程笔记 （4 - 6章）</title>
    <link href="http://coder.liusixin.cn/posts/6ed649de/"/>
    <id>http://coder.liusixin.cn/posts/6ed649de/</id>
    <published>2017-04-18T06:01:01.000Z</published>
    <updated>2017-04-18T06:01:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>红宝书读过之后很多知识点都忘了，写此博文来重新复习下之前比较模糊的知识点。</p><h1 id="第-4-章-变量、作用域和内存问题"><a href="#第-4-章-变量、作用域和内存问题" class="headerlink" title="第 4 章 - 变量、作用域和内存问题"></a>第 4 章 - 变量、作用域和内存问题</h1><p><strong>学习目标</strong></p><ul><li>理解基本类型和引用类型的值</li><li>理解执行环境</li><li>理解垃圾收集</li></ul><p>JavaScript 松散类型的本质，决定了它只是在特定时间用于保存特定的值的一个名字而已。由于不存在定义某个变量必须保存何种数据类型值的规则，变量的值，及其数据类型可以在脚本的声明周期内改变。</p><h2 id="4-1-基本类型和引用类型的值"><a href="#4-1-基本类型和引用类型的值" class="headerlink" title="4.1 基本类型和引用类型的值"></a>4.1 基本类型和引用类型的值</h2><p><strong>js 中包括两种不同数据类型的值</strong></p><ul><li>基本类型值 (undefined null string number boolean)</li><li>引用类型值 (对象)</li></ul><h3 id="4-1-1-动态属性"><a href="#4-1-1-动态属性" class="headerlink" title="4.1.1 动态属性"></a>4.1.1 动态属性</h3><p>这节说了一个问题，只能给引用类型的值动态地添加属性，不能给基本类型的值添加。</p><h3 id="4-1-2-复制变量值"><a href="#4-1-2-复制变量值" class="headerlink" title="4.1.2 复制变量值"></a>4.1.2 复制变量值</h3><p>两种数据类型，除了保存方式不一样之外，在从一个变量向另一个变量复制基本类型值和引用类型值时，也存在不同。</p><blockquote><p>1.如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f2545352539462542412545362539432541432545372542312542422545352539452538422545352541342538442545352538382542362e706e67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>当用一个变量向另一个变量复制引用类型的值的时候，同样也会将存储在变量对象中的值复制一份放到新变量分配的空间中，不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象，复制操作结束之后，两个变量实际上将引用同一个对象。所以只要改变其中一个变量就会影响到另一个变量。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'liusixin'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// liusixin</span></code></pre><p>基本原理看下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f2545352542432539352545372539342541382545372542312542422545352539452538422545352541342538442545352538382542362e706e67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="4-1-3-传递参数"><a href="#4-1-3-传递参数" class="headerlink" title="4.1.3 传递参数"></a>4.1.3 传递参数</h3><blockquote><p>ECMAScript 中所有函数的参数都是按值传递的，也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。</p></blockquote><p>理解上面这句话，大概就可以理解 js 中的传参机制了，还有可以可以把函数的参数想象成局部变量。</p><h3 id="4-1-4-检测类型"><a href="#4-1-4-检测类型" class="headerlink" title="4.1.4 检测类型"></a>4.1.4 检测类型</h3><blockquote><p>要检测一个变量是不是基本数据类型的？typeof 是得力的工具，更具体一些旧事 typeof 可以确定一个变量是 string、number、boolean、还是 undefined，但是 null 会返回 object。</p></blockquote><h2 id="4-2-执行环境及作用域"><a href="#4-2-执行环境及作用域" class="headerlink" title="4.2 执行环境及作用域"></a>4.2 执行环境及作用域</h2><h3 id="4-2-1-延长作用域"><a href="#4-2-1-延长作用域" class="headerlink" title="4.2.1 延长作用域"></a>4.2.1 延长作用域</h3><ul><li>try catch</li><li>with</li></ul><p><strong>没有块级作用域</strong></p><blockquote><p>在类似 C 语言中，由花括号封闭的代码块都有自己的作用域，因而支持根据条件来定义变量。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// blue</span></code></pre><p>如果在类似 c 语言中，if 执行之后变量 color 会被销毁，但是在 js 中会被添加到当前的执行环境中。</p><p><strong>声明函数</strong></p><blockquote><p>使用 var 声明的变量会自动添加到最接近的环境中，在函数内部，最接近的环境就是函数局部环境，在 with 语句中，最接近的环境是函数环境，如果初始化的时候没有制定 var 声明，该变量就会被添加到全局环境中。</p></blockquote><p><strong>查询标志符</strong></p><blockquote><p>说白了就是 js 在查找变量的过程是逐级向上的。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// blue</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/687474703a2f2f6f647373676e6e70662e626b742e636c6f7564646e2e636f6d2f2545362539462541352545382541462541322545362541302538372545352542462539372545372541432541362e706e67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="4-3-垃圾收集"><a href="#4-3-垃圾收集" class="headerlink" title="4.3 垃圾收集"></a>4.3 垃圾收集</h2><blockquote><p>JavaScript 有自动的垃圾回收机制，执行环境会自动管理代码执行过程中使用的内容。</p></blockquote><p><strong>找出那些不再继续使用的变量，然后释放其占用的内存。</strong><br>为此，垃圾收集器会按照固定的时间间隔周期性地执行这一操作</p><p>垃圾回收机制一般有两种，<code>标记清除</code> <code>引用计数</code></p><h3 id="4-3-1-标记清除"><a href="#4-3-1-标记清除" class="headerlink" title="4.3.1 标记清除"></a>4.3.1 标记清除</h3><p>基本原理</p><blockquote><p>当变量进入环境(例如： 声明一个变量)，就将这个变量标记为”进入环境”，当变量离开环境时将其标志为”离开环境”</p></blockquote><h3 id="4-3-2-引用计数"><a href="#4-3-2-引用计数" class="headerlink" title="4.3.2 引用计数"></a>4.3.2 引用计数</h3><p>基本原理</p><blockquote><p>引用计数的含义是跟踪记录每个值被引用的次数。</p></blockquote><ol><li>当声明了一个变量并将一个引用类型的值赋给该变量时，则这个值的引用次数就是 1，如果同一个值又被赋给另一个变量，则该引用次数又加一.</li><li>相反如果包含这个值引用的变量又取得了另外一个值，则这个值的引用次数减一。</li><li>当这个值的引用次数变成 0 的时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。</li></ol><p><strong>引用计数带来的问题</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">problem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> objectA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> objectB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  objectA<span class="token punctuation">.</span>somOtherObject <span class="token operator">=</span> objectB<span class="token punctuation">;</span>  objectB<span class="token punctuation">.</span>somOtherObject <span class="token operator">=</span> objectA<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个例子中两个对象通过各自的属性相互引用，导致这两个对象的引用次数都是 2，且永远不可能为 0。在用标记清除的策略中，函数执行完成之后，两个对象都离开的作用域，所以循环引用不是问题。</p><p><strong>ie 中的麻烦</strong></p><p>ie 中的 BOM 和 DOM 对象不是 JavaScript 对象，而是使用 c++以 COM(Component Object Model 组件对象模型)对象形成的。但是 COM 对象的垃圾收集机制是引用计数，所以即使 ie 的 JavaScript 引擎是使用标记清楚策略来实现的，但是因为存在上面的问题，依然会有循环引用带来的问题。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'some_element'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>element<span class="token punctuation">.</span>someObject <span class="token operator">=</span> myObject<span class="token punctuation">;</span></code></pre><p>为了避免以上问题，应该手动断原声 js 对象与 DOM 元素之间的连接</p><pre class=" language-js"><code class="language-js">myObject<span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>someObject <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p><strong>性能问题</strong></p><blockquote><p>主要说垃圾回收机制周期处理时间</p></blockquote><p><strong>管理内存</strong></p><blockquote><p>将不用的变量手动设置为 null，解除引用关系。</p></blockquote><h1 id="第-5-章-引用类型"><a href="#第-5-章-引用类型" class="headerlink" title="第 5 章 - 引用类型"></a>第 5 章 - 引用类型</h1><p><strong>学习目标</strong></p><ul><li>使用对象</li><li>创建并操作数组</li><li>理解基本的 JavaScript 类型</li><li>使用基本类型和基本包装类型</li></ul><h2 id="5-1-Object-类型"><a href="#5-1-Object-类型" class="headerlink" title="5.1 Object 类型"></a>5.1 Object 类型</h2><blockquote><p>大多数引用类型的值都是 Object 类型的实例，而且 Object 也是 ECMAScript 中使用最多的一个类型。</p></blockquote><p><strong>创建对象的方式</strong></p><ul><li><strong>使用 new 操作符后跟 Object 构造函数</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'liusixin'</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'boy'</span><span class="token punctuation">;</span></code></pre><ul><li><strong>对象字面量表示法(定义对象的一种简写形式)</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'boy'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意对象的最后一个属性后面不是说不能加逗号，是在部分浏览器例 IE7 及更早版本下会报错，所以最好不要写</p></blockquote><p><strong>访问对象的方式</strong></p><p>一般有两种</p><ul><li>点表示法<code>(obj.name)</code></li><li>方括号表示法<code>(obj[&#39;name&#39;])</code></li></ul><blockquote><p>两种方式都可以但是如果属性名中包含会导致语法错误的字符，或者属性使用的是关键字或保留字，也可以使用方括号表示法(这个时候使用点表示法就报错了)</p></blockquote><p>当然了除非必须使用方括号表示法不然建议使用点表示法</p><h2 id="5-2-Array-类型"><a href="#5-2-Array-类型" class="headerlink" title="5.2 Array 类型"></a>5.2 Array 类型</h2><p><strong>创建数组的方式有两种</strong></p><ul><li><strong>使用 Array 的构造函数</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果事先知道数组的长度可以传一个数字，并且该数字会变成该数组 length 属性的值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然也可以向数组传入应该包含的项</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>所以当你向构造函数传递一个值的时候，如果这个值是数值，那么会创建给定项数的数组。如果传递的是其他类型参数，则会创建包含那个值的只有一项的数组。</p></blockquote><p>另外创建数组也可以省去 new 操作符。</p><ul><li><strong>创建数组的第二种基本方式是数组字面量表示法</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不要这样，这样会创建包含2或3项的数组</span><span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不要这样，这样会创建包含5或6项的数组</span></code></pre><blockquote><p>注意不要像第二行以及第三行那样创建数组，在 ie 中 values 是包含 3 个项且值分别为 1， 2， undefined 的数组</p></blockquote><p>在读取或者设置数组的值时，要使用方括号并提供索引基于 0 的数字索引.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改第三项</span>colors<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'brown'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新增第四项</span></code></pre><blockquote><p>当设置的索引大于数组现有的项数的时，数组就会自动增加到该索引加一的长度(其实不然应该是索引值需小于 4294967295)</p></blockquote><p>数组的 length 可读可写，通过设置 length 属性可以从数组的末尾移除项或者向数组中添加项。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>colors<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>利用 length 属性也可以很方便的添加新项</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>colors<span class="token punctuation">[</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'black'</span><span class="token punctuation">;</span>colors<span class="token punctuation">[</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>colors<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'grey'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4 ~ 99 都是undefined</span></code></pre><blockquote><p><strong>特别注意数组最多可以包含 4294967294 个项，如果添加的项数超过这个数，可能会导致错误</strong></p></blockquote><h3 id="5-2-1-检测数组"><a href="#5-2-1-检测数组" class="headerlink" title="5.2.1 检测数组"></a>5.2.1 检测数组</h3><ul><li><strong>对于一个网页或者一个全局作用域而言，使用 instanceof 即可</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span></code></pre><p>当然这样判断是有缺陷的，如果使用 iframe 形式嵌入网页，那么至少存在两个以上的全局执行环境，从而存在两个以上不同版本的 Array 构造函数。这样第一个框架与第二个框架分别具有不同的构造函数，(具体验证可以看 examples/第五章-引用类型/iframe 父窗口.html)</p><ul><li><strong>也可以利用 Object.prototype.toString 来判断</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isArray <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj <span class="token operator">==</span> <span class="token keyword">null</span>    <span class="token operator">?</span> <span class="token boolean">false</span>    <span class="token punctuation">:</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li><strong>还可以借助 es5 中的新 apiArray.isArray()</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// xxx</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-2-转换方法"><a href="#5-2-2-转换方法" class="headerlink" title="5.2.2 转换方法"></a>5.2.2 转换方法</h3><p>以下是数组的三个转换方法</p><ul><li>valueOf(返回的是数组本身,即是相同的引用)</li><li>toString(返回数组中每个值的字符串形式拼接形成的一个以逗号分隔的字符串)</li><li>toLocaleString(与 toString 类似，不过是调用数组的每一项的 toString 方法)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span><span class="token punctuation">,</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-boy`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// liusixin</span><span class="token function">alert</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// liusixin</span><span class="token function">alert</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// liusixin-boy</span></code></pre><p>有一个疑问，如下，既然是调用数组的每一项的 toString、toLocaleString 方法拼接成的字符串,为什么下面不报错呢？内部做了兼容？<strong>(null 没有 toString 和 toLocaleString 方法)</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'liusixin'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// liusixin,</span>arr<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// liusixin,</span></code></pre><h3 id="5-2-3-栈方法"><a href="#5-2-3-栈方法" class="headerlink" title="5.2.3 栈方法"></a>5.2.3 栈方法</h3><blockquote><p>数组提供的 push 和 pop 方法可以让其像其他数据结构一样，完成(LIFO)后进先出的表现。</p></blockquote><ul><li><code>push</code> - 可以接收任意的参数，把它们逐个添加到数组的末尾，并返回修改后数组的长度</li><li><code>pop</code> - 删除数组最后一项，并返回移除的项</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">var</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'black'</span></code></pre><p><strong>当然我们也可以向这样使用 push</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a", "b", "c", "d"]</span></code></pre><p><strong>甚至可以像数组一样，在对象上使用 push 方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> push <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用apply可以支持一次性传入多个选项</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/WX20180716-163424-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="5-2-4-队列方法"><a href="#5-2-4-队列方法" class="headerlink" title="5.2.4 队列方法"></a>5.2.4 队列方法</h3><blockquote><p>利用 shift 和 push 可以模仿队列(FIFO)的数据结构形态。</p></blockquote><ul><li><code>shift</code> - 删除数组的第一个项并返回该项</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">var</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// red</span></code></pre><p>当然可以使用 unshift 和 pop 实现相反方向的队列结构</p><ul><li><code>unshift</code> - 在数组的前端添加任意个项并返回新数组的长度</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">var</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// green</span></code></pre><p><strong>当然我们也可以向这样使用 unshift</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>unshift<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a", "b", "c", "d"]</span></code></pre><h3 id="5-2-5-重排序方法"><a href="#5-2-5-重排序方法" class="headerlink" title="5.2.5 重排序方法"></a>5.2.5 重排序方法</h3><p>数组排序主要关注两个原生支持的方法</p><ul><li><code>reverse</code> - 反转数组，会影响原数组,并且返回值为原数组的引用</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> tempArr <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [5, 4, 3, 2, 1]</span>values <span class="token operator">===</span> tempArr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><ul><li><code>sort</code> - sort 方法会调用每个数组项的 toString 方法，然后比较得到的字符串,即使是数字比较的也是字符串，以确定如何排序, 会改变原数组</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 1, 10, 15, 5]</span></code></pre><p>有人会对结果有疑问，我们看一张图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/WX20180716-164233-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>所以为了得到真正的排序后的结果，从小到大或者从大到小我们可以像下面这样做</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从小到大</span>values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从大到小</span>values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-2-6-操作方法"><a href="#5-2-6-操作方法" class="headerlink" title="5.2.6 操作方法"></a>5.2.6 操作方法</h3><ul><li><code>concat()</code> - 基于当前的数组中的所有项创建一个新的数组，具体来说就是先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。<ul><li>如果没有传参数，只是简单地对当前数组的拷贝</li><li>如果传递的是一个或者多个数组，则该方法会将这些数组中的所有项都添加到该数组中</li><li>如果传递的不是数组，这些值就会简单地添加到数组的末尾</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "yellow", "green"]</span></code></pre><p><strong>concat 方法并不修改调用它的对象(this 指向的对象) 和参数中的各个数组本身的值,而是将他们的每个元素拷贝一份放在组合成的新数组中.原数组中的元素有两种被拷贝的方式:</strong></p><ul><li>对象引用(非对象直接量):concat 方法会复制对象引用放到组合的新数组里,原数组和新数组中的对象引用都指向同一个实际的对象,所以,当实际的对象被修改时,两个数组也同时会被修改.</li><li>字符串和数字(是原始值,而不是包装原始值的 String 和 Number 对象): concat 方法会复制字符串和数字的值放到新数组里.</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> sex<span class="token punctuation">:</span> <span class="token string">'boy'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有修改arr[0]的值</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Karl'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时也修改了arr[1]的值</span></code></pre><ul><li><code>slice()</code> - 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改<ul><li>如果没有传参数则表示对当前数组的一个浅拷贝</li><li>如果传递了一个参数则返回从该参数指定的位置开始到当前数组末尾所有的项。</li><li>如果传递了两个参数则返回起始位置到结束位置的所有的项(不包含结束位置)</li></ul></li></ul><blockquote><p><strong>特别提示：如果有一个值为负值，则利用数组长度加上该值来确定相应的位置,比如下面的例子得到的结果是相同的</strong></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>splice()</code> - 该方法可谓强大，可以实现 <code>删除</code>、<code>插入</code>、<code>替换</code> 等功能，且直接改变原数组的内容,通过以下例子来说明其用法</li></ul><pre class=" language-js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">)</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span></code></pre><p><strong>splice 使用举例</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 删除第一项(删除)</span><span class="token keyword">var</span> removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// removed是一个数组，包含删除的项 ["red"]</span><span class="token comment" spellcheck="true">// 2. 从第一个位置开始插入两项(插入)</span>removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果没有删除，返回的是一个空数组[]</span><span class="token comment" spellcheck="true">// 3. 替换</span>removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-2-7-位置方法"><a href="#5-2-7-位置方法" class="headerlink" title="5.2.7 位置方法"></a>5.2.7 位置方法</h3><p>es5 中添加了两个位置方法：</p><ul><li>indexOf</li><li>lastIndexOf</li></ul><p>这两个方法都接收两个参数，要查找的项和(可选的)表示查找起点位置的索引，执行后的返回值都是表示要查找的项在数组中的位置，在找到则返回-1.并且比较使用的是严格比较（即值和类型都要相等）。</p><p><strong>关于第二个参数特别注意下面这段话</strong></p><blockquote><p>开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1 表示从最后一个元素开始查找，-2 表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，仍然从前向后查询数组。如果抵消后的索引值仍小于 0，则整个数组都将会被查询。其默认值为 0.</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/WX20180716-165923-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="5-2-8-迭代方法"><a href="#5-2-8-迭代方法" class="headerlink" title="5.2.8 迭代方法"></a>5.2.8 迭代方法</h3><p>es5 中添加了 5 个迭代方法，每个方法都接收两个参数，要在每一项上运行的函数和运行该函数的执行上下文(影响内部的 this 值)，而传入的函数会接收三个值(<strong>数组的项，该项的索引，以及数组本身</strong>)</p><ul><li><code>every()</code> - 对数组中的每一个项运行给定的函数，如果该数组的每一项都返回 true，那么结果也返回 true)</li><li><code>some()</code> - 对数组中的每一项运行给定的函数，如果该项对任一项返回 true，就返回 true</li><li><code>forEach()</code> - 对数组中的每一项运行给定的函数，该函数没有返回值</li><li><code>map()</code> - 对数组中的每一项运行给定的函数，返回每次调用函数的结果组成的数组</li><li><code>filter()</code> - 对数组的每一项运行给定的函数，返回该函数返回 true 的项组成的数组</li></ul><p><strong>特别注意</strong></p><blockquote><p>注意： 没有办法中止或者跳出 forEach 循环，除了抛出一个异常。如果你需要这样，使用 forEach()方法是错误的，你可以用一个简单的循环作为替代。如果您正在测试一个数组里的元素是否符合某条件，且需要返回一个布尔值，那么可使用 Array.every 或 Array.some。如果可用，新方法 find() 或者 findIndex() 也可被用于真值测试的提早终止。</p></blockquote><p><strong>使用举例</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// forEach</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> array<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// every</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> v <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// some</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> v <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// map</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-hello`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// filter</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> v <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pbzt3k27s.bkt.clouddn.com/WX20180716-174335-2x.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="5-3-Date-类型"><a href="#5-3-Date-类型" class="headerlink" title="5.3 Date 类型"></a>5.3 Date 类型</h2><h2 id="5-4-RegExp-类型"><a href="#5-4-RegExp-类型" class="headerlink" title="5.4 RegExp 类型"></a>5.4 RegExp 类型</h2><h2 id="5-5-Function-类型"><a href="#5-5-Function-类型" class="headerlink" title="5.5 Function 类型"></a>5.5 Function 类型</h2><p>函数实际上是对象，每个函数都是 Function 的实例，而且都与其它引用类型一样具有属性和方法。由于函数是对象，所以函数名也是指向函数对象的指针，不会与某个函数绑定。</p><p><strong>定义函数的方式</strong></p><ul><li><strong>函数声明</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong>函数表达式</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li><strong>使用 Function 构造函数(这种方式平时用到比较少)</strong><ul><li>Function 构造函数可以接收任意数量的参数，但最后一个参数指的是函数体，前面的参数则是新函数的参数。</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'num1'</span><span class="token punctuation">,</span> <span class="token string">'num2'</span><span class="token punctuation">,</span> <span class="token string">'return num1 + num2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>函数名其实仅仅是指向函数的指针，因此函数名与包含对象指针的其它变量没有什么不同，也就是说函数可能会有多个名字</p></blockquote><h3 id="5-5-1-没有重载-深入理解"><a href="#5-5-1-没有重载-深入理解" class="headerlink" title="5.5.1 没有重载(深入理解)"></a>5.5.1 没有重载(深入理解)</h3><blockquote><p>将函数想象为指针，有助于理解为什么函数没有重载的概念。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> addSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> addSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="5-5-2-函数声明与函数表达式"><a href="#5-5-2-函数声明与函数表达式" class="headerlink" title="5.5.2 函数声明与函数表达式"></a>5.5.2 函数声明与函数表达式</h3><blockquote><p>解析器在向执行环境中加载数据时，对函数声明和函数表达式并不是一视同仁，解析器会率先读取函数声明（存在函数声明提升），并使其在执行任何代码之前可用，而函数表达式，则是必须等到解析器执行到它所在的代码行，才会真正地被执行。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="第-6-章-面向对象的程序设计"><a href="#第-6-章-面向对象的程序设计" class="headerlink" title="第 6 章 - 面向对象的程序设计"></a>第 6 章 - 面向对象的程序设计</h1><p><strong>学习目标</strong></p><ul><li>理解对象属性</li><li>理解并创建对象（重要）</li><li>理解继承(重要)</li></ul><p><strong>概述</strong></p><blockquote><p>面向对象(OO)的语言都有类的概念，而通过类可以创建任意多个具有相同属性和方法的对象，js 中的对象是”无序属性的集合，其属性可以包含基本值，对象或者函数”</p></blockquote><h2 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1 理解对象"></a>6.1 理解对象</h2><p>创建自定义对象的 2 种常见方式</p><ul><li><strong>创建一个 Object 的实例</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'liusixin'</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li><strong>对象字面量创建</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'liusixin'</span><span class="token punctuation">,</span>  sayName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="6-1-1-属性类型"><a href="#6-1-1-属性类型" class="headerlink" title="6.1.1 属性类型"></a>6.1.1 属性类型</h3><ul><li>数据属性</li><li>访问器属性</li></ul><p><strong>数据属性</strong></p><blockquote><p>数据属性包含一个数据值的位置，在这个位置可以读取和写入值，数据属性有 4 个描述其行为的特性。</p></blockquote><ul><li><code>[[Configurable]]</code> : 表示 <code>1. 能否通过delete删除属性重而重新定义属性</code>。 <code>2. 能否修改属性的特性</code>，<code>3. 能否把属性修改为访问器属性</code>，使用 new Object 或对象字面量，默认值为 true</li><li><code>[[Enumerable]]</code> : 表述能否通过 for in 循环返回属性，使用 new Object 或对象字面量，默认值为 true</li><li><code>[[Writable]]</code> : 表述能否修改属性的值，使用 new Object 或对象字面量，默认值为 true</li><li><code>[[Value]]</code> : 包含这个属性的数据值，读取属性值的时候，从这个位置读，写入属性值的时候，把新值保存到这个位置。这个特性的默认值为 undefined。</li></ul><p><strong>经过测试，通过 <code>Object.defineProperty</code> 定义对象的属性 Configurable、Enumerable、Writable 默认值都是 false，而 Value 没有设置则是 undefined</strong></p><blockquote><p>可以多次调用 <code>Object.defineProperty()</code> 方法修改同一属性，但在把 configurable 特性设置为 false 之后就会有限制了。</p></blockquote><p><strong>访问器属性</strong></p><blockquote><p>访问器属性不包括数据值，包含一堆 getter 和 setter 函数（这两个函数不是必须的）。在读取属性的时，会调用 getter 函数，这个函数负责返回有效值，在写入访问器属性时，会调用 getter 函数并传入新值，这个函数负责决定如何处理数据。分别有以下属性</p></blockquote><ul><li><code>[[Configurable]]</code> : 表示 <code>1 能否通过delete删除属性重而重新定义属性</code>，<code>2. 能否修改属性的特性</code>，<code>3. 能否把属性修改为访问器属性</code>,使用 new Object 或对象字面量，默认值为 true</li><li><code>[[Enumerable]]</code> : 表述能否通过 for in 循环返回属性，使用 new Object 或对象字面量，默认值为 true</li><li><code>[[Get]]</code> : 在读取属性时调用的函数，默认值为 undefined</li><li><code>[[Set]]</code> : 在写入属性时调用的函数，默认值为 undefined</li></ul><blockquote><p>访问器属性不能直接定义，必须使用 Object.defineProperty 定义。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token number">2004</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2005</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>不一定 get 和 set 函数都要指定，只指定 get，意味着只能读不能写，只指定 set，意为着只能写不能读</strong></p><p>同样我们可以使用 <code>__defineGetter__</code> 和 <code>__defineSetter__</code> 来做一些 get、set 的事情</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token number">2004</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>book<span class="token punctuation">.</span><span class="token function">__defineGetter__</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book<span class="token punctuation">.</span><span class="token function">__defineSetter__</span><span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-1-2-定义多个属性"><a href="#6-1-2-定义多个属性" class="headerlink" title="6.1.2 定义多个属性"></a>6.1.2 定义多个属性</h3><blockquote><p><code>Object.defineProperties()</code>一次描述多个属性。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token number">2004</span><span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 不指定将不可写</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  year<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6-2-创建对象"><a href="#6-2-创建对象" class="headerlink" title="6.2 创建对象"></a>6.2 创建对象</h2><blockquote><p>使用 Object 构造函数和对象字面量的形式来创建对象有一个明显的缺点，使用同一个接口创建很多对象，会产生很多垃圾代码。</p></blockquote><p><strong>创建对象的各种模式</strong></p><blockquote><p>创建对象的模式有很多种，比如工厂模式、构造函数模式、原型模式、混合构造函数和原型模式等等，这里做主要的代码示例和介绍。</p></blockquote><h3 id="6-2-1-工厂模式"><a href="#6-2-1-工厂模式" class="headerlink" title="6.2.1 工厂模式"></a>6.2.1 工厂模式</h3><blockquote><p>工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程，用函数来封装以特定接口来创建对象的细节。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">,</span> <span class="token string">'boy'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'hahaha'</span><span class="token punctuation">,</span> <span class="token string">'girl'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>createPerson</code> 函数能够根据传入的参数来构建包含三个所有必要信息的 Person 对象,可以无数次的调用这个函数，而它每次都会返回包含三个属性的一个方法的对象。工厂模式虽然解决了创建多个相似对象的代码冗余问题，但是却没有解决对象识别的问题。</p><h3 id="6-2-2-构造函数模式"><a href="#6-2-2-构造函数模式" class="headerlink" title="6.2.2 构造函数模式"></a>6.2.2 构造函数模式</h3><blockquote><p>构造函数可以用来创建特定类型的对象，有些类似 Array 和 Object 在运行时就自动出现在执行环境中，此外，也可以自定义构造函数。从而自定义对象类型的属性和方法。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'liusixin'</span><span class="token punctuation">,</span> <span class="token string">'boy'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hahaha'</span><span class="token punctuation">,</span> <span class="token string">'girl'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>跟工厂模式相比可以发现，有以下区别</strong></p><ul><li>没有显示地创建对象</li><li>直接将属性和方法赋给了 this 对象</li><li>没有 return 语句</li><li>构造函数名字使用首字母大写</li></ul><p><strong>创建 Person 实例大概经历了以下几步</strong></p><ul><li>创建一个新的对象</li><li>将构造函数的作用域赋值给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ul><p>创建自定义的构造函数意味着可以将它的实例标记为一种特定的类型，这也是其胜过工厂模式的地方</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;红宝书读过之后很多知识点都忘了，写此博文来重新复习下之前比较模糊的知识点。&lt;/p&gt;
&lt;h1 id=&quot;第-4-章-变量、作用域和内存问题&quot;&gt;&lt;a href=&quot;#第-4-章-变量、作用域和内存问题&quot; class=&quot;headerlink&quot; title=&quot;第 4 章 - 变量、作用
      
    
    </summary>
    
      <category term="Javascript高级程序设计系列" scheme="http://coder.liusixin.cn/categories/Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="javascript" scheme="http://coder.liusixin.cn/tags/javascript/"/>
    
      <category term="编程笔记" scheme="http://coder.liusixin.cn/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript高级程序设计" scheme="http://coder.liusixin.cn/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
